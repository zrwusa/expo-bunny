{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import React from'react';import KeyboardAvoidingView from\"react-native-web/dist/exports/KeyboardAvoidingView\";import Platform from\"react-native-web/dist/exports/Platform\";import SafeAreaView from\"react-native-web/dist/exports/SafeAreaView\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{ActionSheetProvider}from\"../../../packages/react-native-action-sheet/src\";import{v4}from'uuid';import{getBottomSpace}from'react-native-iphone-x-helper';import dayjs from'dayjs';import localizedFormat from'dayjs/plugin/localizedFormat';import*as utils from\"./utils\";import Actions from\"./Actions\";import ChatAvatar from\"./ChatAvatar\";import Bubble from\"./Bubble\";import SystemMessage from\"./SystemMessage\";import MessageImage from\"./MessageImage\";import MessageSticker from\"./MessageSticker\";import MessageText from\"./MessageText\";import Composer from\"./Composer\";import Day from\"./Day\";import InputToolbar from\"./InputToolbar\";import LoadEarlier from\"./LoadEarlier\";import Message from\"./Message\";import MessageContainer from\"./MessageContainer\";import Send from\"./Send\";import Time from\"./Time\";import BunnyAvatar from\"./BunnyAvatar\";import{DATE_FORMAT,DEFAULT_PLACEHOLDER,MAX_COMPOSER_HEIGHT,MIN_COMPOSER_HEIGHT,TIME_FORMAT}from\"./Constant\";import{withBunnyKit}from\"../../hooks/bunny-kit\";dayjs.extend(localizedFormat);var BunnyChatInner=function(_React$Component){_inherits(BunnyChatInner,_React$Component);var _super=_createSuper(BunnyChatInner);function BunnyChatInner(props){var _this;_classCallCheck(this,BunnyChatInner);_this=_super.call(this,props);_this._isMounted=false;_this._keyboardHeight=0;_this._bottomOffset=0;_this._maxHeight=undefined;_this._isFirstLayout=true;_this._locale='en';_this.invertibleScrollViewProps=undefined;_this._actionSheetRef=undefined;_this._messageContainerRef=React.createRef();_this._isTextInputWasFocused=false;_this.state={isInitialized:false,composerHeight:_this.props.minComposerHeight,messagesContainerHeight:undefined,typingDisabled:false,text:undefined,messages:undefined};_this.safeAreaSupport=function(bottomOffset){return bottomOffset!=null?bottomOffset:getBottomSpace();};_this.onKeyboardWillShow=function(e){_this.handleTextInputFocusWhenKeyboardShow();if(_this.props.isKeyboardInternallyHandled){_this.setIsTypingDisabled(true);_this.setKeyboardHeight(e.endCoordinates?e.endCoordinates.height:e.end.height);_this.setBottomOffset(_this.safeAreaSupport(_this.props.bottomOffset));var newMessagesContainerHeight=_this.getMessagesContainerHeightWithKeyboard();_this.setState({messagesContainerHeight:newMessagesContainerHeight});}};_this.onKeyboardWillHide=function(_e){_this.handleTextInputFocusWhenKeyboardHide();if(_this.props.isKeyboardInternallyHandled){_this.setIsTypingDisabled(true);_this.setKeyboardHeight(0);_this.setBottomOffset(0);var newMessagesContainerHeight=_this.getBasicMessagesContainerHeight();_this.setState({messagesContainerHeight:newMessagesContainerHeight});}};_this.onKeyboardDidShow=function(e){if(Platform.OS==='android'){_this.onKeyboardWillShow(e);}_this.setIsTypingDisabled(false);};_this.onKeyboardDidHide=function(e){if(Platform.OS==='android'){_this.onKeyboardWillHide(e);}_this.setIsTypingDisabled(false);};_this.onSend=function(){var messages=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var shouldResetInputToolbar=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!Array.isArray(messages)){messages=[messages];}var newMessages=messages.map(function(message){return _objectSpread(_objectSpread({},message),{},{user:_this.props.user,createdAt:new Date(),_id:_this.props.messageIdGenerator&&_this.props.messageIdGenerator()});});if(shouldResetInputToolbar){_this.setIsTypingDisabled(true);_this.resetInputToolbar();}if(_this.props.onSend){_this.props.onSend(newMessages,shouldResetInputToolbar);}if(shouldResetInputToolbar){setTimeout(function(){if(_this.getIsMounted()){_this.setIsTypingDisabled(false);}},100);}};_this.onInputSizeChanged=function(size){var wp=_this.props.bunnyKit.wp;var newComposerHeight=Math.max(_this.props.minComposerHeight,Math.min(_this.props.maxComposerHeight,size.height));var newMessagesContainerHeight=_this.getMessagesContainerHeightWithKeyboard(newComposerHeight);_this.setState({composerHeight:newComposerHeight,messagesContainerHeight:newMessagesContainerHeight});};_this.onInputTextChanged=function(text){if(_this.getIsTypingDisabled()){return;}if(_this.props.onInputTextChanged){_this.props.onInputTextChanged(text);}if(_this.props.text===undefined){_this.setState({text:text});}};_this.onInitialLayoutViewLayout=function(e){var layout=e.nativeEvent.layout;if(layout.height<=0){return;}_this.notifyInputTextReset();_this.setMaxHeight(layout.height);var newComposerHeight=_this.props.minComposerHeight;var newMessagesContainerHeight=_this.getMessagesContainerHeightWithKeyboard(newComposerHeight);var initialText=_this.props.initialText||'';_this.setState({isInitialized:true,text:_this.getTextFromProp(initialText),composerHeight:newComposerHeight,messagesContainerHeight:newMessagesContainerHeight});};_this.onMainViewLayout=function(e){var layout=e.nativeEvent.layout;if(_this.getMaxHeight()!==layout.height||_this.getIsFirstLayout()===true){_this.setMaxHeight(layout.height);_this.setState({messagesContainerHeight:_this._keyboardHeight>0?_this.getMessagesContainerHeightWithKeyboard():_this.getBasicMessagesContainerHeight()});}if(_this.getIsFirstLayout()===true){_this.setIsFirstLayout(false);}};_this.invertibleScrollViewProps={inverted:_this.props.inverted,keyboardShouldPersistTaps:_this.props.keyboardShouldPersistTaps,onKeyboardWillShow:_this.onKeyboardWillShow,onKeyboardWillHide:_this.onKeyboardWillHide,onKeyboardDidShow:_this.onKeyboardDidShow,onKeyboardDidHide:_this.onKeyboardDidHide};return _this;}_createClass(BunnyChatInner,[{key:\"componentDidMount\",value:function componentDidMount(){var _this$props=this.props,messages=_this$props.messages,text=_this$props.text;this.setIsMounted(true);this.setMessages(messages||[]);this.setTextFromProp(text);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.setIsMounted(false);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this2=this;var _this$props2=this.props,messages=_this$props2.messages,text=_this$props2.text,inverted=_this$props2.inverted;if(this.props!==prevProps){this.setMessages(messages||[]);}if(inverted===false&&messages&&prevProps.messages&&messages.length!==prevProps.messages.length){setTimeout(function(){return _this2.scrollToBottom(false);},200);}if(text!==prevProps.text){this.setTextFromProp(text);}}},{key:\"setTextFromProp\",value:function setTextFromProp(textProp){if(textProp!==undefined&&textProp!==this.state.text){this.setState({text:textProp});}}},{key:\"getTextFromProp\",value:function getTextFromProp(fallback){if(this.props.text===undefined){return fallback;}return this.props.text;}},{key:\"setMessages\",value:function setMessages(messages){this.setState({messages:messages});}},{key:\"getMessages\",value:function getMessages(){return this.state.messages;}},{key:\"setMaxHeight\",value:function setMaxHeight(height){this._maxHeight=height;}},{key:\"getMaxHeight\",value:function getMaxHeight(){return this._maxHeight;}},{key:\"setKeyboardHeight\",value:function setKeyboardHeight(height){this._keyboardHeight=height;}},{key:\"getKeyboardHeight\",value:function getKeyboardHeight(){if(Platform.OS==='android'&&!this.props.forceGetKeyboardHeight){return 0;}return this._keyboardHeight;}},{key:\"setBottomOffset\",value:function setBottomOffset(value){this._bottomOffset=value;}},{key:\"getBottomOffset\",value:function getBottomOffset(){return this._bottomOffset;}},{key:\"setIsFirstLayout\",value:function setIsFirstLayout(value){this._isFirstLayout=value;}},{key:\"getIsFirstLayout\",value:function getIsFirstLayout(){return this._isFirstLayout;}},{key:\"setIsTypingDisabled\",value:function setIsTypingDisabled(value){this.setState({typingDisabled:value});}},{key:\"getIsTypingDisabled\",value:function getIsTypingDisabled(){return this.state.typingDisabled;}},{key:\"setIsMounted\",value:function setIsMounted(value){this._isMounted=value;}},{key:\"getIsMounted\",value:function getIsMounted(){return this._isMounted;}},{key:\"getMinInputToolbarHeight\",value:function getMinInputToolbarHeight(){return this.props.renderAccessory?this.props.minInputToolbarHeight*2:this.props.minInputToolbarHeight;}},{key:\"calculateInputToolbarHeight\",value:function calculateInputToolbarHeight(composerHeight){return composerHeight+(this.getMinInputToolbarHeight()-this.props.minComposerHeight);}},{key:\"getBasicMessagesContainerHeight\",value:function getBasicMessagesContainerHeight(){var composerHeight=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.state.composerHeight;return this.getMaxHeight()-this.calculateInputToolbarHeight(composerHeight);}},{key:\"getMessagesContainerHeightWithKeyboard\",value:function getMessagesContainerHeightWithKeyboard(){var composerHeight=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.state.composerHeight;return this.getBasicMessagesContainerHeight(composerHeight)-this.getKeyboardHeight()+this.getBottomOffset();}},{key:\"handleTextInputFocusWhenKeyboardHide\",value:function handleTextInputFocusWhenKeyboardHide(){if(!this._isTextInputWasFocused){var _this$textInput;this._isTextInputWasFocused=((_this$textInput=this.textInput)==null?void 0:_this$textInput.isFocused())||false;}}},{key:\"handleTextInputFocusWhenKeyboardShow\",value:function handleTextInputFocusWhenKeyboardShow(){if(this.textInput&&this._isTextInputWasFocused&&!this.textInput.isFocused()){this.textInput.focus();}this._isTextInputWasFocused=false;}},{key:\"scrollToBottom\",value:function scrollToBottom(){var animated=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;if(this._messageContainerRef&&this._messageContainerRef.current){var inverted=this.props.inverted;if(!inverted){this._messageContainerRef.current.scrollToEnd({animated:animated});}else{this._messageContainerRef.current.scrollToOffset({offset:0,animated:animated});}}}},{key:\"renderMessages\",value:function renderMessages(){var _this$props3=this.props,audioProps=_this$props3.audioProps,alignTop=_this$props3.alignTop,activityIndicatorSize=_this$props3.activityIndicatorSize,activityIndicatorStyle=_this$props3.activityIndicatorStyle,audioContainerStyle=_this$props3.audioContainerStyle,audioStyle=_this$props3.audioStyle,avatarContainerStyle=_this$props3.avatarContainerStyle,avatarImageStyle=_this$props3.avatarImageStyle,avatarTextStyle=_this$props3.avatarTextStyle,activityIndicatorColor=_this$props3.activityIndicatorColor,bottomContainerStyle=_this$props3.bottomContainerStyle,bubbleContainerStyle=_this$props3.bubbleContainerStyle,bubbleWrapperStyle=_this$props3.bubbleWrapperStyle,customTextStyle=_this$props3.customTextStyle,containerToPreviousStyle=_this$props3.containerToPreviousStyle,containerToNextStyle=_this$props3.containerToNextStyle,dayWrapperStyle=_this$props3.dayWrapperStyle,dayTextStyle=_this$props3.dayTextStyle,dayTextProps=_this$props3.dayTextProps,dayContainerStyle=_this$props3.dayContainerStyle,dateFormat=_this$props3.dateFormat,extraData=_this$props3.extraData,forwardRef=_this$props3.forwardRef,renderFooter=_this$props3.renderFooter,isDebug=_this$props3.isDebug,isTyping=_this$props3.isTyping,isLoadingEarlier=_this$props3.isLoadingEarlier,isCustomViewBottom=_this$props3.isCustomViewBottom,invertibleScrollViewProps=_this$props3.invertibleScrollViewProps,inverted=_this$props3.inverted,infiniteScroll=_this$props3.infiniteScroll,imageStyle=_this$props3.imageStyle,imageProps=_this$props3.imageProps,imageContainerStyle=_this$props3.imageContainerStyle,keepReplies=_this$props3.keepReplies,loadEarlierWrapperStyle=_this$props3.loadEarlierWrapperStyle,loadEarlierTextStyle=_this$props3.loadEarlierTextStyle,loadEarlierContainerStyle=_this$props3.loadEarlierContainerStyle,loadEarlier=_this$props3.loadEarlier,listViewProps=_this$props3.listViewProps,linkStyle=_this$props3.linkStyle,lightBoxProps=_this$props3.lightBoxProps,loadEarlierLabel=_this$props3.loadEarlierLabel,messages=_this$props3.messages,messagesContainerStyle=_this$props3.messagesContainerStyle,nextMessage=_this$props3.nextMessage,onMessageReadyForDisplay=_this$props3.onMessageReadyForDisplay,onQuickReply=_this$props3.onQuickReply,onPressAvatar=_this$props3.onPressAvatar,onPress=_this$props3.onPress,onMessageLayout=_this$props3.onMessageLayout,onLongPressAvatar=_this$props3.onLongPressAvatar,onLongPress=_this$props3.onLongPress,onLoadEarlier=_this$props3.onLoadEarlier,onMessageLoad=_this$props3.onMessageLoad,onMessageLoadError=_this$props3.onMessageLoadError,onMessageLoadStart=_this$props3.onMessageLoadStart,onMessageLoadEnd=_this$props3.onMessageLoadEnd,phoneNumberOptionTitles=_this$props3.phoneNumberOptionTitles,previousMessage=_this$props3.previousMessage,parsePatterns=_this$props3.parsePatterns,quickReplyStyle=_this$props3.quickReplyStyle,quickRepliesColor=_this$props3.quickRepliesColor,renderTicks=_this$props3.renderTicks,renderSystemMessage=_this$props3.renderSystemMessage,renderScrollToBottom=_this$props3.renderScrollToBottom,renderQuickReplySend=_this$props3.renderQuickReplySend,renderQuickReplies=_this$props3.renderQuickReplies,renderMessageVideo=_this$props3.renderMessageVideo,renderMessageText=_this$props3.renderMessageText,renderMessageSticker=_this$props3.renderMessageSticker,renderMessageImage=_this$props3.renderMessageImage,renderMessageAudio=_this$props3.renderMessageAudio,renderMessage=_this$props3.renderMessage,renderLoadEarlier=_this$props3.renderLoadEarlier,renderDay=_this$props3.renderDay,renderCustomView=_this$props3.renderCustomView,renderChatEmpty=_this$props3.renderChatEmpty,renderBubble=_this$props3.renderBubble,renderAvatarOnTop=_this$props3.renderAvatarOnTop,renderAvatar=_this$props3.renderAvatar,renderTime=_this$props3.renderTime,renderUsernameOnMessage=_this$props3.renderUsernameOnMessage,sendText=_this$props3.sendText,stickerStyle=_this$props3.stickerStyle,stickerProps=_this$props3.stickerProps,scrollToBottom=_this$props3.scrollToBottom,scrollToBottomOffset=_this$props3.scrollToBottomOffset,scrollToBottomStyle=_this$props3.scrollToBottomStyle,shouldUpdateMessage=_this$props3.shouldUpdateMessage,showAvatarForEveryMessage=_this$props3.showAvatarForEveryMessage,showUserAvatar=_this$props3.showUserAvatar,stickerContainerStyle=_this$props3.stickerContainerStyle,systemMessageContainerStyle=_this$props3.systemMessageContainerStyle,systemMessageWrapperStyle=_this$props3.systemMessageWrapperStyle,systemTextStyle=_this$props3.systemTextStyle,textStyle=_this$props3.textStyle,textLongPressOptionTitles=_this$props3.textLongPressOptionTitles,timeContainerStyle=_this$props3.timeContainerStyle,textContainerStyle=_this$props3.textContainerStyle,textProps=_this$props3.textProps,tickStyle=_this$props3.tickStyle,timeFormat=_this$props3.timeFormat,timeTextStyle=_this$props3.timeTextStyle,touchableProps=_this$props3.touchableProps,user=_this$props3.user,usernameStyle=_this$props3.usernameStyle,videoContainerStyle=_this$props3.videoContainerStyle,videoProps=_this$props3.videoProps,videoStyle=_this$props3.videoStyle,audioProgressStyle=_this$props3.audioProgressStyle,audioPlayButtonStyle=_this$props3.audioPlayButtonStyle,audioProgressColor=_this$props3.audioProgressColor,audioRemainTimeStyle=_this$props3.audioRemainTimeStyle,audioPlayButtonIconStyle=_this$props3.audioPlayButtonIconStyle;var messageContainerProps={audioProps:audioProps,alignTop:alignTop,activityIndicatorSize:activityIndicatorSize,activityIndicatorStyle:activityIndicatorStyle,audioContainerStyle:audioContainerStyle,audioStyle:audioStyle,avatarContainerStyle:avatarContainerStyle,avatarImageStyle:avatarImageStyle,avatarTextStyle:avatarTextStyle,activityIndicatorColor:activityIndicatorColor,bottomContainerStyle:bottomContainerStyle,bubbleContainerStyle:bubbleContainerStyle,bubbleWrapperStyle:bubbleWrapperStyle,customTextStyle:customTextStyle,containerToPreviousStyle:containerToPreviousStyle,containerToNextStyle:containerToNextStyle,dayWrapperStyle:dayWrapperStyle,dayTextStyle:dayTextStyle,dayTextProps:dayTextProps,dayContainerStyle:dayContainerStyle,dateFormat:dateFormat,extraData:extraData,forwardRef:forwardRef,renderFooter:renderFooter,isDebug:isDebug,isTyping:isTyping,isLoadingEarlier:isLoadingEarlier,isCustomViewBottom:isCustomViewBottom,invertibleScrollViewProps:invertibleScrollViewProps,inverted:inverted,infiniteScroll:infiniteScroll,imageStyle:imageStyle,imageProps:imageProps,imageContainerStyle:imageContainerStyle,keepReplies:keepReplies,loadEarlierWrapperStyle:loadEarlierWrapperStyle,loadEarlierTextStyle:loadEarlierTextStyle,loadEarlierContainerStyle:loadEarlierContainerStyle,loadEarlier:loadEarlier,listViewProps:listViewProps,linkStyle:linkStyle,lightBoxProps:lightBoxProps,loadEarlierLabel:loadEarlierLabel,messages:messages,nextMessage:nextMessage,onMessageReadyForDisplay:onMessageReadyForDisplay,onQuickReply:onQuickReply,onPressAvatar:onPressAvatar,onPress:onPress,onMessageLayout:onMessageLayout,onLongPressAvatar:onLongPressAvatar,onLongPress:onLongPress,onLoadEarlier:onLoadEarlier,onMessageLoad:onMessageLoad,onMessageLoadError:onMessageLoadError,onMessageLoadStart:onMessageLoadStart,onMessageLoadEnd:onMessageLoadEnd,phoneNumberOptionTitles:phoneNumberOptionTitles,previousMessage:previousMessage,parsePatterns:parsePatterns,quickReplyStyle:quickReplyStyle,quickRepliesColor:quickRepliesColor,renderTicks:renderTicks,renderSystemMessage:renderSystemMessage,renderScrollToBottom:renderScrollToBottom,renderQuickReplySend:renderQuickReplySend,renderQuickReplies:renderQuickReplies,renderMessageVideo:renderMessageVideo,renderMessageText:renderMessageText,renderMessageSticker:renderMessageSticker,renderMessageImage:renderMessageImage,renderMessageAudio:renderMessageAudio,renderMessage:renderMessage,renderLoadEarlier:renderLoadEarlier,renderDay:renderDay,renderCustomView:renderCustomView,renderChatEmpty:renderChatEmpty,renderBubble:renderBubble,renderAvatarOnTop:renderAvatarOnTop,renderAvatar:renderAvatar,renderTime:renderTime,renderUsernameOnMessage:renderUsernameOnMessage,sendText:sendText,stickerStyle:stickerStyle,stickerProps:stickerProps,scrollToBottom:scrollToBottom,scrollToBottomOffset:scrollToBottomOffset,scrollToBottomStyle:scrollToBottomStyle,shouldUpdateMessage:shouldUpdateMessage,showAvatarForEveryMessage:showAvatarForEveryMessage,showUserAvatar:showUserAvatar,stickerContainerStyle:stickerContainerStyle,systemMessageContainerStyle:systemMessageContainerStyle,systemMessageWrapperStyle:systemMessageWrapperStyle,systemTextStyle:systemTextStyle,textStyle:textStyle,textLongPressOptionTitles:textLongPressOptionTitles,timeContainerStyle:timeContainerStyle,textContainerStyle:textContainerStyle,textProps:textProps,tickStyle:tickStyle,timeFormat:timeFormat,timeTextStyle:timeTextStyle,touchableProps:touchableProps,user:user,usernameStyle:usernameStyle,videoContainerStyle:videoContainerStyle,videoProps:videoProps,videoStyle:videoStyle,audioProgressStyle:audioProgressStyle,audioPlayButtonStyle:audioPlayButtonStyle,audioProgressColor:audioProgressColor,audioRemainTimeStyle:audioRemainTimeStyle,audioPlayButtonIconStyle:audioPlayButtonIconStyle};var fragment=React.createElement(View,{style:[{height:this.state.messagesContainerHeight},messagesContainerStyle]},React.createElement(MessageContainer,_extends({},messageContainerProps,{invertibleScrollViewProps:this.invertibleScrollViewProps,messages:this.getMessages(),forwardRef:this._messageContainerRef,isTyping:this.props.isTyping})),this.renderChatFooter());return this.props.isKeyboardInternallyHandled?React.createElement(KeyboardAvoidingView,{enabled:true},fragment):fragment;}},{key:\"resetInputToolbar\",value:function resetInputToolbar(){if(this.textInput){this.textInput.clear();}this.notifyInputTextReset();var newComposerHeight=this.props.minComposerHeight;var newMessagesContainerHeight=this.getMessagesContainerHeightWithKeyboard(newComposerHeight);this.setState({text:this.getTextFromProp(''),composerHeight:newComposerHeight,messagesContainerHeight:newMessagesContainerHeight});}},{key:\"focusTextInput\",value:function focusTextInput(){if(this.textInput){this.textInput.focus();}}},{key:\"notifyInputTextReset\",value:function notifyInputTextReset(){if(this.props.onInputTextChanged){this.props.onInputTextChanged('');}}},{key:\"renderInputToolbar\",value:function renderInputToolbar(){var _this3=this;var _this$props4=this.props,actionsConfig=_this$props4.actionsConfig,actionSheet=_this$props4.actionSheet,alwaysShowSend=_this$props4.alwaysShowSend,audioProps=_this$props4.audioProps,bottomOffset=_this$props4.bottomOffset,composerHeight=_this$props4.composerHeight,dateFormat=_this$props4.dateFormat,disableComposer=_this$props4.disableComposer,extraData=_this$props4.extraData,forceGetKeyboardHeight=_this$props4.forceGetKeyboardHeight,imageProps=_this$props4.imageProps,inverted=_this$props4.inverted,isCustomViewBottom=_this$props4.isCustomViewBottom,isKeyboardInternallyHandled=_this$props4.isKeyboardInternallyHandled,isLoadingEarlier=_this$props4.isLoadingEarlier,keyboardShouldPersistTaps=_this$props4.keyboardShouldPersistTaps,lightBoxProps=_this$props4.lightBoxProps,listViewProps=_this$props4.listViewProps,loadEarlier=_this$props4.loadEarlier,locale=_this$props4.locale,maxComposerHeight=_this$props4.maxComposerHeight,maxInputLength=_this$props4.maxInputLength,messageIdGenerator=_this$props4.messageIdGenerator,messages=_this$props4.messages,messagesContainerStyle=_this$props4.messagesContainerStyle,minComposerHeight=_this$props4.minComposerHeight,minInputToolbarHeight=_this$props4.minInputToolbarHeight,onInputSizeChanged=_this$props4.onInputSizeChanged,onInputTextChanged=_this$props4.onInputTextChanged,onLoadEarlier=_this$props4.onLoadEarlier,onLongPress=_this$props4.onLongPress,onLongPressAvatar=_this$props4.onLongPressAvatar,onMessageLoad=_this$props4.onMessageLoad,onMessageLoadEnd=_this$props4.onMessageLoadEnd,onMessageLoadError=_this$props4.onMessageLoadError,onMessageLoadStart=_this$props4.onMessageLoadStart,onMessageReadyForDisplay=_this$props4.onMessageReadyForDisplay,onPressActionButton=_this$props4.onPressActionButton,onPressAvatar=_this$props4.onPressAvatar,onSend=_this$props4.onSend,onTextChanged=_this$props4.onTextChanged,placeholder=_this$props4.placeholder,renderAccessory=_this$props4.renderAccessory,renderActions=_this$props4.renderActions,renderAvatar=_this$props4.renderAvatar,renderAvatarOnTop=_this$props4.renderAvatarOnTop,renderBubble=_this$props4.renderBubble,renderChatEmpty=_this$props4.renderChatEmpty,renderChatFooter=_this$props4.renderChatFooter,renderComposer=_this$props4.renderComposer,renderCustomView=_this$props4.renderCustomView,renderDay=_this$props4.renderDay,renderFooter=_this$props4.renderFooter,renderInputToolbar=_this$props4.renderInputToolbar,renderLoadEarlier=_this$props4.renderLoadEarlier,renderLoading=_this$props4.renderLoading,renderMessage=_this$props4.renderMessage,renderMessageAudio=_this$props4.renderMessageAudio,renderMessageImage=_this$props4.renderMessageImage,renderMessageSticker=_this$props4.renderMessageSticker,renderMessageText=_this$props4.renderMessageText,renderMessageVideo=_this$props4.renderMessageVideo,renderSend=_this$props4.renderSend,renderSystemMessage=_this$props4.renderSystemMessage,renderTime=_this$props4.renderTime,renderUsernameOnMessage=_this$props4.renderUsernameOnMessage,showUserAvatar=_this$props4.showUserAvatar,stickerProps=_this$props4.stickerProps,text=_this$props4.text,textInputProps=_this$props4.textInputProps,timeFormat=_this$props4.timeFormat,user=_this$props4.user,videoProps=_this$props4.videoProps,wrapInSafeArea=_this$props4.wrapInSafeArea;var inputToolbarProps={actionsConfig:actionsConfig,actionSheet:actionSheet,alwaysShowSend:alwaysShowSend,audioProps:audioProps,bottomOffset:bottomOffset,dateFormat:dateFormat,disableComposer:disableComposer,extraData:extraData,forceGetKeyboardHeight:forceGetKeyboardHeight,imageProps:imageProps,inverted:inverted,isCustomViewBottom:isCustomViewBottom,isKeyboardInternallyHandled:isKeyboardInternallyHandled,isLoadingEarlier:isLoadingEarlier,keyboardShouldPersistTaps:keyboardShouldPersistTaps,lightBoxProps:lightBoxProps,listViewProps:listViewProps,loadEarlier:loadEarlier,locale:locale,maxComposerHeight:maxComposerHeight,maxInputLength:maxInputLength,messageIdGenerator:messageIdGenerator,messages:messages,messagesContainerStyle:messagesContainerStyle,minComposerHeight:minComposerHeight,minInputToolbarHeight:minInputToolbarHeight,onInputTextChanged:onInputTextChanged,onLoadEarlier:onLoadEarlier,onLongPress:onLongPress,onLongPressAvatar:onLongPressAvatar,onMessageLoad:onMessageLoad,onMessageLoadEnd:onMessageLoadEnd,onMessageLoadError:onMessageLoadError,onMessageLoadStart:onMessageLoadStart,onMessageReadyForDisplay:onMessageReadyForDisplay,onPressActionButton:onPressActionButton,onPressAvatar:onPressAvatar,placeholder:placeholder,renderAccessory:renderAccessory,renderActions:renderActions,renderAvatar:renderAvatar,renderAvatarOnTop:renderAvatarOnTop,renderBubble:renderBubble,renderChatEmpty:renderChatEmpty,renderChatFooter:renderChatFooter,renderComposer:renderComposer,renderCustomView:renderCustomView,renderDay:renderDay,renderFooter:renderFooter,renderLoadEarlier:renderLoadEarlier,renderLoading:renderLoading,renderMessage:renderMessage,renderMessageAudio:renderMessageAudio,renderMessageImage:renderMessageImage,renderMessageSticker:renderMessageSticker,renderMessageText:renderMessageText,renderMessageVideo:renderMessageVideo,renderSend:renderSend,renderSystemMessage:renderSystemMessage,renderTime:renderTime,renderUsernameOnMessage:renderUsernameOnMessage,showUserAvatar:showUserAvatar,stickerProps:stickerProps,timeFormat:timeFormat,user:user,videoProps:videoProps,wrapInSafeArea:wrapInSafeArea,text:this.getTextFromProp(this.state.text),composerHeight:Math.max(this.props.minComposerHeight,this.state.composerHeight),onSend:this.onSend,onInputSizeChanged:this.onInputSizeChanged,onTextChanged:this.onInputTextChanged,textInputProps:_objectSpread(_objectSpread({},textInputProps),{},{ref:function ref(textInput){return _this3.textInput=textInput;},maxLength:this.getIsTypingDisabled()?0:this.props.maxInputLength})};if(this.props.renderInputToolbar){return this.props.renderInputToolbar(inputToolbarProps);}return React.createElement(InputToolbar,inputToolbarProps);}},{key:\"renderChatFooter\",value:function renderChatFooter(){if(this.props.renderChatFooter){return this.props.renderChatFooter();}return null;}},{key:\"renderLoading\",value:function renderLoading(){if(this.props.renderLoading){return this.props.renderLoading();}return null;}},{key:\"render\",value:function render(){var _this4=this;var _this$props$bunnyKit=this.props.bunnyKit,sizeLabor=_this$props$bunnyKit.sizeLabor,themeLabor=_this$props$bunnyKit.themeLabor;var styles=makeStyles(sizeLabor,themeLabor);if(this.state.isInitialized===true){var wrapInSafeArea=this.props.wrapInSafeArea;var Wrapper=wrapInSafeArea?SafeAreaView:View;return React.createElement(Wrapper,{style:styles.safeArea},React.createElement(ActionSheetProvider,{ref:function ref(component){return _this4._actionSheetRef=component;}},React.createElement(View,{style:styles.container,onLayout:this.onMainViewLayout},this.renderMessages(),this.renderInputToolbar())));}return React.createElement(View,{style:styles.container,onLayout:this.onInitialLayoutViewLayout},this.renderLoading());}}],[{key:\"append\",value:function append(){var currentMessages=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var messages=arguments.length>1?arguments[1]:undefined;var inverted=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!Array.isArray(messages)){messages=[messages];}return inverted?messages.concat(currentMessages):currentMessages.concat(messages);}},{key:\"prepend\",value:function prepend(){var currentMessages=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var messages=arguments.length>1?arguments[1]:undefined;var inverted=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!Array.isArray(messages)){messages=[messages];}return inverted?currentMessages.concat(messages):messages.concat(currentMessages);}}]);return BunnyChatInner;}(React.Component);BunnyChatInner.defaultProps={messages:[],messagesContainerStyle:undefined,text:undefined,placeholder:DEFAULT_PLACEHOLDER,disableComposer:false,messageIdGenerator:function messageIdGenerator(){return v4();},user:undefined,onSend:function onSend(){},locale:'',timeFormat:TIME_FORMAT,dateFormat:DATE_FORMAT,loadEarlier:false,onLoadEarlier:function onLoadEarlier(){},onMessageLoadStart:function onMessageLoadStart(){},onMessageLoadEnd:function onMessageLoadEnd(){},onMessageReadyForDisplay:function onMessageReadyForDisplay(){},onMessageLoad:function onMessageLoad(){},onMessageLoadError:function onMessageLoadError(e){},isLoadingEarlier:false,renderLoading:undefined,renderLoadEarlier:undefined,renderAvatar:undefined,showUserAvatar:false,actionSheet:undefined,onPressAvatar:undefined,onLongPressAvatar:undefined,renderUsernameOnMessage:false,renderAvatarOnTop:false,renderBubble:undefined,renderSystemMessage:undefined,onLongPress:undefined,renderMessage:undefined,renderMessageText:undefined,renderMessageImage:undefined,renderMessageSticker:undefined,renderMessageVideo:undefined,renderMessageAudio:undefined,imageProps:{},stickerProps:{},videoProps:{},audioProps:{},lightBoxProps:{},textInputProps:{},listViewProps:{},renderCustomView:undefined,isCustomViewBottom:false,renderDay:undefined,renderTime:undefined,renderFooter:undefined,renderChatEmpty:undefined,renderChatFooter:undefined,renderInputToolbar:undefined,renderComposer:undefined,renderActions:undefined,renderSend:undefined,renderAccessory:undefined,isKeyboardInternallyHandled:true,onPressActionButton:undefined,bottomOffset:undefined,minInputToolbarHeight:44,keyboardShouldPersistTaps:Platform.select({ios:'never',android:'always',default:'never'}),onInputTextChanged:undefined,maxInputLength:undefined,forceGetKeyboardHeight:false,inverted:true,extraData:undefined,minComposerHeight:MIN_COMPOSER_HEIGHT,maxComposerHeight:MAX_COMPOSER_HEIGHT,wrapInSafeArea:true,scrollToBottom:true};var makeStyles=function makeStyles(sizeLabor,themeLabor){var wp=sizeLabor.designsBasedOn.iphoneX.wp;return StyleSheet.create({container:{flex:1},safeArea:{flex:1}});};export*from\"./types\";var BunnyChat=withBunnyKit(BunnyChatInner);export{BunnyChat,Actions,ChatAvatar,Bubble,SystemMessage,MessageImage,MessageSticker,MessageText,Composer,Day,InputToolbar,LoadEarlier,Message,MessageContainer,Send,Time,BunnyAvatar,utils};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/components/BunnyChat/BunnyChat.tsx"],"names":["dayjs","BunnyChatInner","React","Component","defaultProps","messages","messagesContainerStyle","text","placeholder","disableComposer","messageIdGenerator","v4","user","onSend","locale","timeFormat","dateFormat","loadEarlier","onLoadEarlier","onMessageLoadStart","onMessageLoadEnd","onMessageReadyForDisplay","onMessageLoad","onMessageLoadError","isLoadingEarlier","renderLoading","renderLoadEarlier","renderAvatar","showUserAvatar","actionSheet","onPressAvatar","onLongPressAvatar","renderUsernameOnMessage","renderAvatarOnTop","renderBubble","renderSystemMessage","onLongPress","renderMessage","renderMessageText","renderMessageImage","renderMessageSticker","renderMessageVideo","renderMessageAudio","imageProps","stickerProps","videoProps","audioProps","lightBoxProps","textInputProps","listViewProps","renderCustomView","isCustomViewBottom","renderDay","renderTime","renderFooter","renderChatEmpty","renderChatFooter","renderInputToolbar","renderComposer","renderActions","renderSend","renderAccessory","isKeyboardInternallyHandled","onPressActionButton","bottomOffset","minInputToolbarHeight","keyboardShouldPersistTaps","ios","android","default","onInputTextChanged","maxInputLength","forceGetKeyboardHeight","inverted","extraData","minComposerHeight","maxComposerHeight","wrapInSafeArea","scrollToBottom","currentMessages","Array","_isMounted","_keyboardHeight","_bottomOffset","_maxHeight","undefined","_isFirstLayout","_locale","invertibleScrollViewProps","_actionSheetRef","_messageContainerRef","_isTextInputWasFocused","state","isInitialized","composerHeight","messagesContainerHeight","typingDisabled","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","prevProps","setTimeout","textProp","Platform","value","getBottomSpace","e","newMessagesContainerHeight","animated","offset","alignTop","activityIndicatorSize","activityIndicatorStyle","audioContainerStyle","audioStyle","avatarContainerStyle","avatarImageStyle","avatarTextStyle","activityIndicatorColor","bottomContainerStyle","bubbleContainerStyle","bubbleWrapperStyle","customTextStyle","containerToPreviousStyle","containerToNextStyle","dayWrapperStyle","dayTextStyle","dayTextProps","dayContainerStyle","forwardRef","isDebug","isTyping","infiniteScroll","imageStyle","imageContainerStyle","keepReplies","loadEarlierWrapperStyle","loadEarlierTextStyle","loadEarlierContainerStyle","linkStyle","loadEarlierLabel","nextMessage","onQuickReply","onPress","onMessageLayout","phoneNumberOptionTitles","previousMessage","parsePatterns","quickReplyStyle","quickRepliesColor","renderTicks","renderScrollToBottom","renderQuickReplySend","renderQuickReplies","sendText","stickerStyle","scrollToBottomOffset","scrollToBottomStyle","shouldUpdateMessage","showAvatarForEveryMessage","stickerContainerStyle","systemMessageContainerStyle","systemMessageWrapperStyle","systemTextStyle","textStyle","textLongPressOptionTitles","timeContainerStyle","textContainerStyle","textProps","tickStyle","timeTextStyle","touchableProps","usernameStyle","videoContainerStyle","videoStyle","audioProgressStyle","audioPlayButtonStyle","audioProgressColor","audioRemainTimeStyle","audioPlayButtonIconStyle","messageContainerProps","fragment","height","shouldResetInputToolbar","newMessages","createdAt","_id","newComposerHeight","wp","Math","size","layout","initialText","actionsConfig","alwaysShowSend","onInputSizeChanged","onTextChanged","inputToolbarProps","ref","maxLength","sizeLabor","themeLabor","styles","makeStyles","Wrapper","safeArea","onMainViewLayout","onInitialLayoutViewLayout","container","flex","BunnyChat","withBunnyKit"],"mappings":"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","sourcesContent":["import React, {RefObject} from 'react';\nimport {\n    Animated,\n    FlatList,\n    KeyboardAvoidingView,\n    Platform,\n    SafeAreaView,\n    StyleProp,\n    StyleSheet,\n    View,\n    ViewStyle,\n} from 'react-native';\nimport {ActionSheetOptions, ActionSheetProvider,} from '../../../packages/react-native-action-sheet/src';\nimport {v4} from 'uuid';\nimport {getBottomSpace} from 'react-native-iphone-x-helper';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\n\nimport * as utils from './utils';\nimport Actions from './Actions';\nimport ChatAvatar from './ChatAvatar';\nimport Bubble from './Bubble';\nimport SystemMessage from './SystemMessage';\nimport MessageImage from './MessageImage';\nimport MessageSticker from './MessageSticker';\nimport MessageText from './MessageText';\nimport Composer from './Composer';\nimport Day from './Day';\nimport InputToolbar, {InputToolbarProps} from './InputToolbar';\nimport LoadEarlier from './LoadEarlier';\nimport Message from './Message';\nimport MessageContainer, {MessageContainerProps} from './MessageContainer';\nimport Send from './Send';\nimport Time from './Time';\nimport BunnyAvatar from './BunnyAvatar';\n\nimport {DATE_FORMAT, DEFAULT_PLACEHOLDER, MAX_COMPOSER_HEIGHT, MIN_COMPOSER_HEIGHT, TIME_FORMAT,} from './Constant';\nimport {IMessage,} from './types';\nimport {WithBunnyKit, withBunnyKit} from '../../hooks/bunny-kit';\nimport {SizeLabor, ThemeLabor} from '../../types';\n\ndayjs.extend(localizedFormat);\n\nexport interface GiftedChatProps<TMessage extends IMessage> extends MessageContainerProps<TMessage>,\n    InputToolbarProps<TMessage> {\n    /* composer min Height */\n    minComposerHeight?: number,\n    /*Determines whether the keyboard should stay visible after a tap; see <ScrollView> docs */\n    keyboardShouldPersistTaps?: any,\n\n    /* Custom action sheet */\n    actionSheet?(): {\n        showActionSheetWithOptions: (\n            options: ActionSheetOptions,\n            callback: (i: number) => void,\n        ) => void\n    },\n\n    /* Input text; default is undefined, but if specified, it will override BunnyChat's internal state */\n    text?: string,\n    /*  Locale to localize the dates */\n    locale?: string,\n    /* Force getting keyboard height to fix some display issues */\n    forceGetKeyboardHeight?: boolean,\n    /* Minimum height of the input toolbar; default is 44 */\n    minInputToolbarHeight?: number,\n    /* Render the message avatar at the top of consecutive messages, rather than the bottom; default is false */\n    isKeyboardInternallyHandled?: boolean,\n    /*Distance of the chat from the bottom of the screen (e.g. useful if you display a tab bar) */\n    bottomOffset?: number,\n    /* Messages container style */\n    messagesContainerStyle?: StyleProp<ViewStyle>,\n\n    /* Generate an id for new messages. Defaults to UUID v4, generated by uuid */\n    messageIdGenerator?(message?: TMessage): string,\n\n    /* composer min Height */\n    maxComposerHeight?: number,\n    initialText?: string,\n\n    /* Callback when the input text changes */\n    onInputTextChanged?(text: string): void,\n\n    /*Max message composer TextInput length */\n    maxInputLength?: number,\n    /* Determine whether is wrapped in a SafeAreaView */\n    wrapInSafeArea?: boolean,\n\n    /* Custom message composer container */\n    renderInputToolbar?(props: InputToolbarProps<TMessage>): React.ReactNode,\n\n    /* Custom component to render below the MessageContainer (separate from the ListView) */\n    renderChatFooter?(): React.ReactNode,\n\n    /*  Render a loading view when initializing */\n    renderLoading?(): React.ReactNode,\n\n\n    // /* Messages to display */\n    // messages?: TMessage[]\n    // /* Typing Indicator state */\n    // isTyping?: boolean\n    // /* Messages container style */\n    // messagesContainerStyle?: StyleProp<ViewStyle>\n    // /* Input text; default is undefined, but if specified, it will override BunnyChat's internal state */\n    // text?: string\n    // /* Controls whether or not the message bubbles appear at the top of the chat */\n    // alignTop?: boolean\n    // /* Determine whether is wrapped in a SafeAreaView */\n    // wrapInSafeArea?: boolean\n    // /* enables the scrollToBottom Component */\n    // scrollToBottom?: boolean\n    // /* Scroll to bottom wrapper style */\n    // scrollToBottomStyle?: StyleProp<ViewStyle>\n    // initialText?: string\n    // /* Placeholder when text is empty; default is 'Type a message...' */\n    // placeholder?: string\n    // /* Makes the composer not editable*/\n    // disableComposer?: boolean\n    // /* User sending the messages: { _id, name, avatar } */\n    // user?: User\n    // /*  Locale to localize the dates */\n    // locale?: string\n    // /* Format to use for rendering times; default is 'LT' */\n    // timeFormat?: string\n    // /* Format to use for rendering dates; default is 'll' */\n    // dateFormat?: string\n    // /* Enables the \"Load earlier messages\" button */\n    // loadEarlier?: boolean\n    // /*Display an ActivityIndicator when loading earlier messages*/\n    // isLoadingEarlier?: boolean\n    // /* Whether to render an avatar for the current user; default is false, only show avatars for other users */\n    // showUserAvatar?: boolean\n    // /* When false, avatars will only be displayed when a consecutive message is from the same user on the same day; default is false */\n    // showAvatarForEveryMessage?: boolean\n    // /* Render the message avatar at the top of consecutive messages, rather than the bottom; default is false */\n    // isKeyboardInternallyHandled?: boolean\n    // /* Determine whether to handle keyboard awareness inside the plugin. If you have your own keyboard handling outside the plugin set this to false; default is true */\n    // renderAvatarOnTop?: boolean\n    // inverted?: boolean\n    // /* Extra props to be passed to the <Image> component created by the default renderMessageImage */\n    // imageProps?: Message<TMessage>['props']\n    // stickerProps?: Omit<ImageProps, 'source'>\n    // audioProps?: Omit<AudioPlayerProps, 'source'>\n    // videoProps?: Omit<VideoProps, 'source'>\n    // /*Extra props to be passed to the MessageImage's LightBox */\n    // lightBoxProps?: any\n    // /*Distance of the chat from the bottom of the screen (e.g. useful if you display a tab bar) */\n    // bottomOffset?: number\n    // /* Minimum height of the input toolbar; default is 44 */\n    // minInputToolbarHeight?: number\n    // /*Extra props to be passed to the messages <ListView>; some props can't be overridden, see the code in MessageContainer.render() for details */\n    // listViewProps?: any\n    // /*  Extra props to be passed to the <TextInput> */\n    // textInputProps?: any\n    // /*Determines whether the keyboard should stay visible after a tap; see <ScrollView> docs */\n    // keyboardShouldPersistTaps?: any\n    // /*Max message composer TextInput length */\n    // maxInputLength?: number\n    // /* Force getting keyboard height to fix some display issues */\n    // forceGetKeyboardHeight?: boolean\n    // /* Force send button */\n    // alwaysShowSend?: boolean\n    //\n    //\n    // imageContainerStyle?:StyleProp<ViewStyle>\n    // /* Image style */\n    // imageStyle?: StyleProp<ImageStyle>\n    // stickerContainerStyle?:StyleProp<ViewStyle>\n    // stickerStyle?: StyleProp<ImageStyle>\n    // audioContainerStyle?:StyleProp<ViewStyle>\n    // audioStyle?: StyleProp<ViewStyle>\n    // videoContainerStyle?:StyleProp<ViewStyle>\n    // videoStyle?: StyleProp<ViewStyle>\n    // textContainerStyle?: StyleProp<ViewStyle>\n    // textStyle?: StyleProp<TextStyle>\n    //\n    //\n    // isDebug?: boolean\n    // /* This can be used to pass any data which needs to be re-rendered */\n    // extraData?: any\n    // /* composer min Height */\n    // minComposerHeight?: number\n    // /* composer min Height */\n    // maxComposerHeight?: number\n    // options?: { [key: string]: any }\n    // optionTintColor?: string\n    // quickReplyStyle?: StyleProp<ViewStyle>\n    // /* optional prop used to place customView below text, image and video views; default is false */\n    // isCustomViewBottom?: boolean\n    // /* infinite scroll up when reach the top of messages container, automatically call onLoadEarlier function if exist */\n    // infiniteScroll?: boolean\n    // timeTextStyle?: LeftRightStyle<TextStyle>\n    //\n    // /* Custom action sheet */\n    // actionSheet?(): {\n    //     showActionSheetWithOptions: (\n    //         options: ActionSheetOptions,\n    //         callback: (i: number) => void,\n    //     ) => void\n    // }\n    //\n    // /* Callback when a message avatar is tapped */\n    // onPressAvatar?(user: User): void\n    //\n    // /* Callback when a message avatar is tapped */\n    // onLongPressAvatar?(user: User): void\n    //\n    // /* Generate an id for new messages. Defaults to UUID v4, generated by uuid */\n    // messageIdGenerator?(message?: TMessage): string\n    //\n    // /* Callback when sending a message */\n    // onSend?(messages: TMessage[]): void\n    //\n    // /*Callback when loading earlier messages*/\n    // onLoadEarlier?(): void\n    //\n    // onMessageLoad?(currentMessage: TMessage): void\n    //\n    // onMessageLoadStart?(currentMessage: TMessage): void\n    //\n    // onMessageLoadEnd?(currentMessage: TMessage): void\n    //\n    // onMessageReadyForDisplay?(currentMessage: TMessage): void\n    //\n    // onMessageLoadError?(e: Error, currentMessage: TMessage): void\n    //\n    // /*  Render a loading view when initializing */\n    // renderLoading?(): React.ReactNode\n    //\n    // /* Custom \"Load earlier messages\" button */\n    // renderLoadEarlier?(props: LoadEarlier['props']): React.ReactNode\n    //\n    // /* Custom message avatar; set to null to not render any avatar for the message */\n    // renderAvatar?(props: ChatAvatar<TMessage>['props']): React.ReactNode | null\n    //\n    // /* Custom message bubble */\n    // renderBubble?(props: Bubble<TMessage>['props']): React.ReactNode\n    //\n    // /*Custom system message */\n    // renderSystemMessage?(props: SystemMessage<TMessage>['props']): React.ReactNode\n    //\n    // /* Callback when a message bubble is long-pressed; default is to show an ActionSheet with \"Copy Text\" (see example using showActionSheetWithOptions()) */\n    // onLongPress?(context: any, message: any): void\n    //\n    // /* Reverses display order of messages; default is true */\n    //\n    // /*Custom message container */\n    // renderMessage?(message: Message<TMessage>['props']): React.ReactNode\n    //\n    // /* Custom message text */\n    // renderMessageText?(\n    //     messageText: MessageText<TMessage>['props'],\n    // ): React.ReactNode\n    //\n    // /* Custom message image */\n    // renderMessageImage?(props: MessageImage<TMessage>['props']): React.ReactNode\n    //\n    // /* Custom message sticker */\n    // renderMessageSticker?(props: MessageSticker<TMessage>['props']): React.ReactNode\n    //\n    // /* Custom message video */\n    // renderMessageVideo?(props: MessageVideoProps<TMessage>): React.ReactNode\n    //\n    // /* Custom message video */\n    // renderMessageAudio?(props: MessageAudioProps<TMessage>): React.ReactNode\n    //\n    // /* Custom view inside the bubble */\n    // renderCustomView?(props: Bubble<TMessage>['props']): React.ReactNode\n    //\n    // /*Custom day above a message*/\n    // renderDay?(props: Day<TMessage>['props']): React.ReactNode\n    //\n    // /* Custom time inside a message */\n    // renderTime?(props: Time<TMessage>['props']): React.ReactNode\n    //\n    // /* Custom footer component on the ListView, e.g. 'User is typing...' */\n    // renderFooter?(): React.ReactNode\n    //\n    // /* Custom component to render in the ListView when messages are empty */\n    // renderChatEmpty?(): React.ReactNode\n    //\n    // /* Custom component to render below the MessageContainer (separate from the ListView) */\n    // renderChatFooter?(): React.ReactNode\n    //\n    // /* Custom message composer container */\n    // renderInputToolbar?(props: InputToolbar['props']): React.ReactNode\n    //\n    // /*  Custom text input message composer */\n    // renderComposer?(props: Composer['props']): React.ReactNode\n    //\n    // /* Custom action button on the left of the message composer */\n    // renderActions?(props: Actions['props']): React.ReactNode\n    //\n    // /* Custom send button; you can pass children to the original Send component quite easily, for example to use a custom icon (example) */\n    // renderSend?(props: Send['props']): React.ReactNode\n    //\n    // /*Custom second line of actions below the message composer */\n    // renderAccessory?(props: InputToolbar['props']): React.ReactNode\n    //\n    // /*Callback when the Action button is pressed (if set, the default actionSheet will not be used) */\n    // onPressActionButton?(): void\n    //\n    // /* Callback when the input text changes */\n    // onInputTextChanged?(text: string): void\n    //\n    // /* Custom parse patterns for react-native-parsed-text used to linking message content (like URLs and phone numbers) */\n    // parsePatterns?(linkStyle: TextStyle): any\n    //\n    // onQuickReply?(replies: Reply[]): void\n    //\n    // renderQuickReplies?(quickReplies: QuickRepliesProps<TMessage>): React.ReactNode\n    //\n    // renderQuickReplySend?(): React.ReactNode\n    //\n    // /* Scroll to bottom custom component */\n    // renderScrollToBottom?(): React.ReactNode\n    //\n    // shouldUpdateMessage?(\n    //     props: Message<TMessage>['props'],\n    //     nextProps: Message<TMessage>['props'],\n    // ): boolean\n}\n\nexport interface GiftedChatState<TMessage extends IMessage> {\n    isInitialized: boolean;\n    composerHeight?: number;\n    messagesContainerHeight?: number | Animated.Value;\n    typingDisabled: boolean;\n    text?: string;\n    messages?: TMessage[];\n}\n\nclass BunnyChatInner<TMessage extends IMessage> extends React.Component<GiftedChatProps<TMessage> & WithBunnyKit,\n    GiftedChatState<TMessage>> {\n\n    static defaultProps = {\n        messages: [],\n        messagesContainerStyle: undefined,\n        text: undefined,\n        placeholder: DEFAULT_PLACEHOLDER,\n        disableComposer: false,\n        messageIdGenerator: () => v4(),\n        user: undefined,\n        onSend: () => {\n        },\n        locale: '',\n        timeFormat: TIME_FORMAT,\n        dateFormat: DATE_FORMAT,\n        loadEarlier: false,\n        onLoadEarlier: () => {\n        },\n        onMessageLoadStart: () => {\n        },\n        onMessageLoadEnd: () => {\n        },\n        onMessageReadyForDisplay() {\n        },\n        onMessageLoad() {\n        },\n        onMessageLoadError(e: Error) {\n        },\n        isLoadingEarlier: false,\n        renderLoading: undefined,\n        renderLoadEarlier: undefined,\n        renderAvatar: undefined,\n        showUserAvatar: false,\n        actionSheet: undefined,\n        onPressAvatar: undefined,\n        onLongPressAvatar: undefined,\n        renderUsernameOnMessage: false,\n        renderAvatarOnTop: false,\n        renderBubble: undefined,\n        renderSystemMessage: undefined,\n        onLongPress: undefined,\n        renderMessage: undefined,\n        renderMessageText: undefined,\n        renderMessageImage: undefined,\n        renderMessageSticker: undefined,\n        renderMessageVideo: undefined,\n        renderMessageAudio: undefined,\n        imageProps: {},\n        stickerProps: {},\n        videoProps: {},\n        audioProps: {},\n        lightBoxProps: {},\n        textInputProps: {},\n        listViewProps: {},\n        renderCustomView: undefined,\n        isCustomViewBottom: false,\n        renderDay: undefined,\n        renderTime: undefined,\n        renderFooter: undefined,\n        renderChatEmpty: undefined,\n        renderChatFooter: undefined,\n        renderInputToolbar: undefined,\n        renderComposer: undefined,\n        renderActions: undefined,\n        renderSend: undefined,\n        renderAccessory: undefined,\n        isKeyboardInternallyHandled: true,\n        onPressActionButton: undefined,\n        bottomOffset: undefined,\n        minInputToolbarHeight: 44,\n        keyboardShouldPersistTaps: Platform.select({\n            ios: 'never',\n            android: 'always',\n            default: 'never',\n        }),\n        onInputTextChanged: undefined,\n        maxInputLength: undefined,\n        forceGetKeyboardHeight: false,\n        inverted: true,\n        extraData: undefined,\n        minComposerHeight: MIN_COMPOSER_HEIGHT,\n        maxComposerHeight: MAX_COMPOSER_HEIGHT,\n        wrapInSafeArea: true,\n        scrollToBottom: true,\n    };\n\n\n    static append<TMessage extends IMessage>(\n        currentMessages: TMessage[] = [],\n        messages: TMessage[],\n        inverted = true,\n    ) {\n        if (!Array.isArray(messages)) {\n            messages = [messages];\n        }\n        return inverted\n            ? messages.concat(currentMessages)\n            : currentMessages.concat(messages);\n    }\n\n    static prepend<TMessage extends IMessage>(\n        currentMessages: TMessage[] = [],\n        messages: TMessage[],\n        inverted = true,\n    ) {\n        if (!Array.isArray(messages)) {\n            messages = [messages];\n        }\n        return inverted\n            ? currentMessages.concat(messages)\n            : messages.concat(currentMessages);\n    }\n\n    _isMounted: boolean = false;\n    _keyboardHeight: number = 0;\n    _bottomOffset: number = 0;\n    _maxHeight?: number = undefined;\n    _isFirstLayout: boolean = true;\n    _locale: string = 'en';\n    invertibleScrollViewProps: any = undefined;\n    _actionSheetRef: any = undefined;\n    _messageContainerRef?: RefObject<FlatList<TMessage>> = React.createRef<FlatList<TMessage>>();\n    _isTextInputWasFocused: boolean = false;\n    textInput?: any;\n\n    state = {\n        isInitialized: false, // initialization will calculate maxHeight before rendering the chat\n        composerHeight: this.props.minComposerHeight,\n        messagesContainerHeight: undefined,\n        typingDisabled: false,\n        text: undefined,\n        messages: undefined,\n    };\n\n    constructor(props: GiftedChatProps<TMessage> & WithBunnyKit) {\n        super(props);\n\n        this.invertibleScrollViewProps = {\n            inverted: this.props.inverted,\n            keyboardShouldPersistTaps: this.props.keyboardShouldPersistTaps,\n            onKeyboardWillShow: this.onKeyboardWillShow,\n            onKeyboardWillHide: this.onKeyboardWillHide,\n            onKeyboardDidShow: this.onKeyboardDidShow,\n            onKeyboardDidHide: this.onKeyboardDidHide,\n        };\n    }\n\n    componentDidMount() {\n        const {messages, text} = this.props;\n        this.setIsMounted(true);\n        // this.initLocale()\n        this.setMessages(messages || []);\n        this.setTextFromProp(text);\n    }\n\n    componentWillUnmount() {\n        this.setIsMounted(false);\n    }\n\n    componentDidUpdate(prevProps: GiftedChatProps<TMessage>) {\n        const {messages, text, inverted} = this.props;\n\n        if (this.props !== prevProps) {\n            this.setMessages(messages || []);\n        }\n\n        if (\n            inverted === false &&\n            messages &&\n            prevProps.messages &&\n            messages.length !== prevProps.messages.length\n        ) {\n            setTimeout(() => this.scrollToBottom(false), 200);\n        }\n\n        if (text !== prevProps.text) {\n            this.setTextFromProp(text);\n        }\n    }\n\n    setTextFromProp(textProp?: string) {\n        // Text prop takes precedence over state.\n        if (textProp !== undefined && textProp !== this.state.text) {\n            this.setState({text: textProp});\n        }\n    }\n\n    getTextFromProp(fallback: string) {\n        if (this.props.text === undefined) {\n            return fallback;\n        }\n        return this.props.text;\n    }\n\n    setMessages(messages: TMessage[]) {\n        this.setState({messages});\n    }\n\n    getMessages() {\n        return this.state.messages;\n    }\n\n    setMaxHeight(height: number) {\n        this._maxHeight = height;\n    }\n\n    getMaxHeight() {\n        return this._maxHeight;\n    }\n\n    setKeyboardHeight(height: number) {\n        this._keyboardHeight = height;\n    }\n\n    getKeyboardHeight() {\n        if (Platform.OS === 'android' && !this.props.forceGetKeyboardHeight) {\n            // For android: on-screen keyboard resized main container and has own height.\n            // @see https://developer.android.com/training/keyboard-input/visibility.html\n            // So for calculate the messages container height ignore keyboard height.\n            return 0;\n        }\n        return this._keyboardHeight;\n    }\n\n    setBottomOffset(value: number) {\n        this._bottomOffset = value;\n    }\n\n    getBottomOffset() {\n        return this._bottomOffset;\n    }\n\n    setIsFirstLayout(value: boolean) {\n        this._isFirstLayout = value;\n    }\n\n    getIsFirstLayout() {\n        return this._isFirstLayout;\n    }\n\n    setIsTypingDisabled(value: boolean) {\n        this.setState({\n            typingDisabled: value,\n        });\n    }\n\n    getIsTypingDisabled() {\n        return this.state.typingDisabled;\n    }\n\n    setIsMounted(value: boolean) {\n        this._isMounted = value;\n    }\n\n    getIsMounted() {\n        return this._isMounted;\n    }\n\n    getMinInputToolbarHeight() {\n        return this.props.renderAccessory\n            ? this.props.minInputToolbarHeight! * 2\n            : this.props.minInputToolbarHeight;\n    }\n\n    calculateInputToolbarHeight(composerHeight: number) {\n        return (\n            composerHeight +\n            (this.getMinInputToolbarHeight()! - this.props.minComposerHeight!)\n        );\n    }\n\n    /**\n     * Returns the height, based on current window size, without taking the keyboard into account.\n     */\n    getBasicMessagesContainerHeight(composerHeight = this.state.composerHeight) {\n        return (\n            this.getMaxHeight()! - this.calculateInputToolbarHeight(composerHeight!)\n        );\n    }\n\n    /**\n     * Returns the height, based on current window size, taking the keyboard into account.\n     */\n    getMessagesContainerHeightWithKeyboard(\n        composerHeight = this.state.composerHeight,\n    ) {\n        return (\n            this.getBasicMessagesContainerHeight(composerHeight) -\n            this.getKeyboardHeight() +\n            this.getBottomOffset()\n        );\n    }\n\n    safeAreaSupport = (bottomOffset?: number) => {\n        return bottomOffset != null ? bottomOffset : getBottomSpace();\n    };\n\n    /**\n     * Store text input focus status when keyboard hide to retrieve\n     * it after wards if needed.\n     * `onKeyboardWillHide` may be called twice in sequence so we\n     * make a guard condition (eg. showing image picker)\n     */\n    handleTextInputFocusWhenKeyboardHide() {\n        if (!this._isTextInputWasFocused) {\n            this._isTextInputWasFocused = this.textInput?.isFocused() || false;\n        }\n    }\n\n    /**\n     * Refocus the text input only if it was focused before showing keyboard.\n     * This is needed in some cases (eg. showing image picker).\n     */\n    handleTextInputFocusWhenKeyboardShow() {\n        if (\n            this.textInput &&\n            this._isTextInputWasFocused &&\n            !this.textInput.isFocused()\n        ) {\n            this.textInput.focus();\n        }\n\n        // Reset the indicator since the keyboard is shown\n        this._isTextInputWasFocused = false;\n    }\n\n    onKeyboardWillShow = (e: any) => {\n        this.handleTextInputFocusWhenKeyboardShow();\n\n        if (this.props.isKeyboardInternallyHandled) {\n            this.setIsTypingDisabled(true);\n            this.setKeyboardHeight(\n                e.endCoordinates ? e.endCoordinates.height : e.end.height,\n            );\n            this.setBottomOffset(this.safeAreaSupport(this.props.bottomOffset));\n            const newMessagesContainerHeight = this.getMessagesContainerHeightWithKeyboard();\n            this.setState({\n                messagesContainerHeight: newMessagesContainerHeight,\n            });\n        }\n    };\n\n    onKeyboardWillHide = (_e: any) => {\n        this.handleTextInputFocusWhenKeyboardHide();\n\n        if (this.props.isKeyboardInternallyHandled) {\n            this.setIsTypingDisabled(true);\n            this.setKeyboardHeight(0);\n            this.setBottomOffset(0);\n            const newMessagesContainerHeight = this.getBasicMessagesContainerHeight();\n            this.setState({\n                messagesContainerHeight: newMessagesContainerHeight,\n            });\n        }\n    };\n\n    onKeyboardDidShow = (e: any) => {\n        if (Platform.OS === 'android') {\n            this.onKeyboardWillShow(e);\n        }\n        this.setIsTypingDisabled(false);\n    };\n\n    onKeyboardDidHide = (e: any) => {\n        if (Platform.OS === 'android') {\n            this.onKeyboardWillHide(e);\n        }\n        this.setIsTypingDisabled(false);\n    };\n\n    scrollToBottom(animated = true) {\n        if (this._messageContainerRef && this._messageContainerRef.current) {\n            const {inverted} = this.props;\n            if (!inverted) {\n                this._messageContainerRef.current.scrollToEnd({animated});\n            } else {\n                this._messageContainerRef.current.scrollToOffset({\n                    offset: 0,\n                    animated,\n                });\n            }\n        }\n    }\n\n    renderMessages() {\n        const {\n            audioProps,\n            alignTop,\n            activityIndicatorSize,\n            activityIndicatorStyle,\n            audioContainerStyle,\n            audioStyle,\n            avatarContainerStyle,\n            avatarImageStyle,\n            avatarTextStyle,\n            activityIndicatorColor,\n            bottomContainerStyle,\n            bubbleContainerStyle,\n            bubbleWrapperStyle,\n            customTextStyle,\n            containerToPreviousStyle,\n            containerToNextStyle,\n            dayWrapperStyle,\n            dayTextStyle,\n            dayTextProps,\n            dayContainerStyle,\n            dateFormat,\n            extraData,\n            forwardRef,\n            renderFooter,\n            isDebug,\n            isTyping,\n            isLoadingEarlier,\n            isCustomViewBottom,\n            invertibleScrollViewProps,\n            inverted,\n            infiniteScroll,\n            imageStyle,\n            imageProps,\n            imageContainerStyle,\n            keepReplies,\n            loadEarlierWrapperStyle,\n            loadEarlierTextStyle,\n            loadEarlierContainerStyle,\n            loadEarlier,\n            listViewProps,\n            linkStyle,\n            lightBoxProps,\n            loadEarlierLabel,\n            messages,\n            messagesContainerStyle,\n            nextMessage,\n            onMessageReadyForDisplay,\n            onQuickReply,\n            onPressAvatar,\n            onPress,\n            onMessageLayout,\n            onLongPressAvatar,\n            onLongPress,\n            onLoadEarlier,\n            onMessageLoad,\n            onMessageLoadError,\n            onMessageLoadStart,\n            onMessageLoadEnd,\n            phoneNumberOptionTitles,\n            previousMessage,\n            parsePatterns,\n            quickReplyStyle,\n            quickRepliesColor,\n            renderTicks,\n            renderSystemMessage,\n            renderScrollToBottom,\n            renderQuickReplySend,\n            renderQuickReplies,\n            renderMessageVideo,\n            renderMessageText,\n            renderMessageSticker,\n            renderMessageImage,\n            renderMessageAudio,\n            renderMessage,\n            renderLoadEarlier,\n            renderDay,\n            renderCustomView,\n            renderChatEmpty,\n            renderBubble,\n            renderAvatarOnTop,\n            renderAvatar,\n            renderTime,\n            renderUsernameOnMessage,\n            sendText,\n            stickerStyle,\n            stickerProps,\n            scrollToBottom,\n            scrollToBottomOffset,\n            scrollToBottomStyle,\n            shouldUpdateMessage,\n            showAvatarForEveryMessage,\n            showUserAvatar,\n            stickerContainerStyle,\n            systemMessageContainerStyle,\n            systemMessageWrapperStyle,\n            systemTextStyle,\n            textStyle,\n            textLongPressOptionTitles,\n            timeContainerStyle,\n            textContainerStyle,\n            textProps,\n            tickStyle,\n            timeFormat,\n            timeTextStyle,\n            touchableProps,\n            user,\n            usernameStyle,\n            videoContainerStyle,\n            videoProps,\n            videoStyle,\n            audioProgressStyle,\n            audioPlayButtonStyle,\n            audioProgressColor,\n            audioRemainTimeStyle,\n            audioPlayButtonIconStyle,\n        } = this.props;\n\n        const messageContainerProps = {\n            audioProps,\n            alignTop,\n            activityIndicatorSize,\n            activityIndicatorStyle,\n            audioContainerStyle,\n            audioStyle,\n            avatarContainerStyle,\n            avatarImageStyle,\n            avatarTextStyle,\n            activityIndicatorColor,\n            bottomContainerStyle,\n            bubbleContainerStyle,\n            bubbleWrapperStyle,\n            customTextStyle,\n            containerToPreviousStyle,\n            containerToNextStyle,\n            dayWrapperStyle,\n            dayTextStyle,\n            dayTextProps,\n            dayContainerStyle,\n            dateFormat,\n            extraData,\n            forwardRef,\n            renderFooter,\n            isDebug,\n            isTyping,\n            isLoadingEarlier,\n            isCustomViewBottom,\n            invertibleScrollViewProps,\n            inverted,\n            infiniteScroll,\n            imageStyle,\n            imageProps,\n            imageContainerStyle,\n            keepReplies,\n            loadEarlierWrapperStyle,\n            loadEarlierTextStyle,\n            loadEarlierContainerStyle,\n            loadEarlier,\n            listViewProps,\n            linkStyle,\n            lightBoxProps,\n            loadEarlierLabel,\n            messages,\n            nextMessage,\n            onMessageReadyForDisplay,\n            onQuickReply,\n            onPressAvatar,\n            onPress,\n            onMessageLayout,\n            onLongPressAvatar,\n            onLongPress,\n            onLoadEarlier,\n            onMessageLoad,\n            onMessageLoadError,\n            onMessageLoadStart,\n            onMessageLoadEnd,\n            phoneNumberOptionTitles,\n            previousMessage,\n            parsePatterns,\n            quickReplyStyle,\n            quickRepliesColor,\n            renderTicks,\n            renderSystemMessage,\n            renderScrollToBottom,\n            renderQuickReplySend,\n            renderQuickReplies,\n            renderMessageVideo,\n            renderMessageText,\n            renderMessageSticker,\n            renderMessageImage,\n            renderMessageAudio,\n            renderMessage,\n            renderLoadEarlier,\n            renderDay,\n            renderCustomView,\n            renderChatEmpty,\n            renderBubble,\n            renderAvatarOnTop,\n            renderAvatar,\n            renderTime,\n            renderUsernameOnMessage,\n            sendText,\n            stickerStyle,\n            stickerProps,\n            scrollToBottom,\n            scrollToBottomOffset,\n            scrollToBottomStyle,\n            shouldUpdateMessage,\n            showAvatarForEveryMessage,\n            showUserAvatar,\n            stickerContainerStyle,\n            systemMessageContainerStyle,\n            systemMessageWrapperStyle,\n            systemTextStyle,\n            textStyle,\n            textLongPressOptionTitles,\n            timeContainerStyle,\n            textContainerStyle,\n            textProps,\n            tickStyle,\n            timeFormat,\n            timeTextStyle,\n            touchableProps,\n            user,\n            usernameStyle,\n            videoContainerStyle,\n            videoProps,\n            videoStyle,\n            audioProgressStyle,\n            audioPlayButtonStyle,\n            audioProgressColor,\n            audioRemainTimeStyle,\n            audioPlayButtonIconStyle,\n        };\n        const fragment = (\n            <View\n                style={[\n                    {\n                        height: this.state.messagesContainerHeight,\n                    },\n                    messagesContainerStyle,\n                ]}\n            >\n                <MessageContainer<TMessage>\n                    {...messageContainerProps}\n                    invertibleScrollViewProps={this.invertibleScrollViewProps}\n                    messages={this.getMessages()}\n                    // TODO type check error\n                    // @ts-ignore\n                    forwardRef={this._messageContainerRef}\n                    isTyping={this.props.isTyping}\n                />\n                {this.renderChatFooter()}\n            </View>\n        );\n\n        return this.props.isKeyboardInternallyHandled ? (\n            <KeyboardAvoidingView enabled>{fragment}</KeyboardAvoidingView>\n        ) : (\n            fragment\n        );\n    }\n\n    onSend = (messages: TMessage[] | TMessage = [], shouldResetInputToolbar = false) => {\n        if (!Array.isArray(messages)) {\n            messages = [messages];\n        }\n        const newMessages: TMessage[] = messages.map(message => {\n            return {\n                ...message,\n                user: this.props.user!,\n                createdAt: new Date(),\n                _id: this.props.messageIdGenerator && this.props.messageIdGenerator(),\n            };\n        });\n\n        if (shouldResetInputToolbar) {\n            this.setIsTypingDisabled(true);\n            this.resetInputToolbar();\n        }\n        if (this.props.onSend) {\n            this.props.onSend(newMessages, shouldResetInputToolbar);\n        }\n\n        if (shouldResetInputToolbar) {\n            setTimeout(() => {\n                if (this.getIsMounted()) {\n                    this.setIsTypingDisabled(false);\n                }\n            }, 100);\n        }\n    };\n\n    resetInputToolbar() {\n        if (this.textInput) {\n            this.textInput.clear();\n        }\n        this.notifyInputTextReset();\n        const newComposerHeight = this.props.minComposerHeight;\n        const newMessagesContainerHeight = this.getMessagesContainerHeightWithKeyboard(\n            newComposerHeight,\n        );\n        this.setState({\n            text: this.getTextFromProp(''),\n            composerHeight: newComposerHeight,\n            messagesContainerHeight: newMessagesContainerHeight,\n        });\n    }\n\n    focusTextInput() {\n        if (this.textInput) {\n            this.textInput.focus();\n        }\n    }\n\n    onInputSizeChanged = (size: { height: number }) => {\n        const {bunnyKit: {wp}} = this.props;\n        const newComposerHeight = Math.max(\n            this.props.minComposerHeight!,\n            Math.min(this.props.maxComposerHeight!, size.height),\n        );\n        const newMessagesContainerHeight = this.getMessagesContainerHeightWithKeyboard(\n            newComposerHeight,\n        );\n        this.setState({\n            composerHeight: newComposerHeight,\n            messagesContainerHeight: newMessagesContainerHeight,\n        });\n    };\n\n    onInputTextChanged = (text: string) => {\n        // TODO consider to move this to Composer\n        if (this.getIsTypingDisabled()) {\n            return;\n        }\n        if (this.props.onInputTextChanged) {\n            this.props.onInputTextChanged(text);\n        }\n        // Only set state if it's not being overridden by a prop.\n        if (this.props.text === undefined) {\n            this.setState({text});\n        }\n    };\n\n    notifyInputTextReset() {\n        if (this.props.onInputTextChanged) {\n            this.props.onInputTextChanged('');\n        }\n    }\n\n    onInitialLayoutViewLayout = (e: any) => {\n        const {layout} = e.nativeEvent;\n        if (layout.height <= 0) {\n            return;\n        }\n        this.notifyInputTextReset();\n        this.setMaxHeight(layout.height);\n        const newComposerHeight = this.props.minComposerHeight;\n        const newMessagesContainerHeight = this.getMessagesContainerHeightWithKeyboard(\n            newComposerHeight,\n        );\n        const initialText = this.props.initialText || '';\n        this.setState({\n            isInitialized: true,\n            text: this.getTextFromProp(initialText),\n            composerHeight: newComposerHeight,\n            messagesContainerHeight: newMessagesContainerHeight,\n        });\n    };\n\n    onMainViewLayout = (e: any) => {\n        // fix an issue when keyboard is dismissing during the initialization\n        const {layout} = e.nativeEvent;\n        if (\n            this.getMaxHeight() !== layout.height ||\n            this.getIsFirstLayout() === true\n        ) {\n            this.setMaxHeight(layout.height);\n            this.setState({\n                messagesContainerHeight:\n                    this._keyboardHeight > 0\n                        ? this.getMessagesContainerHeightWithKeyboard()\n                        : this.getBasicMessagesContainerHeight(),\n            });\n        }\n        if (this.getIsFirstLayout() === true) {\n            this.setIsFirstLayout(false);\n        }\n    };\n\n    renderInputToolbar() {\n\n        const {\n            actionsConfig,\n            actionSheet,\n            alwaysShowSend,\n            audioProps,\n            bottomOffset,\n            composerHeight,\n            dateFormat,\n            disableComposer,\n            extraData,\n            forceGetKeyboardHeight,\n            imageProps,\n            inverted,\n            isCustomViewBottom,\n            isKeyboardInternallyHandled,\n            isLoadingEarlier,\n            keyboardShouldPersistTaps,\n            lightBoxProps,\n            listViewProps,\n            loadEarlier,\n            locale,\n            maxComposerHeight,\n            maxInputLength,\n            messageIdGenerator,\n            messages,\n            messagesContainerStyle,\n            minComposerHeight,\n            minInputToolbarHeight,\n            onInputSizeChanged,\n            onInputTextChanged,\n            onLoadEarlier,\n            onLongPress,\n            onLongPressAvatar,\n            onMessageLoad,\n            onMessageLoadEnd,\n            onMessageLoadError,\n            onMessageLoadStart,\n            onMessageReadyForDisplay,\n            onPressActionButton,\n            onPressAvatar,\n            onSend,\n            onTextChanged,\n            placeholder,\n            renderAccessory,\n            renderActions,\n            renderAvatar,\n            renderAvatarOnTop,\n            renderBubble,\n            renderChatEmpty,\n            renderChatFooter,\n            renderComposer,\n            renderCustomView,\n            renderDay,\n            renderFooter,\n            renderInputToolbar,\n            renderLoadEarlier,\n            renderLoading,\n            renderMessage,\n            renderMessageAudio,\n            renderMessageImage,\n            renderMessageSticker,\n            renderMessageText,\n            renderMessageVideo,\n            renderSend,\n            renderSystemMessage,\n            renderTime,\n            renderUsernameOnMessage,\n            showUserAvatar,\n            stickerProps,\n            text,\n            textInputProps,\n            timeFormat,\n            user,\n            videoProps,\n            wrapInSafeArea\n        } = this.props;\n        const inputToolbarProps = {\n            actionsConfig,\n            actionSheet,\n            alwaysShowSend,\n            audioProps,\n            bottomOffset,\n            dateFormat,\n            disableComposer,\n            extraData,\n            forceGetKeyboardHeight,\n            imageProps,\n            inverted,\n            isCustomViewBottom,\n            isKeyboardInternallyHandled,\n            isLoadingEarlier,\n            keyboardShouldPersistTaps,\n            lightBoxProps,\n            listViewProps,\n            loadEarlier,\n            locale,\n            maxComposerHeight,\n            maxInputLength,\n            messageIdGenerator,\n            messages,\n            messagesContainerStyle,\n            minComposerHeight,\n            minInputToolbarHeight,\n            onInputTextChanged,\n            onLoadEarlier,\n            onLongPress,\n            onLongPressAvatar,\n            onMessageLoad,\n            onMessageLoadEnd,\n            onMessageLoadError,\n            onMessageLoadStart,\n            onMessageReadyForDisplay,\n            onPressActionButton,\n            onPressAvatar,\n            placeholder,\n            renderAccessory,\n            renderActions,\n            renderAvatar,\n            renderAvatarOnTop,\n            renderBubble,\n            renderChatEmpty,\n            renderChatFooter,\n            renderComposer,\n            renderCustomView,\n            renderDay,\n            renderFooter,\n            renderLoadEarlier,\n            renderLoading,\n            renderMessage,\n            renderMessageAudio,\n            renderMessageImage,\n            renderMessageSticker,\n            renderMessageText,\n            renderMessageVideo,\n            renderSend,\n            renderSystemMessage,\n            renderTime,\n            renderUsernameOnMessage,\n            showUserAvatar,\n            stickerProps,\n            timeFormat,\n            user,\n            videoProps,\n            wrapInSafeArea,\n            text: this.getTextFromProp(this.state.text!),\n            composerHeight: Math.max(\n                this.props.minComposerHeight!,\n                this.state.composerHeight!,\n            ),\n            onSend: this.onSend,\n            onInputSizeChanged: this.onInputSizeChanged,\n            onTextChanged: this.onInputTextChanged,\n            textInputProps: {\n                ...textInputProps,\n                ref: (textInput: any) => (this.textInput = textInput),\n                maxLength: this.getIsTypingDisabled() ? 0 : this.props.maxInputLength,\n            },\n        };\n        if (this.props.renderInputToolbar) {\n            return this.props.renderInputToolbar(inputToolbarProps);\n        }\n        // TODO type check error\n        // @ts-ignore\n        return <InputToolbar<TMessage> {...inputToolbarProps} />;\n        // return <InputToolbar {...inputToolbarProps} />\n    }\n\n    renderChatFooter() {\n        if (this.props.renderChatFooter) {\n            return this.props.renderChatFooter();\n        }\n        return null;\n    }\n\n    renderLoading() {\n        if (this.props.renderLoading) {\n            return this.props.renderLoading();\n        }\n        return null;\n    }\n\n    render() {\n        const {bunnyKit: {sizeLabor, themeLabor}} = this.props;\n        const styles = makeStyles(sizeLabor, themeLabor);\n        if (this.state.isInitialized === true) {\n            const {wrapInSafeArea} = this.props;\n            const Wrapper = wrapInSafeArea ? SafeAreaView : View;\n\n            return (\n                <Wrapper style={styles.safeArea}>\n                    <ActionSheetProvider\n                        ref={(component: any) => (this._actionSheetRef = component)}\n                    >\n                        <View style={styles.container} onLayout={this.onMainViewLayout}>\n                            {this.renderMessages()}\n                            {this.renderInputToolbar()}\n                        </View>\n                    </ActionSheetProvider>\n                </Wrapper>\n            );\n        }\n        return (\n            <View style={styles.container} onLayout={this.onInitialLayoutViewLayout}>\n                {this.renderLoading()}\n            </View>\n        );\n    }\n}\n\n\nconst makeStyles = (sizeLabor: SizeLabor, themeLabor: ThemeLabor) => {\n    const {wp} = sizeLabor.designsBasedOn.iphoneX;\n    return StyleSheet.create({\n        container: {\n            flex: 1,\n        },\n        safeArea: {\n            flex: 1,\n        },\n    });\n};\n\nexport * from './types';\nconst BunnyChat = withBunnyKit(BunnyChatInner);\nexport {\n    BunnyChat,\n    Actions,\n    ChatAvatar,\n    Bubble,\n    SystemMessage,\n    MessageImage,\n    MessageSticker,\n    MessageText,\n    Composer,\n    Day,\n    InputToolbar,\n    LoadEarlier,\n    Message,\n    MessageContainer,\n    Send,\n    Time,\n    BunnyAvatar,\n    utils,\n};\n"]},"metadata":{},"sourceType":"module"}