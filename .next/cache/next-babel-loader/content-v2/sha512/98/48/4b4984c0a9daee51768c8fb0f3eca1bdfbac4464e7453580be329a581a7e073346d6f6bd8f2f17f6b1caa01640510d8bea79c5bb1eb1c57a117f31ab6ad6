{"ast":null,"code":"var _this=this,_jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/containers/Row/Row.tsx\";import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{useSizeLabor}from\"../../providers/size-labor\";import{useThemeLabor}from\"../../providers/theme-labor\";import{makeStyles}from\"./styles\";export var Row=function Row(props){var children=props.children,size=props.size,paddingVertical=props.paddingVertical,style=props.style,_props$align=props.align,align=_props$align===void 0?'flex-start':_props$align;var sizeLabor=useSizeLabor();var themeLabor=useThemeLabor();var wp=sizeLabor.designsBasedOn.iphoneX.wp;var styles=makeStyles(sizeLabor,themeLabor);var rowPaddingVertical={xxs:wp(2),xs:wp(4),s:wp(6),m:wp(8),l:wp(10),xl:wp(12),xxl:wp(16)};var styleOBJ=StyleSheet.flatten(style);var isPaddingTop=styleOBJ?styleOBJ.padding||styleOBJ.paddingVertical||styleOBJ.paddingTop:0;var isPaddingBottom=styleOBJ?styleOBJ.padding||styleOBJ.paddingVertical||styleOBJ.paddingBottom:0;var paddingVerticalValue=paddingVertical?rowPaddingVertical[paddingVertical]:0;var mergeStyle=[{flexDirection:'row',flex:size,alignSelf:'stretch',justifyContent:align,alignItems:'center',paddingTop:isPaddingTop||paddingVerticalValue,paddingBottom:isPaddingBottom||paddingVerticalValue},style];return React.createElement(View,{style:mergeStyle,__self:_this,__source:{fileName:_jsxFileName,lineNumber:73,columnNumber:12}},children?children:null);};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/containers/Row/Row.tsx"],"names":["Row","children","size","paddingVertical","style","align","props","sizeLabor","useSizeLabor","themeLabor","useThemeLabor","wp","styles","makeStyles","rowPaddingVertical","xxs","xs","s","m","l","xl","xxl","styleOBJ","StyleSheet","isPaddingTop","isPaddingBottom","paddingVerticalValue","mergeStyle","flexDirection","flex","alignSelf","justifyContent","alignItems","paddingTop","paddingBottom"],"mappings":"iGAAA,MAAA,CAAA,KAAA,KAAA,OAAA,C,sHAGA,OAAA,YAAA,kCACA,OAAA,aAAA,mCACA,OAAA,UAAA,gBAcA,MAAO,IAAMA,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAAA,KAAA,CAAqB,CACpC,GAAOC,CAAAA,QAAP,CAAuEK,KAAvE,CAAA,QAAA,CAAiBJ,IAAjB,CAAuEI,KAAvE,CAAA,IAAA,CAAuBH,eAAvB,CAAuEG,KAAvE,CAAA,eAAA,CAAwCF,KAAxC,CAAuEE,KAAvE,CAAA,KAAA,CAAA,YAAA,CAAuEA,KAAvE,CAAA,KAAA,CAA+CD,KAA/C,CAAA,YAAA,GAAA,IAAA,EAAA,CAAA,YAAA,CAAA,YAAA,CACA,GAAME,CAAAA,SAAS,CAAGC,YAAlB,EAAA,CACA,GAAMC,CAAAA,UAAU,CAAGC,aAAnB,EAAA,CACA,GAAOC,CAAAA,EAAP,CAAaJ,SAAS,CAATA,cAAAA,CAAb,OAAaA,CAAb,EAAA,CACA,GAAMK,CAAAA,MAAM,CAAGC,UAAU,CAAA,SAAA,CAAzB,UAAyB,CAAzB,CACA,GAAMC,CAAAA,kBAA8B,CAAG,CACnCC,GAAG,CAAEJ,EAAE,CAD4B,CAC5B,CAD4B,CAEnCK,EAAE,CAAEL,EAAE,CAF6B,CAE7B,CAF6B,CAGnCM,CAAC,CAAEN,EAAE,CAH8B,CAG9B,CAH8B,CAInCO,CAAC,CAAEP,EAAE,CAJ8B,CAI9B,CAJ8B,CAKnCQ,CAAC,CAAER,EAAE,CAL8B,EAK9B,CAL8B,CAMnCS,EAAE,CAAET,EAAE,CAN6B,EAM7B,CAN6B,CAOnCU,GAAG,CAAEV,EAAE,CAAA,EAAA,CAP4B,CAAvC,CAUA,GAAMW,CAAAA,QAAQ,CAAGC,UAAU,CAAVA,OAAAA,CAAjB,KAAiBA,CAAjB,CAqBA,GAAMC,CAAAA,YAAY,CAAGF,QAAQ,CAAIA,QAAQ,CAARA,OAAAA,EAAoBA,QAAQ,CAA5BA,eAAAA,EAAgDA,QAAQ,CAA5D,UAAA,CAA7B,CAAA,CACA,GAAMG,CAAAA,eAAe,CAAGH,QAAQ,CAAIA,QAAQ,CAARA,OAAAA,EAAoBA,QAAQ,CAA5BA,eAAAA,EAAgDA,QAAQ,CAA5D,aAAA,CAAhC,CAAA,CACA,GAAMI,CAAAA,oBAAoB,CAAGvB,eAAe,CAAGW,kBAAkB,CAArB,eAAqB,CAArB,CAA5C,CAAA,CACA,GAAMa,CAAAA,UAAgC,CAAG,CACrC,CACIC,aAAa,CADjB,KAAA,CAEIC,IAAI,CAFR,IAAA,CAGIC,SAAS,CAHb,SAAA,CAIIC,cAAc,CAJlB,KAAA,CAKIC,UAAU,CALd,QAAA,CAOIC,UAAU,CAAET,YAAY,EAP5B,oBAAA,CAQIU,aAAa,CAAET,eAAe,EAAIC,oBARtC,CADqC,CAAzC,KAAyC,CAAzC,CAaA,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAX,UAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CACFzB,QAAQ,CAAA,QAAA,CADb,IAAO,CAAP,CArDG,CAAA","sourcesContent":["import React from 'react';\nimport {FlexStyle, StyleProp, StyleSheet, View, ViewStyle} from 'react-native';\nimport {SizeKeys} from '../../types';\nimport {useSizeLabor} from '../../providers/size-labor';\nimport {useThemeLabor} from '../../providers/theme-labor';\nimport {makeStyles} from './styles';\n\nexport interface RowProps {\n    children?: React.ReactNode,\n    size?: number,\n    align?: FlexStyle['justifyContent'];\n    paddingVertical?: SizeKeys,\n    style?: StyleProp<ViewStyle>\n}\n\nexport type RowSizeMap = {\n    [key in SizeKeys]: number\n}\n\nexport const Row = (props: RowProps) => {\n    const {children, size, paddingVertical, style, align = 'flex-start'} = props;\n    const sizeLabor = useSizeLabor();\n    const themeLabor = useThemeLabor();\n    const {wp} = sizeLabor.designsBasedOn.iphoneX;\n    const styles = makeStyles(sizeLabor, themeLabor);\n    const rowPaddingVertical: RowSizeMap = {\n        xxs: wp(2),\n        xs: wp(4),\n        s: wp(6),\n        m: wp(8),\n        l: wp(10),\n        xl: wp(12),\n        xxl: wp(16)\n    };\n\n    const styleOBJ = StyleSheet.flatten<ViewStyle>(style);\n\n    // let flexGrow: FlexStyle['flexGrow'] = size;\n    // let flexShrink: FlexStyle['flexShrink'] = size;\n    // let flexBasis: FlexStyle['flexBasis'] = Platform.select<FlexStyle['flexBasis']>({\n    //     web:'auto',\n    //     ios:'auto',\n    //     android:'auto'\n    // });\n    //\n    // // Let the width take precedence over the flex layout\n    // if (styleOBJ && styleOBJ.height) {\n    //     flexBasis = 'auto'\n    //     flexGrow = 0\n    //     flexShrink = 0\n    // }\n    //\n    // flexGrow: flexGrow,\n    //     flexShrink: flexShrink,\n    //     flexBasis: flexBasis,\n\n    const isPaddingTop = styleOBJ ? (styleOBJ.padding || styleOBJ.paddingVertical || styleOBJ.paddingTop) : 0;\n    const isPaddingBottom = styleOBJ ? (styleOBJ.padding || styleOBJ.paddingVertical || styleOBJ.paddingBottom) : 0;\n    const paddingVerticalValue = paddingVertical ? rowPaddingVertical[paddingVertical] : 0;\n    const mergeStyle: StyleProp<ViewStyle> = [\n        {\n            flexDirection: 'row',\n            flex: size,\n            alignSelf: 'stretch',\n            justifyContent: align,\n            alignItems: 'center',\n            // width:'100%',\n            paddingTop: isPaddingTop || paddingVerticalValue,\n            paddingBottom: isPaddingBottom || paddingVerticalValue,\n        },\n        style\n    ];\n    return <View style={mergeStyle}>\n        {children ? children : null}\n    </View>;\n};\n"]},"metadata":{},"sourceType":"module"}