{"ast":null,"code":"\"use strict\";exports.__esModule=true;exports.default=void 0;var _webVitals=require(\"next/dist/compiled/web-vitals\");var initialHref=location.href;var isRegistered=false;var userReportHandler;function onReport(metric){if(userReportHandler){userReportHandler(metric);}if(false&&process.env.__NEXT_ANALYTICS_ID){var body={dsn:process.env.__NEXT_ANALYTICS_ID,id:metric.id,page:window.__NEXT_DATA__.page,href:initialHref,event_name:metric.name,value:metric.value.toString(),speed:'connection'in navigator&&navigator['connection']&&'effectiveType'in navigator['connection']?navigator['connection']['effectiveType']:''};var blob=new Blob([new URLSearchParams(body).toString()],{type:'application/x-www-form-urlencoded'});var vitalsUrl='https://vitals.vercel-insights.com/v1/vitals';navigator.sendBeacon&&navigator.sendBeacon(vitalsUrl,blob)||fetch(vitalsUrl,{body:blob,method:'POST',credentials:'omit',keepalive:true});}}var _default=function _default(onPerfEntry){userReportHandler=onPerfEntry;if(isRegistered){return;}isRegistered=true;(0,_webVitals.getCLS)(onReport);(0,_webVitals.getFID)(onReport);(0,_webVitals.getFCP)(onReport);(0,_webVitals.getLCP)(onReport);(0,_webVitals.getTTFB)(onReport);};exports.default=_default;","map":{"version":3,"sources":["../../client/performance-relayer.ts"],"names":["initialHref","location","isRegistered","userReportHandler","process","body","dsn","id","metric","page","window","href","event_name","value","speed","navigator","blob","type","vitalsUrl","fetch","method","credentials","keepalive","onPerfEntry"],"mappings":"4DAAA,GAAA,CAAA,UAAA,CAAA,OAAA,CAAA,+BAAA,CAAA,CAUA,GAAMA,CAAAA,WAAW,CAAGC,QAAQ,CAA5B,IAAA,CACA,GAAIC,CAAAA,YAAY,CAAhB,KAAA,CACA,GAAA,CAAA,iBAAA,CAEA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAwC,CACtC,GAAA,iBAAA,CAAuB,CACrBC,iBAAiB,CAAjBA,MAAiB,CAAjBA,CAGF,CAKA,GACEC,OAEAA,OAAO,CAAPA,GAAAA,CAHF,mBAAA,CAIE,CACA,GAAMC,CAAAA,IAA4B,CAAG,CACnCC,GAAG,CAAEF,OAAO,CAAPA,GAAAA,CAD8B,mBAAA,CAEnCG,EAAE,CAAEC,MAAM,CAFyB,EAAA,CAGnCC,IAAI,CAAEC,MAAM,CAANA,aAAAA,CAH6B,IAAA,CAInCC,IAAI,CAJ+B,WAAA,CAKnCC,UAAU,CAAEJ,MAAM,CALiB,IAAA,CAMnCK,KAAK,CAAEL,MAAM,CAANA,KAAAA,CAN4B,QAM5BA,EAN4B,CAOnCM,KAAK,CACH,cAAA,CAAA,SAAA,EACAC,SAAS,CADT,YACS,CADT,EAEA,iBAAmBA,CAAAA,SAAS,CAF5B,YAE4B,CAF5B,CAGKA,SAAS,CAATA,YAAS,CAATA,CAHL,eAGKA,CAHL,CARJ,EAAqC,CAArC,CAeA,GAAMC,CAAAA,IAAI,CAAG,GAAA,CAAA,IAAA,CAAS,CAAC,GAAA,CAAA,eAAA,CAAA,IAAA,EAAV,QAAU,EAAD,CAAT,CAAiD,CAE5DC,IAAI,CAFN,mCAA8D,CAAjD,CAAb,CAIA,GAAMC,CAAAA,SAAS,CAAf,8CAAA,CACEH,SAAS,CAATA,UAAAA,EAAwBA,SAAS,CAATA,UAAAA,CAAAA,SAAAA,CAAzB,IAAyBA,CAAxBA,EACAI,KAAK,CAAA,SAAA,CAAY,CACfd,IAAI,CADW,IAAA,CAEfe,MAAM,CAFS,MAAA,CAGfC,WAAW,CAHI,MAAA,CAIfC,SAAS,CALZ,IACkB,CAAZ,CADLP,CAQL,C,cAEeQ,Q,SAAAA,CAAAA,WAAD,CAAuC,CAEpDpB,iBAAiB,CAAjBA,WAAAA,CAGA,GAAA,YAAA,CAAkB,CAChB,OAEFD,CAAAA,YAAY,CAAZA,IAAAA,CAEA,CAAA,EAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EACA,CAAA,EAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EACA,CAAA,EAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EACA,CAAA,EAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EACA,CAAA,EAAA,UAAA,CAAA,OAAA,EAAA,QAAA,E","sourcesContent":["import {\n  getCLS,\n  getFCP,\n  getFID,\n  getLCP,\n  getTTFB,\n  Metric,\n  ReportHandler,\n} from 'next/dist/compiled/web-vitals'\n\nconst initialHref = location.href\nlet isRegistered = false\nlet userReportHandler: ReportHandler | undefined\n\nfunction onReport(metric: Metric): void {\n  if (userReportHandler) {\n    userReportHandler(metric)\n  }\n\n  // This code is not shipped, executed, or present in the client-side\n  // JavaScript bundle unless explicitly enabled in your application.\n  //\n  // When this feature is enabled, we'll make it very clear by printing a\n  // message during the build (`next build`).\n  if (\n    process.env.NODE_ENV === 'production' &&\n    // This field is empty unless you explicitly configure it:\n    process.env.__NEXT_ANALYTICS_ID\n  ) {\n    const body: Record<string, string> = {\n      dsn: process.env.__NEXT_ANALYTICS_ID,\n      id: metric.id,\n      page: window.__NEXT_DATA__.page,\n      href: initialHref,\n      event_name: metric.name,\n      value: metric.value.toString(),\n      speed:\n        'connection' in navigator &&\n        navigator['connection'] &&\n        'effectiveType' in navigator['connection']\n          ? (navigator['connection']['effectiveType'] as string)\n          : '',\n    }\n\n    const blob = new Blob([new URLSearchParams(body).toString()], {\n      // This content type is necessary for `sendBeacon`:\n      type: 'application/x-www-form-urlencoded',\n    })\n    const vitalsUrl = 'https://vitals.vercel-insights.com/v1/vitals'\n    ;(navigator.sendBeacon && navigator.sendBeacon(vitalsUrl, blob)) ||\n      fetch(vitalsUrl, {\n        body: blob,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n      })\n  }\n}\n\nexport default (onPerfEntry?: ReportHandler): void => {\n  // Update function if it changes:\n  userReportHandler = onPerfEntry\n\n  // Only register listeners once:\n  if (isRegistered) {\n    return\n  }\n  isRegistered = true\n\n  getCLS(onReport)\n  getFID(onReport)\n  getFCP(onReport)\n  getLCP(onReport)\n  getTTFB(onReport)\n}\n"]},"metadata":{},"sourceType":"script"}