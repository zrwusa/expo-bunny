{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";export var SegmentTreeNode=function(){function SegmentTreeNode(start,end,sum,val){_classCallCheck(this,SegmentTreeNode);this._start=0;this._end=0;this._val=null;this._sum=0;this._left=null;this._right=null;this._start=start;this._end=end;this._sum=sum;this._val=val||null;}_createClass(SegmentTreeNode,[{key:\"start\",get:function get(){return this._start;},set:function set(v){this._start=v;}},{key:\"end\",get:function get(){return this._end;},set:function set(v){this._end=v;}},{key:\"val\",get:function get(){return this._val;},set:function set(v){this._val=v;}},{key:\"sum\",get:function get(){return this._sum;},set:function set(v){this._sum=v;}},{key:\"left\",get:function get(){return this._left;},set:function set(v){this._left=v;}},{key:\"right\",get:function get(){return this._right;},set:function set(v){this._right=v;}}]);return SegmentTreeNode;}();export var SegmentTree=function(){function SegmentTree(values,start,end){_classCallCheck(this,SegmentTree);this._values=[];this._start=0;start=start||0;end=end||values.length-1;this._values=values;this._start=start;this._end=end;this._root=this.build(start,end);}_createClass(SegmentTree,[{key:\"root\",get:function get(){return this._root;}},{key:\"build\",value:function build(start,end){if(start===end){return new SegmentTreeNode(start,end,this._values[start]);}var mid=start+Math.floor((end-start)/2);var left=this.build(start,mid);var right=this.build(mid+1,end);var cur=new SegmentTreeNode(start,end,left.sum+right.sum);cur.left=left;cur.right=right;return cur;}},{key:\"updateNode\",value:function updateNode(index,sum,val){var root=this._root||null;if(!root){return;}var dfs=function dfs(cur,index,sum,val){if(cur.start===cur.end&&cur.start===index){cur.sum=sum;return;}var mid=cur.start+Math.floor((cur.end-cur.start)/2);if(index<=mid){dfs(cur.left,index,sum,val);}else{dfs(cur.right,index,sum,val);}cur.sum=cur.left.sum+cur.right.sum;};dfs(root,index,sum);}},{key:\"querySumByRange\",value:function querySumByRange(indexA,indexB){var root=this._root||null;if(!root){return 0;}var dfs=function dfs(cur,i,j){if(cur.start===i&&cur.end===j){return cur.sum;}var mid=cur.start+Math.floor((cur.end-cur.start)/2);if(j<=mid){return dfs(cur.left,i,j);}else if(i>mid){return dfs(cur.right,i,j);}else{return dfs(cur.left,i,mid)+dfs(cur.right,mid+1,j);}};return dfs(root,indexA,indexB);}}]);return SegmentTree;}();","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/utils/data-structures/binary-tree/segment-tree.ts"],"names":["SegmentTreeNode","_start","_end","_val","_sum","_left","_right","val","SegmentTree","_values","start","end","values","mid","Math","left","right","cur","root","dfs","index","j","i"],"mappings":"gIAEA,MAAA,IAAaA,CAAAA,eAAb,CAAA,UAAA,CAuDI,QAAA,CAAA,eAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAsF,CAAA,eAAA,CAAA,IAAA,CAAA,eAAA,CAAA,CAAA,KAtD5EC,MAsD4E,CAtD3D,CAsD2D,CAAA,KA7C5EC,IA6C4E,CA7C7D,CA6C6D,CAAA,KApC5EC,IAoC4E,CApC1C,IAoC0C,CAAA,KA3B5EC,IA2B4E,CA3B7D,CA2B6D,CAAA,KAlB5EC,KAkB4E,CAlB5C,IAkB4C,CAAA,KAT5EC,MAS4E,CAT3C,IAS2C,CAClF,KAAA,MAAA,CAAA,KAAA,CACA,KAAA,IAAA,CAAA,GAAA,CACA,KAAA,IAAA,CAAA,GAAA,CACA,KAAA,IAAA,CAAYC,GAAG,EAAf,IAAA,CACH,CA5DL,YAAA,CAAA,eAAA,CAAA,CAAA,CAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAEI,QAAA,CAAA,GAAA,EAAoB,CAChB,MAAO,MAAP,MAAA,CAHR,CAAA,CAAA,GAAA,CAMI,QAAA,CAAA,GAAA,CAAA,CAAA,CAAqB,CACjB,KAAA,MAAA,CAAA,CAAA,CACH,CARL,CAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAWI,QAAA,CAAA,GAAA,EAAkB,CACd,MAAO,MAAP,IAAA,CAZR,CAAA,CAAA,GAAA,CAeI,QAAA,CAAA,GAAA,CAAA,CAAA,CAAmB,CACf,KAAA,IAAA,CAAA,CAAA,CACH,CAjBL,CAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAoBI,QAAA,CAAA,GAAA,EAAqC,CACjC,MAAO,MAAP,IAAA,CArBR,CAAA,CAAA,GAAA,CAwBI,QAAA,CAAA,GAAA,CAAA,CAAA,CAAsC,CAClC,KAAA,IAAA,CAAA,CAAA,CACH,CA1BL,CAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CA6BI,QAAA,CAAA,GAAA,EAAkB,CACd,MAAO,MAAP,IAAA,CA9BR,CAAA,CAAA,GAAA,CAiCI,QAAA,CAAA,GAAA,CAAA,CAAA,CAAmB,CACf,KAAA,IAAA,CAAA,CAAA,CACH,CAnCL,CAAA,CAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,CAsCI,QAAA,CAAA,GAAA,EAAmC,CAC/B,MAAO,MAAP,KAAA,CAvCR,CAAA,CAAA,GAAA,CA0CI,QAAA,CAAA,GAAA,CAAA,CAAA,CAAoC,CAChC,KAAA,KAAA,CAAA,CAAA,CACH,CA5CL,CAAA,CAAA,CAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CA+CI,QAAA,CAAA,GAAA,EAAoC,CAChC,MAAO,MAAP,MAAA,CAhDR,CAAA,CAAA,GAAA,CAmDI,QAAA,CAAA,GAAA,CAAA,CAAA,CAAqC,CACjC,KAAA,MAAA,CAAA,CAAA,CACH,CArDL,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,eAAA,CAAA,CAAA,EAAA,CA+DA,MAAA,IAAaC,CAAAA,WAAb,CAAA,UAAA,CASI,QAAA,CAAA,WAAA,CAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAA4D,CAAA,eAAA,CAAA,IAAA,CAAA,WAAA,CAAA,CAAA,KARlDC,OAQkD,CAR9B,EAQ8B,CAAA,KAPlDR,MAOkD,CAPjC,CAOiC,CACxDS,KAAK,CAAGA,KAAK,EAAbA,CAAAA,CACAC,GAAG,CAAGA,GAAG,EAAIC,MAAM,CAANA,MAAAA,CAAbD,CAAAA,CACA,KAAA,OAAA,CAAA,MAAA,CACA,KAAA,MAAA,CAAA,KAAA,CACA,KAAA,IAAA,CAAA,GAAA,CACA,KAAA,KAAA,CAAa,KAAA,KAAA,CAAA,KAAA,CAAb,GAAa,CAAb,CACH,CAhBL,YAAA,CAAA,WAAA,CAAA,CAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,CAKI,QAAA,CAAA,GAAA,EAAmC,CAC/B,MAAO,MAAP,KAAA,CACH,CAPL,CAAA,CAAA,CAAA,GAAA,CAAA,OAAA,CAAA,KAAA,CAkBI,QAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAmD,CAC/C,GAAID,KAAK,GAAT,GAAA,CAAmB,CACf,MAAO,IAAA,CAAA,eAAA,CAAA,KAAA,CAAA,GAAA,CAAgC,KAAA,OAAA,CAAvC,KAAuC,CAAhC,CAAP,CACH,CACD,GAAMG,CAAAA,GAAG,CAAGH,KAAK,CAAGI,IAAI,CAAJA,KAAAA,CAAW,CAACH,GAAG,CAAJ,KAAA,EAA/B,CAAoBG,CAApB,CACA,GAAMC,CAAAA,IAAI,CAAG,KAAA,KAAA,CAAA,KAAA,CAAb,GAAa,CAAb,CACA,GAAMC,CAAAA,KAAK,CAAG,KAAA,KAAA,CAAWH,GAAG,CAAd,CAAA,CAAd,GAAc,CAAd,CACA,GAAMI,CAAAA,GAAG,CAAG,GAAA,CAAA,eAAA,CAAA,KAAA,CAAA,GAAA,CAAgCF,IAAI,CAAJA,GAAAA,CAAWC,KAAK,CAA5D,GAAY,CAAZ,CACAC,GAAG,CAAHA,IAAAA,CAAAA,IAAAA,CACAA,GAAG,CAAHA,KAAAA,CAAAA,KAAAA,CACA,MAAA,CAAA,GAAA,CACH,CA7BL,CAAA,CAAA,CAAA,GAAA,CAAA,YAAA,CAAA,KAAA,CA+BI,QAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,CAAiE,CAC7D,GAAMC,CAAAA,IAAI,CAAG,KAAA,KAAA,EAAb,IAAA,CACA,GAAI,CAAJ,IAAA,CAAW,CACP,OACH,CACD,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,CAAgF,CACxF,GAAIF,GAAG,CAAHA,KAAAA,GAAcA,GAAG,CAAjBA,GAAAA,EAAyBA,GAAG,CAAHA,KAAAA,GAA7B,KAAA,CAAkD,CAC9CA,GAAG,CAAHA,GAAAA,CAAAA,GAAAA,CAEA,OACH,CACD,GAAMJ,CAAAA,GAAG,CAAGI,GAAG,CAAHA,KAAAA,CAAYH,IAAI,CAAJA,KAAAA,CAAW,CAACG,GAAG,CAAHA,GAAAA,CAAUA,GAAG,CAAd,KAAA,EAAnC,CAAwBH,CAAxB,CACA,GAAIM,KAAK,EAAT,GAAA,CAAkB,CACdD,GAAG,CAACF,GAAG,CAAJ,IAAA,CAAA,KAAA,CAAA,GAAA,CAAHE,GAAG,CAAHA,CADJ,CAAA,IAEO,CACHA,GAAG,CAACF,GAAG,CAAJ,KAAA,CAAA,KAAA,CAAA,GAAA,CAAHE,GAAG,CAAHA,CACH,CACDF,GAAG,CAAHA,GAAAA,CAAUA,GAAG,CAAHA,IAAAA,CAAAA,GAAAA,CAAgBA,GAAG,CAAHA,KAAAA,CAA1BA,GAAAA,CAZJ,CAAA,CAeAE,GAAG,CAAA,IAAA,CAAA,KAAA,CAAHA,GAAG,CAAHA,CACH,CApDL,CAAA,CAAA,CAAA,GAAA,CAAA,iBAAA,CAAA,KAAA,CAsDI,QAAA,CAAA,eAAA,CAAA,MAAA,CAAA,MAAA,CAAwD,CACpD,GAAMD,CAAAA,IAAI,CAAG,KAAA,KAAA,EAAb,IAAA,CACA,GAAI,CAAJ,IAAA,CAAW,CACP,MAAA,EAAA,CACH,CAED,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAwD,CAChE,GAAIF,GAAG,CAAHA,KAAAA,GAAAA,CAAAA,EAAmBA,GAAG,CAAHA,GAAAA,GAAvB,CAAA,CAAsC,CAClC,MAAOA,CAAAA,GAAG,CAAV,GAAA,CACH,CACD,GAAMJ,CAAAA,GAAG,CAAGI,GAAG,CAAHA,KAAAA,CAAYH,IAAI,CAAJA,KAAAA,CAAW,CAACG,GAAG,CAAHA,GAAAA,CAAUA,GAAG,CAAd,KAAA,EAAnC,CAAwBH,CAAxB,CACA,GAAIO,CAAC,EAAL,GAAA,CAAc,CACV,MAAOF,CAAAA,GAAG,CAACF,GAAG,CAAJ,IAAA,CAAA,CAAA,CAAV,CAAU,CAAV,CADJ,CAAA,IAEO,IAAIK,CAAC,CAAL,GAAA,CAAa,CAChB,MAAOH,CAAAA,GAAG,CAACF,GAAG,CAAJ,KAAA,CAAA,CAAA,CAAV,CAAU,CAAV,CADG,CAAA,IAEA,CACH,MAAOE,CAAAA,GAAG,CAACF,GAAG,CAAJ,IAAA,CAAA,CAAA,CAAHE,GAAG,CAAHA,CAAyBA,GAAG,CAACF,GAAG,CAAJ,KAAA,CAAaJ,GAAG,CAAhB,CAAA,CAAnC,CAAmC,CAAnC,CACH,CAXL,CAAA,CAaA,MAAOM,CAAAA,GAAG,CAAA,IAAA,CAAA,MAAA,CAAV,MAAU,CAAV,CACH,CA1EL,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAAA,EAAA","sourcesContent":["export type SegmentTreeNodeVal = number;\n\nexport class SegmentTreeNode {\n    protected _start: number = 0;\n    get start(): number {\n        return this._start;\n    }\n\n    set start(v: number) {\n        this._start = v;\n    }\n\n    protected _end: number = 0;\n    get end(): number {\n        return this._end;\n    }\n\n    set end(v: number) {\n        this._end = v;\n    }\n\n    protected _val: SegmentTreeNodeVal | null = null;\n    get val(): SegmentTreeNodeVal | null {\n        return this._val;\n    }\n\n    set val(v: SegmentTreeNodeVal | null) {\n        this._val = v;\n    }\n\n    protected _sum: number = 0;\n    get sum(): number {\n        return this._sum;\n    }\n\n    set sum(v: number) {\n        this._sum = v;\n    }\n\n    protected _left: SegmentTreeNode | null = null;\n    get left(): SegmentTreeNode | null {\n        return this._left;\n    }\n\n    set left(v: SegmentTreeNode | null) {\n        this._left = v;\n    }\n\n    protected _right: SegmentTreeNode | null = null;\n    get right(): SegmentTreeNode | null {\n        return this._right;\n    }\n\n    set right(v: SegmentTreeNode | null) {\n        this._right = v;\n    }\n\n    constructor(start: number, end: number, sum: number, val?: SegmentTreeNodeVal | null) {\n        this._start = start;\n        this._end = end;\n        this._sum = sum;\n        this._val = val || null;\n    }\n}\n\nexport class SegmentTree {\n    protected _values: number[] = [];\n    protected _start: number = 0;\n    protected _end: number;\n    protected _root: SegmentTreeNode | null;\n    get root(): SegmentTreeNode | null {\n        return this._root;\n    }\n\n    constructor(values: number[], start?: number, end?: number) {\n        start = start || 0;\n        end = end || values.length - 1;\n        this._values = values;\n        this._start = start;\n        this._end = end;\n        this._root = this.build(start, end);\n    }\n\n    build(start: number, end: number): SegmentTreeNode {\n        if (start === end) {\n            return new SegmentTreeNode(start, end, this._values[start]);\n        }\n        const mid = start + Math.floor((end - start) / 2);\n        const left = this.build(start, mid);\n        const right = this.build(mid + 1, end);\n        const cur = new SegmentTreeNode(start, end, left.sum + right.sum);\n        cur.left = left;\n        cur.right = right;\n        return cur;\n    }\n\n    updateNode(index: number, sum: number, val?: SegmentTreeNodeVal) {\n        const root = this._root || null;\n        if (!root) {\n            return;\n        }\n        const dfs = (cur: SegmentTreeNode, index: number, sum: number, val?: SegmentTreeNodeVal) => {\n            if (cur.start === cur.end && cur.start === index) {\n                cur.sum = sum;\n                // cur.val = val;\n                return;\n            }\n            const mid = cur.start + Math.floor((cur.end - cur.start) / 2);\n            if (index <= mid) {\n                dfs(cur.left!, index, sum, val);\n            } else {\n                dfs(cur.right!, index, sum, val);\n            }\n            cur.sum = cur.left!.sum + cur.right!.sum;\n        };\n\n        dfs(root, index, sum);\n    }\n\n    querySumByRange(indexA: number, indexB: number): number {\n        const root = this._root || null;\n        if (!root) {\n            return 0;\n        }\n\n        const dfs = (cur: SegmentTreeNode, i: number, j: number): number => {\n            if (cur.start === i && cur.end === j) {\n                return cur.sum;\n            }\n            const mid = cur.start + Math.floor((cur.end - cur.start) / 2);\n            if (j <= mid) {\n                return dfs(cur.left!, i, j);\n            } else if (i > mid) {\n                return dfs(cur.right!, i, j);\n            } else {\n                return dfs(cur.left!, i, mid) + dfs(cur.right!, mid + 1, j);\n            }\n        };\n        return dfs(root, indexA, indexB);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}