{"ast":null,"code":"\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var next=_interopRequireWildcard(require(\"./\"));var _eventSourcePolyfill=_interopRequireDefault(require(\"./dev/event-source-polyfill\"));var _onDemandEntriesClient=_interopRequireDefault(require(\"./dev/on-demand-entries-client\"));var _webpackHotMiddlewareClient=_interopRequireDefault(require(\"./dev/webpack-hot-middleware-client\"));var _devBuildWatcher=_interopRequireDefault(require(\"./dev/dev-build-watcher\"));var _fouc=require(\"./dev/fouc\");var _eventsource=require(\"./dev/error-overlay/eventsource\");var querystring=_interopRequireWildcard(require(\"../next-server/lib/router/utils/querystring\"));import(\"./dev/noop\");;if(!window.EventSource){window.EventSource=_eventSourcePolyfill.default;}var _window=window,assetPrefix=_window.__NEXT_DATA__.assetPrefix;var prefix=assetPrefix||'';var webpackHMR=(0,_webpackHotMiddlewareClient.default)();window.next=next;(0,next.default)({webpackHMR:webpackHMR}).then(function(_ref){var renderCtx=_ref.renderCtx,render=_ref.render;(0,_onDemandEntriesClient.default)({assetPrefix:prefix});var buildIndicatorHandler=function buildIndicatorHandler(){};function devPagesManifestListener(event){if(event.data.indexOf('devPagesManifest')!==-1){fetch(prefix+\"/_next/static/development/_devPagesManifest.json\").then(function(res){return res.json();}).then(function(manifest){window.__DEV_PAGES_MANIFEST=manifest;}).catch(function(err){console.log(\"Failed to fetch devPagesManifest\",err);});}else if(event.data.indexOf('serverOnlyChanges')!==-1){var _JSON$parse=JSON.parse(event.data),pages=_JSON$parse.pages;var router=window.next.router;if(!router.clc&&pages.includes(router.pathname)){console.log('Refreshing page data due to server-side change');buildIndicatorHandler('building');var clearIndicator=function clearIndicator(){return buildIndicatorHandler('built');};router.replace(router.pathname+'?'+String(querystring.assign(querystring.urlQueryToSearchParams(router.query),new URLSearchParams(location.search))),router.asPath).finally(clearIndicator);}}}devPagesManifestListener.unfiltered=true;(0,_eventsource.addMessageListener)(devPagesManifestListener);if(process.env.__NEXT_BUILD_INDICATOR){(0,_devBuildWatcher.default)(function(handler){buildIndicatorHandler=handler;});}(0,_fouc.displayContent)(function(){render(renderCtx);});}).catch(function(err){console.error('Error was not caught',err);});","map":{"version":3,"sources":["../../client/next-dev.js"],"names":["__REPLACE_NOOP_IMPORT__","window","EventSourcePolyfill","__NEXT_DATA__","prefix","assetPrefix","webpackHMR","buildIndicatorHandler","event","fetch","res","manifest","err","console","JSON","router","pages","clearIndicator","String","querystring","location","devPagesManifestListener","process","handler","render"],"mappings":"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","sourcesContent":["/* globals __REPLACE_NOOP_IMPORT__ */\nimport initNext, * as next from './'\nimport EventSourcePolyfill from './dev/event-source-polyfill'\nimport initOnDemandEntries from './dev/on-demand-entries-client'\nimport initWebpackHMR from './dev/webpack-hot-middleware-client'\nimport initializeBuildWatcher from './dev/dev-build-watcher'\nimport { displayContent } from './dev/fouc'\nimport { addMessageListener } from './dev/error-overlay/eventsource'\nimport * as querystring from '../next-server/lib/router/utils/querystring'\n\n// Temporary workaround for the issue described here:\n// https://github.com/vercel/next.js/issues/3775#issuecomment-407438123\n// The runtimeChunk doesn't have dynamic import handling code when there hasn't been a dynamic import\n// The runtimeChunk can't hot reload itself currently to correct it when adding pages using on-demand-entries\n// eslint-disable-next-line no-unused-expressions\n__REPLACE_NOOP_IMPORT__\n\n// Support EventSource on Internet Explorer 11\nif (!window.EventSource) {\n  window.EventSource = EventSourcePolyfill\n}\n\nconst {\n  __NEXT_DATA__: { assetPrefix },\n} = window\n\nconst prefix = assetPrefix || ''\nconst webpackHMR = initWebpackHMR()\n\nwindow.next = next\ninitNext({ webpackHMR })\n  .then(({ renderCtx, render }) => {\n    initOnDemandEntries({ assetPrefix: prefix })\n\n    let buildIndicatorHandler = () => {}\n\n    function devPagesManifestListener(event) {\n      if (event.data.indexOf('devPagesManifest') !== -1) {\n        fetch(`${prefix}/_next/static/development/_devPagesManifest.json`)\n          .then((res) => res.json())\n          .then((manifest) => {\n            window.__DEV_PAGES_MANIFEST = manifest\n          })\n          .catch((err) => {\n            console.log(`Failed to fetch devPagesManifest`, err)\n          })\n      } else if (event.data.indexOf('serverOnlyChanges') !== -1) {\n        const { pages } = JSON.parse(event.data)\n        const router = window.next.router\n\n        if (!router.clc && pages.includes(router.pathname)) {\n          console.log('Refreshing page data due to server-side change')\n\n          buildIndicatorHandler('building')\n\n          const clearIndicator = () => buildIndicatorHandler('built')\n\n          router\n            .replace(\n              router.pathname +\n                '?' +\n                String(\n                  querystring.assign(\n                    querystring.urlQueryToSearchParams(router.query),\n                    new URLSearchParams(location.search)\n                  )\n                ),\n              router.asPath\n            )\n            .finally(clearIndicator)\n        }\n      }\n    }\n    devPagesManifestListener.unfiltered = true\n    addMessageListener(devPagesManifestListener)\n\n    if (process.env.__NEXT_BUILD_INDICATOR) {\n      initializeBuildWatcher((handler) => {\n        buildIndicatorHandler = handler\n      })\n    }\n\n    // delay rendering until after styles have been applied in development\n    displayContent(() => {\n      render(renderCtx)\n    })\n  })\n  .catch((err) => {\n    console.error('Error was not caught', err)\n  })\n"]},"metadata":{},"sourceType":"script"}