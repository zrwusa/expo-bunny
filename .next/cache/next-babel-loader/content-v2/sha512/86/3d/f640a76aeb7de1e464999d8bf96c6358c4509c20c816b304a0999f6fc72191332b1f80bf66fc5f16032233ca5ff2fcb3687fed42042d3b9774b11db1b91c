{"ast":null,"code":"\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));exports.__esModule=true;exports.searchParamsToUrlQuery=searchParamsToUrlQuery;exports.urlQueryToSearchParams=urlQueryToSearchParams;exports.assign=assign;function searchParamsToUrlQuery(searchParams){var query={};searchParams.forEach(function(value,key){if(typeof query[key]==='undefined'){query[key]=value;}else if(Array.isArray(query[key])){;query[key].push(value);}else{query[key]=[query[key],value];}});return query;}function stringifyUrlQueryParam(param){if(typeof param==='string'||typeof param==='number'&&!isNaN(param)||typeof param==='boolean'){return String(param);}else{return'';}}function urlQueryToSearchParams(urlQuery){var result=new URLSearchParams();Object.entries(urlQuery).forEach(function(_ref){var _ref2=(0,_slicedToArray2.default)(_ref,2),key=_ref2[0],value=_ref2[1];if(Array.isArray(value)){value.forEach(function(item){return result.append(key,stringifyUrlQueryParam(item));});}else{result.set(key,stringifyUrlQueryParam(value));}});return result;}function assign(target){for(var _len=arguments.length,searchParamsList=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){searchParamsList[_key-1]=arguments[_key];}searchParamsList.forEach(function(searchParams){Array.from(searchParams.keys()).forEach(function(key){return target.delete(key);});searchParams.forEach(function(value,key){return target.append(key,value);});});return target;}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/querystring.ts"],"names":["query","searchParams","Array","isNaN","String","result","Object","value","item","stringifyUrlQueryParam","searchParamsList","key","target"],"mappings":"sVAEO,QAAA,CAAA,sBAAA,CAAA,YAAA,CAEW,CAChB,GAAMA,CAAAA,KAAqB,CAA3B,EAAA,CACAC,YAAY,CAAZA,OAAAA,CAAqB,SAAA,KAAA,CAAA,GAAA,CAAgB,CACnC,GAAI,MAAOD,CAAAA,KAAK,CAAZ,GAAY,CAAZ,GAAJ,WAAA,CAAuC,CACrCA,KAAK,CAALA,GAAK,CAALA,CAAAA,KAAAA,CADF,CAAA,IAEO,IAAIE,KAAK,CAALA,OAAAA,CAAcF,KAAK,CAAvB,GAAuB,CAAnBE,CAAJ,CAA+B,CACpC,CAAEF,KAAK,CAAN,GAAM,CAALA,CAAD,IAACA,CAAD,KAACA,EADG,CAAA,IAEA,CACLA,KAAK,CAALA,GAAK,CAALA,CAAa,CAACA,KAAK,CAAN,GAAM,CAAN,CAAbA,KAAa,CAAbA,CAEH,CARDC,CAAAA,EASA,MAAA,CAAA,KAAA,CAGF,SAAA,CAAA,sBAAA,CAAA,KAAA,CAAuD,CACrD,GACE,MAAA,CAAA,KAAA,GAAA,QAAA,EACC,MAAA,CAAA,KAAA,GAAA,QAAA,EAA6B,CAACE,KAAK,CADpC,KACoC,CADpC,EAEA,MAAA,CAAA,KAAA,GAHF,SAAA,CAIE,CACA,MAAOC,CAAAA,MAAM,CAAb,KAAa,CAAb,CALF,CAAA,IAMO,CACL,MAAA,EAAA,CAEH,CAEM,SAAA,CAAA,sBAAA,CAAA,QAAA,CAEY,CACjB,GAAMC,CAAAA,MAAM,CAAG,GAAf,CAAA,eAAe,EAAf,CACAC,MAAM,CAANA,OAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAAiC,cAAkB,+CAAjB,GAAiB,UAAlB,KAAkB,UACjD,GAAIJ,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,CAA0B,CACxBK,KAAK,CAALA,OAAAA,CAAeC,SAAAA,IAAD,QAAUH,CAAAA,MAAM,CAANA,MAAAA,CAAAA,GAAAA,CAAmBI,sBAAsB,CAAjEF,IAAiE,CAAzCF,CAAV,EAAdE,EADF,CAAA,IAEO,CACLF,MAAM,CAANA,GAAAA,CAAAA,GAAAA,CAAgBI,sBAAsB,CAAtCJ,KAAsC,CAAtCA,EAEH,CANDC,CAAAA,EAOA,MAAA,CAAA,MAAA,CAGK,SAAA,CAAA,MAAA,CAAA,MAAA,CAGY,+BAHZ,gBAGY,qDAHZ,gBAGY,0BACjBI,gBAAgB,CAAhBA,OAAAA,CAA0BT,SAAAA,YAAD,CAAkB,CACzCC,KAAK,CAALA,IAAAA,CAAWD,YAAY,CAAvBC,IAAWD,EAAXC,EAAAA,OAAAA,CAAyCS,SAAAA,GAAD,QAASC,CAAAA,MAAM,CAANA,MAAAA,CAAjDV,GAAiDU,CAAT,EAAxCV,EACAD,YAAY,CAAZA,OAAAA,CAAqB,SAAA,KAAA,CAAA,GAAA,QAAgBW,CAAAA,MAAM,CAANA,MAAAA,CAAAA,GAAAA,CAArCX,KAAqCW,CAAhB,EAArBX,EAFFS,CAAAA,EAIA,MAAA,CAAA,MAAA,CACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  searchParams.forEach((value, key) => {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(query[key])) {\n      ;(query[key] as string[]).push(value)\n    } else {\n      query[key] = [query[key] as string, value]\n    }\n  })\n  return query\n}\n\nfunction stringifyUrlQueryParam(param: string): string {\n  if (\n    typeof param === 'string' ||\n    (typeof param === 'number' && !isNaN(param)) ||\n    typeof param === 'boolean'\n  ) {\n    return String(param)\n  } else {\n    return ''\n  }\n}\n\nexport function urlQueryToSearchParams(\n  urlQuery: ParsedUrlQuery\n): URLSearchParams {\n  const result = new URLSearchParams()\n  Object.entries(urlQuery).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      value.forEach((item) => result.append(key, stringifyUrlQueryParam(item)))\n    } else {\n      result.set(key, stringifyUrlQueryParam(value))\n    }\n  })\n  return result\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  searchParamsList.forEach((searchParams) => {\n    Array.from(searchParams.keys()).forEach((key) => target.delete(key))\n    searchParams.forEach((value, key) => target.append(key, value))\n  })\n  return target\n}\n"]},"metadata":{},"sourceType":"script"}