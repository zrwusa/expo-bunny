{"ast":null,"code":"\"use strict\";exports.__esModule=true;exports.parseRelativeUrl=parseRelativeUrl;var _utils=require(\"../../utils\");var _querystring=require(\"./querystring\");function parseRelativeUrl(url,base){var globalBase=new URL(false?'http://n':(0,_utils.getLocationOrigin)());var resolvedBase=base?new URL(base,globalBase):globalBase;var _URL=new URL(url,resolvedBase),pathname=_URL.pathname,searchParams=_URL.searchParams,search=_URL.search,hash=_URL.hash,href=_URL.href,origin=_URL.origin;if(origin!==globalBase.origin){throw new Error(\"invariant: invalid relative URL, router received \"+url);}return{pathname:pathname,query:(0,_querystring.searchParamsToUrlQuery)(searchParams),search:search,hash:hash,href:href.slice(globalBase.origin.length)};}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/parse-relative-url.ts"],"names":["globalBase","resolvedBase","base","origin","pathname","query","search","hash","href"],"mappings":"+EAAA,GAAA,CAAA,MAAA,CAAA,OAAA,eAAA,CACA,GAAA,CAAA,YAAA,CAAA,OAAA,iBAAA,CAQO,QAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,IAAA,CAAsD,CAC3D,GAAMA,CAAAA,UAAU,CAAG,GAAA,CAAA,GAAA,CACjB,MAAA,UAAA,CAA6C,CAAA,EAAA,MAAA,CAD/C,iBAC+C,GAD5B,CAAnB,CAGA,GAAMC,CAAAA,YAAY,CAAGC,IAAI,CAAG,GAAA,CAAA,GAAA,CAAA,IAAA,CAAH,UAAG,CAAH,CAAzB,UAAA,CACA,SAA+D,GAAA,CAAA,GAAA,CAAA,GAAA,CAA/D,YAA+D,CAA/D,CAAM,QAAN,MAAM,QAAN,CAAM,YAAN,MAAM,YAAN,CAAM,MAAN,MAAM,MAAN,CAAM,IAAN,MAAM,IAAN,CAAM,IAAN,MAAM,IAAN,CAAM,MAAN,MAAM,MAAN,CAIA,GAAIC,MAAM,GAAKH,UAAU,CAAzB,MAAA,CAAkC,CAChC,KAAM,IAAA,CAAA,KAAA,qDAAN,GAAM,CAAN,CAEF,OAAO,CACLI,QADK,CACLA,QADK,CAELC,KAAK,CAAE,CAAA,EAAA,YAAA,CAAA,sBAAA,EAFF,YAEE,CAFF,CAGLC,MAHK,CAGLA,MAHK,CAILC,IAJK,CAILA,IAJK,CAKLC,IAAI,CAAEA,IAAI,CAAJA,KAAAA,CAAWR,UAAU,CAAVA,MAAAA,CALnB,MAKQQ,CALD,CAAP,CAOD","sourcesContent":["import { getLocationOrigin } from '../../utils'\nimport { searchParamsToUrlQuery } from './querystring'\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected with one exception, in the browser, absolute urls that are on\n * the current origin will be parsed as relative\n */\nexport function parseRelativeUrl(url: string, base?: string) {\n  const globalBase = new URL(\n    typeof window === 'undefined' ? 'http://n' : getLocationOrigin()\n  )\n  const resolvedBase = base ? new URL(base, globalBase) : globalBase\n  const { pathname, searchParams, search, hash, href, origin } = new URL(\n    url,\n    resolvedBase\n  )\n  if (origin !== globalBase.origin) {\n    throw new Error(`invariant: invalid relative URL, router received ${url}`)\n  }\n  return {\n    pathname,\n    query: searchParamsToUrlQuery(searchParams),\n    search,\n    hash,\n    href: href.slice(globalBase.origin.length),\n  }\n}\n"]},"metadata":{},"sourceType":"script"}