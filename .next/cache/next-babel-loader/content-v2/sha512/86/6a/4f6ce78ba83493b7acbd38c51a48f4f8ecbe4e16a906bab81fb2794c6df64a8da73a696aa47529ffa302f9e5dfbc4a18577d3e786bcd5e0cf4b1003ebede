{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{EventEmitter}from'@unimodules/core';import{assertStatusValuesInBounds,getNativeSourceAndFullInitialStatusForLoadAsync,getUnloadedStatus,PlaybackMixin}from\"../AV\";import ExponentAV from\"../ExponentAV\";import{throwIfAudioIsDisabled}from\"./AudioAvailability\";export var Sound=function(){function Sound(){var _this=this;_classCallCheck(this,Sound);this._loaded=false;this._loading=false;this._key=null;this._lastStatusUpdate=null;this._lastStatusUpdateTime=null;this._subscriptions=[];this._eventEmitter=new EventEmitter(ExponentAV);this._coalesceStatusUpdatesInMillis=100;this._onPlaybackStatusUpdate=null;this._internalStatusUpdateCallback=function(_ref){var key=_ref.key,status=_ref.status;if(_this._key===key){_this._callOnPlaybackStatusUpdateForNewStatus(status);}};this._internalErrorCallback=function(_ref2){var key=_ref2.key,error=_ref2.error;if(_this._key===key){_this._errorCallback(error);}};this._errorCallback=function(error){_this._clearSubscriptions();_this._loaded=false;_this._key=null;_this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));};this.getStatusAsync=function _callee(){var status;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!_this._loaded){_context.next=2;break;}return _context.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(){return ExponentAV.getStatusForSound(_this._key);}));case 2:status=getUnloadedStatus();_this._callOnPlaybackStatusUpdateForNewStatus(status);return _context.abrupt(\"return\",status);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);};}_createClass(Sound,[{key:\"_callOnPlaybackStatusUpdateForNewStatus\",value:function _callOnPlaybackStatusUpdateForNewStatus(status){var shouldDismissBasedOnCoalescing=this._lastStatusUpdateTime&&JSON.stringify(status)===this._lastStatusUpdate&&Date.now()-this._lastStatusUpdateTime.getTime()<this._coalesceStatusUpdatesInMillis;if(this._onPlaybackStatusUpdate!=null&&!shouldDismissBasedOnCoalescing){this._onPlaybackStatusUpdate(status);this._lastStatusUpdateTime=new Date();this._lastStatusUpdate=JSON.stringify(status);}}},{key:\"_performOperationAndHandleStatusAsync\",value:function _performOperationAndHandleStatusAsync(operation){var _status;return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:throwIfAudioIsDisabled();if(!this._loaded){_context2.next=9;break;}_context2.next=4;return _regeneratorRuntime.awrap(operation());case 4:_status=_context2.sent;this._callOnPlaybackStatusUpdateForNewStatus(_status);return _context2.abrupt(\"return\",_status);case 9:throw new Error('Cannot complete operation because sound is not loaded.');case 10:case\"end\":return _context2.stop();}}},null,this,null,Promise);}},{key:\"_subscribeToNativeEvents\",value:function _subscribeToNativeEvents(){if(this._loaded){this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus',this._internalStatusUpdateCallback));this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError',this._internalErrorCallback));}}},{key:\"_clearSubscriptions\",value:function _clearSubscriptions(){this._subscriptions.forEach(function(e){return e.remove();});this._subscriptions=[];}},{key:\"setOnPlaybackStatusUpdate\",value:function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate){this._onPlaybackStatusUpdate=onPlaybackStatusUpdate;this.getStatusAsync();}},{key:\"loadAsync\",value:function loadAsync(source){var _this2=this;var initialStatus,downloadFirst,_await$getNativeSourc,nativeSource,fullInitialStatus,_args3=arguments;return _regeneratorRuntime.async(function loadAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:initialStatus=_args3.length>1&&_args3[1]!==undefined?_args3[1]:{};downloadFirst=_args3.length>2&&_args3[2]!==undefined?_args3[2]:true;throwIfAudioIsDisabled();if(!this._loading){_context3.next=5;break;}throw new Error('The Sound is already loading.');case 5:if(this._loaded){_context3.next=15;break;}this._loading=true;_context3.next=9;return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source,initialStatus,downloadFirst));case 9:_await$getNativeSourc=_context3.sent;nativeSource=_await$getNativeSourc.nativeSource;fullInitialStatus=_await$getNativeSourc.fullInitialStatus;return _context3.abrupt(\"return\",new Promise(function(resolve,reject){var loadSuccess=function loadSuccess(result){var _result=_slicedToArray(result,2),key=_result[0],status=_result[1];_this2._key=key;_this2._loaded=true;_this2._loading=false;_this2._subscribeToNativeEvents();_this2._callOnPlaybackStatusUpdateForNewStatus(status);resolve(status);};var loadError=function loadError(error){_this2._loading=false;reject(error);};ExponentAV.loadForSound(nativeSource,fullInitialStatus).then(loadSuccess).catch(loadError);}));case 15:throw new Error('The Sound is already loaded.');case 16:case\"end\":return _context3.stop();}}},null,this,null,Promise);}},{key:\"unloadAsync\",value:function unloadAsync(){var key,_status2;return _regeneratorRuntime.async(function unloadAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!this._loaded){_context4.next=12;break;}this._loaded=false;key=this._key;this._key=null;_context4.next=6;return _regeneratorRuntime.awrap(ExponentAV.unloadForSound(key));case 6:_status2=_context4.sent;this._callOnPlaybackStatusUpdateForNewStatus(_status2);this._clearSubscriptions();return _context4.abrupt(\"return\",_status2);case 12:return _context4.abrupt(\"return\",this.getStatusAsync());case 13:case\"end\":return _context4.stop();}}},null,this,null,Promise);}},{key:\"setStatusAsync\",value:function setStatusAsync(status){var _this3=this;return _regeneratorRuntime.async(function setStatusAsync$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:assertStatusValuesInBounds(status);return _context5.abrupt(\"return\",this._performOperationAndHandleStatusAsync(function(){return ExponentAV.setStatusForSound(_this3._key,status);}));case 2:case\"end\":return _context5.stop();}}},null,this,null,Promise);}},{key:\"replayAsync\",value:function replayAsync(){var _this4=this;var status,_args6=arguments;return _regeneratorRuntime.async(function replayAsync$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:status=_args6.length>0&&_args6[0]!==undefined?_args6[0]:{};if(!(status.positionMillis&&status.positionMillis!==0)){_context6.next=3;break;}throw new Error('Requested position after replay has to be 0.');case 3:return _context6.abrupt(\"return\",this._performOperationAndHandleStatusAsync(function(){return ExponentAV.replaySound(_this4._key,_objectSpread(_objectSpread({},status),{},{positionMillis:0,shouldPlay:true}));}));case 4:case\"end\":return _context6.stop();}}},null,this,null,Promise);}}]);return Sound;}();Sound.create=function _callee2(source){var initialStatus,onPlaybackStatusUpdate,downloadFirst,_args7=arguments;return _regeneratorRuntime.async(function _callee2$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:initialStatus=_args7.length>1&&_args7[1]!==undefined?_args7[1]:{};onPlaybackStatusUpdate=_args7.length>2&&_args7[2]!==undefined?_args7[2]:null;downloadFirst=_args7.length>3&&_args7[3]!==undefined?_args7[3]:true;console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");return _context7.abrupt(\"return\",Sound.createAsync(source,initialStatus,onPlaybackStatusUpdate,downloadFirst));case 5:case\"end\":return _context7.stop();}}},null,null,null,Promise);};Sound.createAsync=function _callee3(source){var initialStatus,onPlaybackStatusUpdate,downloadFirst,sound,status,_args8=arguments;return _regeneratorRuntime.async(function _callee3$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:initialStatus=_args8.length>1&&_args8[1]!==undefined?_args8[1]:{};onPlaybackStatusUpdate=_args8.length>2&&_args8[2]!==undefined?_args8[2]:null;downloadFirst=_args8.length>3&&_args8[3]!==undefined?_args8[3]:true;sound=new Sound();sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);_context8.next=7;return _regeneratorRuntime.awrap(sound.loadAsync(source,initialStatus,downloadFirst));case 7:status=_context8.sent;return _context8.abrupt(\"return\",{sound:sound,status:status});case 9:case\"end\":return _context8.stop();}}},null,null,null,Promise);};_extends(Sound.prototype,PlaybackMixin);","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/packages/expo-av/src/Audio/Sound.ts"],"names":["Sound","create","initialStatus","onPlaybackStatusUpdate","downloadFirst","console","createAsync","sound","status","shouldDismissBasedOnCoalescing","JSON","Date","throwIfAudioIsDisabled","operation","key","error","e","getUnloadedStatus","ExponentAV","nativeSource","fullInitialStatus","getNativeSourceAndFullInitialStatusForLoadAsync","loadSuccess","resolve","loadError","reject","assertStatusValuesInBounds","positionMillis","shouldPlay"],"mappings":"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","sourcesContent":["import {EventEmitter} from '@unimodules/core';\n\nimport {\n    assertStatusValuesInBounds,\n    AVPlaybackSource,\n    AVPlaybackStatus,\n    AVPlaybackStatusToSet,\n    getNativeSourceAndFullInitialStatusForLoadAsync,\n    getUnloadedStatus,\n    Playback,\n    PlaybackMixin,\n} from '../AV';\nimport {PitchCorrectionQuality} from '../Audio';\nimport ExponentAV from '../ExponentAV';\nimport {throwIfAudioIsDisabled} from './AudioAvailability';\n\ntype AudioInstance = number | HTMLMediaElement | null;\n\nexport class Sound implements Playback {\n    _loaded: boolean = false;\n    _loading: boolean = false;\n    _key: AudioInstance = null;\n    _lastStatusUpdate: string | null = null;\n    _lastStatusUpdateTime: Date | null = null;\n    _subscriptions: { remove: () => void }[] = [];\n    _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n    _coalesceStatusUpdatesInMillis: number = 100;\n    _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n    /** @deprecated Use `Sound.createAsync()` instead */\n    static create = async (\n        source: AVPlaybackSource,\n        initialStatus: AVPlaybackStatusToSet = {},\n        onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n        downloadFirst: boolean = true\n    ): Promise<{ sound: Sound; status: AVPlaybackStatus }> => {\n        console.warn(\n            `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n        );\n        return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n    };\n\n    static createAsync = async (\n        source: AVPlaybackSource,\n        initialStatus: AVPlaybackStatusToSet = {},\n        onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n        downloadFirst: boolean = true\n    ): Promise<{ sound: Sound; status: AVPlaybackStatus }> => {\n        const sound: Sound = new Sound();\n        sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n        const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n        return {sound, status};\n    };\n\n    // Internal methods\n\n    _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n        const shouldDismissBasedOnCoalescing =\n            this._lastStatusUpdateTime &&\n            JSON.stringify(status) === this._lastStatusUpdate &&\n            Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n            this._onPlaybackStatusUpdate(status);\n            this._lastStatusUpdateTime = new Date();\n            this._lastStatusUpdate = JSON.stringify(status);\n        }\n    }\n\n    async _performOperationAndHandleStatusAsync(\n        operation: () => Promise<AVPlaybackStatus>\n    ): Promise<AVPlaybackStatus> {\n        throwIfAudioIsDisabled();\n        if (this._loaded) {\n            const status = await operation();\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            return status;\n        } else {\n            throw new Error('Cannot complete operation because sound is not loaded.');\n        }\n    }\n\n    _internalStatusUpdateCallback = ({\n                                         key,\n                                         status,\n                                     }: {\n        key: AudioInstance;\n        status: AVPlaybackStatus;\n    }) => {\n        if (this._key === key) {\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n        }\n    };\n\n    _internalErrorCallback = ({key, error}: { key: AudioInstance; error: string }) => {\n        if (this._key === key) {\n            this._errorCallback(error);\n        }\n    };\n\n    // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n    _subscribeToNativeEvents() {\n        if (this._loaded) {\n            this._subscriptions.push(\n                this._eventEmitter.addListener(\n                    'didUpdatePlaybackStatus',\n                    this._internalStatusUpdateCallback\n                )\n            );\n\n            this._subscriptions.push(\n                this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n            );\n        }\n    }\n\n    _clearSubscriptions() {\n        this._subscriptions.forEach(e => e.remove());\n        this._subscriptions = [];\n    }\n\n    _errorCallback = (error: string) => {\n        this._clearSubscriptions();\n        this._loaded = false;\n        this._key = null;\n        this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n\n    // ### Unified playback API ### (consistent with Video.js)\n    // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n    // Get status API\n\n    getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n        if (this._loaded) {\n            return this._performOperationAndHandleStatusAsync(() =>\n                ExponentAV.getStatusForSound(this._key)\n            );\n        }\n        const status: AVPlaybackStatus = getUnloadedStatus();\n        this._callOnPlaybackStatusUpdateForNewStatus(status);\n        return status;\n    };\n\n    setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n        this.getStatusAsync();\n    }\n\n    // Loading / unloading API\n\n    async loadAsync(\n        source: AVPlaybackSource,\n        initialStatus: AVPlaybackStatusToSet = {},\n        downloadFirst: boolean = true\n    ): Promise<AVPlaybackStatus> {\n        throwIfAudioIsDisabled();\n        if (this._loading) {\n            throw new Error('The Sound is already loading.');\n        }\n        if (!this._loaded) {\n            this._loading = true;\n\n            const {\n                nativeSource,\n                fullInitialStatus,\n            } = await getNativeSourceAndFullInitialStatusForLoadAsync(\n                source,\n                initialStatus,\n                downloadFirst\n            );\n\n            // This is a workaround, since using load with resolve / reject seems to not work.\n            return new Promise<AVPlaybackStatus>((resolve, reject) => {\n                const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n                    const [key, status] = result;\n                    this._key = key;\n                    this._loaded = true;\n                    this._loading = false;\n                    this._subscribeToNativeEvents();\n                    this._callOnPlaybackStatusUpdateForNewStatus(status);\n                    resolve(status);\n                };\n\n                const loadError = (error: Error) => {\n                    this._loading = false;\n                    reject(error);\n                };\n\n                ExponentAV.loadForSound(nativeSource, fullInitialStatus)\n                    .then(loadSuccess)\n                    .catch(loadError);\n            });\n        } else {\n            throw new Error('The Sound is already loaded.');\n        }\n    }\n\n    async unloadAsync(): Promise<AVPlaybackStatus> {\n        if (this._loaded) {\n            this._loaded = false;\n            const key = this._key;\n            this._key = null;\n            const status = await ExponentAV.unloadForSound(key);\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            this._clearSubscriptions();\n            return status;\n        } else {\n            return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n        }\n    }\n\n    // Set status API (only available while isLoaded = true)\n\n    async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n        assertStatusValuesInBounds(status);\n        return this._performOperationAndHandleStatusAsync(() =>\n            ExponentAV.setStatusForSound(this._key, status)\n        );\n    }\n\n    async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n        if (status.positionMillis && status.positionMillis !== 0) {\n            throw new Error('Requested position after replay has to be 0.');\n        }\n\n        return this._performOperationAndHandleStatusAsync(() =>\n            ExponentAV.replaySound(this._key, {\n                ...status,\n                positionMillis: 0,\n                shouldPlay: true,\n            })\n        );\n    }\n\n    // Methods of the Playback interface that are set via PlaybackMixin\n    playAsync!: () => Promise<AVPlaybackStatus>;\n    playFromPositionAsync!: (\n        positionMillis: number,\n        tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n    ) => Promise<AVPlaybackStatus>;\n    pauseAsync!: () => Promise<AVPlaybackStatus>;\n    stopAsync!: () => Promise<AVPlaybackStatus>;\n    setPositionAsync!: (\n        positionMillis: number,\n        tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n    ) => Promise<AVPlaybackStatus>;\n    setRateAsync!: (\n        rate: number,\n        shouldCorrectPitch: boolean,\n        pitchCorrectionQuality?: PitchCorrectionQuality\n    ) => Promise<AVPlaybackStatus>;\n    setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n    setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n    setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n    setProgressUpdateIntervalAsync!: (\n        progressUpdateIntervalMillis: number\n    ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"]},"metadata":{},"sourceType":"module"}