{"ast":null,"code":"var _s=$RefreshSig$();import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"style\"];var _this=this,_jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/components/CopyableText/CopyableText.tsx\";import React from'react';import Clipboard from\"react-native-web/dist/exports/Clipboard\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{collectBizLogicResult}from\"../../store/actions\";import{bizLogicSuccess}from\"../../helpers\";import{useThemeLabor}from\"../../providers/theme-labor\";import{Text}from\"../UI\";import{useDispatch}from'react-redux';export var CopyableText=function CopyableText(_ref){_s();var children=_ref.children,style=_ref.style,rest=_objectWithoutProperties(_ref,_excluded);var dispatch=useDispatch();var handleCopyToClipboard=function handleCopyToClipboard(text){Clipboard.setString(text);dispatch(collectBizLogicResult(bizLogicSuccess({},\"Copy \"+text+\" success\",true)));};var colors=useThemeLabor().theme.colors;var mergedStyle=[{color:colors.accent},style];return React.createElement(TouchableOpacity,{onPress:function onPress(){if(typeof children==='string'){handleCopyToClipboard(children);}},__self:_this,__source:{fileName:_jsxFileName,lineNumber:19,columnNumber:12}},React.createElement(Text,_extends({style:mergedStyle},rest,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:25,columnNumber:9}}),children));};_s(CopyableText,\"c9mfxDO4UUzAjopBjsMVhaUudDs=\",false,function(){return[useDispatch,useThemeLabor];});_c=CopyableText;var _c;$RefreshReg$(_c,\"CopyableText\");","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/components/CopyableText/CopyableText.tsx"],"names":["CopyableText","children","style","rest","dispatch","useDispatch","handleCopyToClipboard","Clipboard","collectBizLogicResult","bizLogicSuccess","colors","useThemeLabor","mergedStyle","color","accent"],"mappings":"sTAAA,MAAA,CAAA,KAAA,KAAA,OAAA,C,4IAEA,OAAA,qBAAA,2BACA,OAAA,eAAA,qBACA,OAAA,aAAA,mCACA,OAAA,IAAA,aACA,OAAA,WAAA,KAAA,aAAA,CAEA,MAAO,IAAMA,CAAAA,YAAiC,CAAG,QAApCA,CAAAA,YAAoC,CAAA,IAAA,CAAgC,MAAA,GAA9BC,CAAAA,QAA8B,CAAA,IAAA,CAA9BA,QAA8B,CAApBC,KAAoB,CAAA,IAAA,CAApBA,KAAoB,CAAVC,IAAU,CAAA,wBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAC7E,GAAMC,CAAAA,QAAQ,CAAGC,WAAjB,EAAA,CACA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAAA,IAAA,CAAkB,CAC5CC,SAAS,CAATA,SAAAA,CAAAA,IAAAA,EACAH,QAAQ,CAACI,qBAAqB,CAACC,eAAe,CAAA,EAAA,CAAA,QAAA,IAAA,CAAA,UAAA,CAA9CL,IAA8C,CAAhB,CAAtB,CAARA,CAFJ,CAAA,CAIA,GAAOM,CAAAA,MAAP,CAAiBC,aAAa,GAA9B,KAAiBA,CAAjB,MAAA,CACA,GAAMC,CAAAA,WAAW,CAAG,CAAC,CACjBC,KAAK,CAAEH,MAAM,CAACI,MADG,CAAD,CAApB,KAAoB,CAApB,CAGA,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,CACH,OAAO,CAAE,QAAA,CAAA,OAAA,EAAM,CACX,GAAI,MAAA,CAAA,QAAA,GAAJ,QAAA,CAAkC,CAC9BR,qBAAqB,CAArBA,QAAqB,CAArBA,CACH,CAJF,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CAMH,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAM,KAAK,CAAEM,WAAb,CAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CANJ,QAMI,CANG,CAAP,CAVG,CAAA,C,GAAMZ,Y,wDACQK,W,CAKAM,a,QANRX,Y","sourcesContent":["import React from 'react';\nimport {Clipboard, TextProps, TouchableOpacity} from 'react-native';\nimport {collectBizLogicResult} from '../../store/actions';\nimport {bizLogicSuccess} from '../../helpers';\nimport {useThemeLabor} from '../../providers/theme-labor';\nimport {Text} from '../UI';\nimport {useDispatch} from 'react-redux';\n\nexport const CopyableText: React.FC<TextProps> = ({children, style, ...rest}) => {\n    const dispatch = useDispatch();\n    const handleCopyToClipboard = (text: string) => {\n        Clipboard.setString(text);\n        dispatch(collectBizLogicResult(bizLogicSuccess({}, `Copy ${text} success`, true)));\n    };\n    const {colors} = useThemeLabor().theme;\n    const mergedStyle = [{\n        color: colors.accent,\n    }, style];\n    return <TouchableOpacity\n        onPress={() => {\n            if (typeof children === 'string') {\n                handleCopyToClipboard(children);\n            }\n        }}>\n        <Text style={mergedStyle} {...rest}>{children}</Text>\n    </TouchableOpacity>;\n};\n"]},"metadata":{},"sourceType":"module"}