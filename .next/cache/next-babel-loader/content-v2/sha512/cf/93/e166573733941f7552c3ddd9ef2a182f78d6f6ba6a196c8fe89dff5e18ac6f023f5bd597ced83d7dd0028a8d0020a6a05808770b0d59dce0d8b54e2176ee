{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";var _this=this,_jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/components/ThemePicker/ThemePicker.tsx\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{useThemeLabor}from\"../../providers/theme-labor\";import*as React from'react';import{EThemes}from\"../../constants\";import{PickerSelect}from\"../UI\";export var ThemePicker=function ThemePicker(_ref){var rest=_extends({},_ref);var themeLabor=useThemeLabor();var changeTheme=themeLabor.changeTheme,currentThemeName=themeLabor.currentThemeName;var theme=themeLabor.theme;var colors=theme.colors;var themeLabels=Object.keys(EThemes).map(function(themeName){return{label:themeName,value:themeName,color:colors.text};});var handleValueChange=function handleValueChange(itemValue){return _regeneratorRuntime.async(function handleValueChange$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log('---4?handleValueChange',itemValue);if(!itemValue){_context.next=4;break;}_context.next=4;return _regeneratorRuntime.awrap(changeTheme(itemValue));case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);};return React.createElement(PickerSelect,_extends({value:currentThemeName,placeholder:{label:'Select ',value:'',color:colors.text},onValueChange:handleValueChange,items:themeLabels},rest,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:26,columnNumber:12}}));};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/components/ThemePicker/ThemePicker.tsx"],"names":["ThemePicker","rest","themeLabor","useThemeLabor","changeTheme","currentThemeName","theme","colors","themeLabels","label","value","color","text","handleValueChange","console"],"mappings":"kOAAA,OAAA,aAAA,mCACA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,OAAA,uBACA,OAAA,YAAA,aAIA,MAAO,IAAMA,CAAAA,WAAyE,CAAG,QAA5EA,CAAAA,WAA4E,CAAA,IAAA,CAAe,CAAA,GAAVC,CAAAA,IAAU,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CACpG,GAAMC,CAAAA,UAAU,CAAGC,aAAnB,EAAA,CACA,GAAOC,CAAAA,WAAP,CAAwCF,UAAxC,CAAA,WAAA,CAAoBG,gBAApB,CAAwCH,UAAxC,CAAA,gBAAA,CACA,GAAOI,CAAAA,KAAP,CAAgBJ,UAAhB,CAAA,KAAA,CACA,GAAOK,CAAAA,MAAP,CAAiBD,KAAjB,CAAA,MAAA,CAEA,GAAME,CAAAA,WAAW,CAAG,MAAM,CAAN,IAAA,CAAA,OAAA,EAAA,GAAA,CAAyB,SAAA,SAAA,CAAe,CACxD,MAAO,CAACC,KAAK,CAAN,SAAA,CAAmBC,KAAK,CAAxB,SAAA,CAAqCC,KAAK,CAAEJ,MAAM,CAACK,IAAnD,CAAP,CADJ,CAAoB,CAApB,CAIA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAA,SAAA,CAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,QAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,OAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CACtBC,OAAO,CAAPA,GAAAA,CAAAA,wBAAAA,CAAAA,SAAAA,EADsB,GAAA,CAAA,SAAA,CAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,KAAA,CAIZV,WAAW,CAJC,SAID,CAJC,CAAA,CAAA,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAA1B,CAAA,CAQA,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,YAAA,CAAA,QAAA,CAAA,CACH,KAAK,CADF,gBAAA,CAEH,WAAW,CAAE,CAACK,KAAK,CAAN,SAAA,CAAmBC,KAAK,CAAxB,EAAA,CAA8BC,KAAK,CAAEJ,MAAM,CAACK,IAA5C,CAFV,CAGH,aAAa,CAHV,iBAAA,CAIH,KAAK,CAAEJ,WAJJ,CAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAP,CAlBG,CAAA","sourcesContent":["import {useThemeLabor} from '../../providers/theme-labor';\nimport * as React from 'react';\nimport {EThemes} from '../../constants';\nimport {PickerSelect} from '../UI';\nimport {ThemeName} from '../../types';\nimport {PickerSelectProps} from 'react-native-picker-select';\n\nexport const ThemePicker: React.FC<Omit<PickerSelectProps, 'onValueChange' | 'items'>> = ({...rest}) => {\n    const themeLabor = useThemeLabor();\n    const {changeTheme, currentThemeName} = themeLabor;\n    const {theme} = themeLabor;\n    const {colors} = theme;\n\n    const themeLabels = Object.keys(EThemes).map((themeName) => {\n        return {label: themeName, value: themeName, color: colors.text};\n    });\n\n    const handleValueChange = async (itemValue: ThemeName) => {\n        console.log('---4?handleValueChange', itemValue);\n        // todo always be invoked 4 times\n        if (itemValue) {\n            await changeTheme(itemValue);\n        }\n    };\n\n    return <PickerSelect\n        value={currentThemeName}\n        placeholder={{label: 'Select ', value: '', color: colors.text}}\n        onValueChange={handleValueChange}\n        items={themeLabels}\n        {...rest}\n    />;\n};\n"]},"metadata":{},"sourceType":"module"}