{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var _jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/screens/DemoNotification/DemoNotification.tsx\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import*as Notifications from'expo-notifications';import React,{useEffect,useState}from'react';import{Button,Text,View}from\"../../components/UI\";import Platform from\"react-native-web/dist/exports/Platform\";import{defaultNotification,registerForPushNotificationsAsync,schedulePushNotification}from\"../../utils/expo-notification\";import{shortenTFunctionKey}from\"../../providers/i18n-labor\";import{useBunnyKit}from\"../../hooks/bunny-kit\";export default function DemoNotificationScreen(){var _useBunnyKit=useBunnyKit(),t=_useBunnyKit.t;var notificationReceivedListener={remove:function remove(){}};var notificationRespondedListener={remove:function remove(){}};var _useState=useState(''),_useState2=_slicedToArray(_useState,2),expoPushToken=_useState2[0],setExpoPushToken=_useState2[1];var _useState3=useState(defaultNotification),_useState4=_slicedToArray(_useState3,2),notification=_useState4[0],setNotification=_useState4[1];var i18nSysPrefix='sys';var stSys=shortenTFunctionKey(t,i18nSysPrefix);useEffect(function(){Notifications.setNotificationHandler({handleNotification:function handleNotification(){return _regeneratorRuntime.async(function handleNotification$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",{shouldShowAlert:true,shouldPlaySound:true,shouldSetBadge:false});case 1:case\"end\":return _context.stop();}}},null,null,null,Promise);}});registerForPushNotificationsAsync({failedToGetToken:stSys(\"failedToGetToken\"),mustUsePhysicalDevice:stSys(\"mustUsePhysicalDevice\")}).then(function(token){if(token){setExpoPushToken(token);}});notificationReceivedListener=Notifications.addNotificationReceivedListener(function(notification){setNotification(notification);});notificationRespondedListener=Notifications.addNotificationResponseReceivedListener(function(response){console.log('---response',response);});return function(){Notifications.removeNotificationSubscription(notificationReceivedListener);Notifications.removeNotificationSubscription(notificationRespondedListener);};},[]);return Platform.OS!=='web'?React.createElement(View,{style:{flex:1,alignItems:'center',justifyContent:'space-around'},__self:this,__source:{fileName:_jsxFileName,lineNumber:95,columnNumber:9}},React.createElement(Text,{__self:this,__source:{fileName:_jsxFileName,lineNumber:101,columnNumber:13}},\"Your expo push token: \",expoPushToken),React.createElement(View,{style:{alignItems:'center',justifyContent:'center'},__self:this,__source:{fileName:_jsxFileName,lineNumber:102,columnNumber:13}},React.createElement(Text,{__self:this,__source:{fileName:_jsxFileName,lineNumber:103,columnNumber:17}},\"Title: \",notification&&notification.request.content.title,\" \"),React.createElement(Text,{__self:this,__source:{fileName:_jsxFileName,lineNumber:104,columnNumber:17}},\"Body: \",notification&&notification.request.content.body),React.createElement(Text,{__self:this,__source:{fileName:_jsxFileName,lineNumber:105,columnNumber:17}},\"Data: \",notification&&JSON.stringify(notification.request.content.data))),React.createElement(Button,{title:\"Press to schedule a notification\",onPress:function _callee(){return _regeneratorRuntime.async(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(schedulePushNotification());case 2:case\"end\":return _context2.stop();}}},null,null,null,Promise);},__self:this,__source:{fileName:_jsxFileName,lineNumber:107,columnNumber:13}})):React.createElement(Text,{__self:this,__source:{fileName:_jsxFileName,lineNumber:114,columnNumber:10}},\"Dummy notification\");}","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/screens/DemoNotification/DemoNotification.tsx"],"names":["t","useBunnyKit","notificationReceivedListener","remove","notificationRespondedListener","expoPushToken","setExpoPushToken","useState","notification","setNotification","i18nSysPrefix","stSys","shortenTFunctionKey","useEffect","Notifications","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","registerForPushNotificationsAsync","failedToGetToken","mustUsePhysicalDevice","console","flex","alignItems","justifyContent","JSON","schedulePushNotification"],"mappings":"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","sourcesContent":["import * as Notifications from 'expo-notifications';\nimport React, {useEffect, useState} from 'react';\nimport {Button, Text, View} from '../../components/UI';\nimport {Platform} from 'react-native';\nimport {\n    defaultNotification,\n    registerForPushNotificationsAsync,\n    schedulePushNotification\n} from '../../utils/expo-notification';\nimport {shortenTFunctionKey} from '../../providers/i18n-labor';\nimport {useBunnyKit} from '../../hooks/bunny-kit';\n\n\nexport default function DemoNotificationScreen() {\n    const {t} = useBunnyKit();\n    let notificationReceivedListener = {\n        remove: () => {\n        }\n    };\n    let notificationRespondedListener = {\n        remove: () => {\n        }\n    };\n    const [expoPushToken, setExpoPushToken] = useState('');\n    const [notification, setNotification] = useState(defaultNotification);\n    // const notificationListener = useRef();\n    // const responseListener = useRef();\n\n    const i18nSysPrefix = 'sys';\n    const stSys = shortenTFunctionKey(t, i18nSysPrefix);\n\n    useEffect(() => {\n        // async function registerForPushNotificationsAsync() {\n        //     let token;\n        //     if (Constants.isDevice) {\n        //         const {status: existingStatus} = await Notifications.getPermissionsAsync();\n        //         let finalStatus = existingStatus;\n        //         if (existingStatus !== 'granted') {\n        //             const {status} = await Notifications.requestPermissionsAsync();\n        //             finalStatus = status;\n        //         }\n        //         if (finalStatus !== 'granted') {\n        //             alert('Failed to get push token for push notification!');\n        //             return;\n        //         }\n        //         token = (await Notifications.getExpoPushTokenAsync()).data;\n        //     } else {\n        //         alert('Must use physical device for Push Notifications');\n        //     }\n        //\n        //     if (Platform.OS === 'android') {\n        //         await Notifications.setNotificationChannelAsync('default', {\n        //             name: 'default',\n        //             importance: Notifications.AndroidImportance.MAX,\n        //             vibrationPattern: [0, 250, 250, 250],\n        //             lightColor: '#FF231F7C',\n        //         });\n        //     }\n        //     return token;\n        // }\n\n        Notifications.setNotificationHandler({\n            handleNotification: async () => ({\n                shouldShowAlert: true,\n                shouldPlaySound: true,\n                shouldSetBadge: false,\n            }),\n        });\n        registerForPushNotificationsAsync({\n            failedToGetToken: stSys(`failedToGetToken`),\n            mustUsePhysicalDevice: stSys(`mustUsePhysicalDevice`)\n        })\n            .then(token => {\n                if (token) {\n                    setExpoPushToken(token);\n                }\n            });\n\n        notificationReceivedListener = Notifications.addNotificationReceivedListener(notification => {\n            setNotification(notification);\n        });\n\n        notificationRespondedListener = Notifications.addNotificationResponseReceivedListener(response => {\n            console.log('---response', response);\n        });\n\n        return () => {\n            Notifications.removeNotificationSubscription(notificationReceivedListener);\n            Notifications.removeNotificationSubscription(notificationRespondedListener);\n        };\n    }, []);\n\n    return Platform.OS !== 'web' ? (\n        // <Text>Dummy notification</Text>\n        <View\n            style={{\n                flex: 1,\n                alignItems: 'center',\n                justifyContent: 'space-around',\n            }}>\n            <Text>Your expo push token: {expoPushToken}</Text>\n            <View style={{alignItems: 'center', justifyContent: 'center'}}>\n                <Text>Title: {notification && notification.request.content.title} </Text>\n                <Text>Body: {notification && notification.request.content.body}</Text>\n                <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n            </View>\n            <Button\n                title=\"Press to schedule a notification\"\n                onPress={async () => {\n                    await schedulePushNotification();\n                }}\n            />\n        </View>\n    ) : (<Text>Dummy notification</Text>);\n\n}\n"]},"metadata":{},"sourceType":"module"}