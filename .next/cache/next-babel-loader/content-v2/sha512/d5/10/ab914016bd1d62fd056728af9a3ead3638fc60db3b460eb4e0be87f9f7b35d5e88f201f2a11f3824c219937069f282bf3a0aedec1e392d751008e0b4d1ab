{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";var supportsFullscreenAPI=function supportsFullscreenAPI(element){if(element){return'requestFullscreen'in element;}else{return false;}};var supportsWebkitFullscreenAPI=function supportsWebkitFullscreenAPI(element){if(element){return'webkitEnterFullScreen'in element;}else{return false;}};var supportsMsFullscreenAPI=function supportsMsFullscreenAPI(element){if(element){return'msRequestFullscreen'in element;}else{return false;}};var supportsWebkitFullscreenChangeEvent=function supportsWebkitFullscreenChangeEvent(){return supportsEvent('video','webkitfullscreenchange');};function addEventListener(element,eventName,listener){element.addEventListener(eventName,listener);return function(){return element.removeEventListener(eventName,listener);};}var supportsEvent=function supportsEvent(elementName,eventName){var element=document.createElement(elementName);element.setAttribute('on'+eventName,'return;');return typeof element['on'+eventName]==='function';};export function requestFullscreen(element){var _element$webkitEnterF,_element$msRequestFul;return _regeneratorRuntime.async(function requestFullscreen$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!supportsFullscreenAPI(element)){_context.next=4;break;}return _context.abrupt(\"return\",element.requestFullscreen());case 4:if(!supportsWebkitFullscreenAPI(element)){_context.next=8;break;}(_element$webkitEnterF=element['webkitEnterFullScreen'])==null?void 0:_element$webkitEnterF.call(element);_context.next=13;break;case 8:if(!supportsMsFullscreenAPI(element)){_context.next=12;break;}(_element$msRequestFul=element['msRequestFullscreen'])==null?void 0:_element$msRequestFul.call(element);_context.next=13;break;case 12:throw new Error('Fullscreen not supported');case 13:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function exitFullscreen(element){var _element$webkitExitFu,_document$msExitFulls,_document;return _regeneratorRuntime.async(function exitFullscreen$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!supportsFullscreenAPI(element)){_context2.next=4;break;}return _context2.abrupt(\"return\",document.exitFullscreen());case 4:if(!supportsWebkitFullscreenAPI(element)){_context2.next=8;break;}(_element$webkitExitFu=element['webkitExitFullScreen'])==null?void 0:_element$webkitExitFu.call(element);_context2.next=13;break;case 8:if(!supportsMsFullscreenAPI(element)){_context2.next=12;break;}(_document$msExitFulls=(_document=document)['msExitFullscreen'])==null?void 0:_document$msExitFulls.call(_document);_context2.next=13;break;case 12:throw new Error('Fullscreen not supported');case 13:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function addFullscreenListener(element,callback){if(supportsFullscreenAPI(element)){return addEventListener(element,'fullscreenchange',function(event){return callback(document.fullscreenElement===event.target);});}else if(supportsWebkitFullscreenAPI(element)&&supportsWebkitFullscreenChangeEvent()){return addEventListener(element,'webkitfullscreenchange',function(event){return callback(document['webkitFullscreenElement']===event.target);});}else if(supportsWebkitFullscreenAPI(element)){var removeBeginListener=addEventListener(element,'webkitbeginfullscreen',function(){return callback(true);});var removeEndListener=addEventListener(element,'webkitendfullscreen',function(){return callback(false);});return function(){removeBeginListener();removeEndListener();};}else if(supportsMsFullscreenAPI(element)){return addEventListener(document,'MSFullscreenChange',function(event){return callback(document['msFullscreenElement']===event.target);});}else{return function(){};}}","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/packages/expo-av/src/FullscreenUtils.web.ts"],"names":["supportsFullscreenAPI","supportsWebkitFullscreenAPI","supportsMsFullscreenAPI","supportsWebkitFullscreenChangeEvent","supportsEvent","element","document","addEventListener","callback","event","removeBeginListener","removeEndListener"],"mappings":"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","sourcesContent":["/**\n * Detect if the browser supports the standard fullscreen API on the given\n * element:\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nconst supportsFullscreenAPI = (element: HTMLMediaElement): boolean => {\n    if (element) {\n        return 'requestFullscreen' in element;\n    } else {\n        return false\n    }\n}\n\n\n/**\n * Detect if the browser supports the non-standard webkit fullscreen API on the\n * given element (looking at you, Safari).\n */\nconst supportsWebkitFullscreenAPI = (element: HTMLMediaElement): boolean => {\n    if (element) {\n        return 'webkitEnterFullScreen' in element;\n    } else {\n        return false\n    }\n}\n\n\n/**\n * Detect if the browser supports the non-standard ms fullscreen API on the\n * given element (looking at you, IE11).\n */\nconst supportsMsFullscreenAPI = (element: HTMLMediaElement): boolean => {\n    if (element) {\n        return 'msRequestFullscreen' in element;\n    } else {\n        return false\n    }\n}\n\n\n/**\n * Detect if the browser supports the `webkitFullscreenChange` event. This is\n * a non-standard event added to Safari on macOS by Apple:\n * https://developer.apple.com/documentation/webkitjs/document/1631998-onwebkitfullscreenchange\n */\nconst supportsWebkitFullscreenChangeEvent = (): boolean =>\n    supportsEvent('video', 'webkitfullscreenchange');\n\n/**\n * A helper that adds an event listener to an element. The key value-add over\n * the native addEventListener is that it returns a function that will remove\n * the event listener. This allows the setup and teardown logic for a listener\n * to be easily colocated.\n */\nfunction addEventListener(\n    element: Document | HTMLElement,\n    eventName: string,\n    listener: EventListenerOrEventListenerObject\n): () => any {\n    element.addEventListener(eventName, listener);\n    return () => element.removeEventListener(eventName, listener);\n}\n\n/**\n * Detect if the browser supports an event on a particular element type.\n */\nconst supportsEvent = (elementName: string, eventName: string): boolean => {\n    // Detect if the browser supports the event by attempting to add a handler\n    // attribute for that event to the provided element. If the event is supported\n    // then the browser will accept the attribute and report the type of the\n    // attribute as \"function\". See: https://stackoverflow.com/a/4562426/2747759\n    const element = document.createElement(elementName);\n    element.setAttribute('on' + eventName, 'return;');\n    // @ts-ignore\n    return typeof element['on' + eventName] === 'function';\n};\n\n/**\n * Switches a video element into fullscreen.\n */\nexport async function requestFullscreen(element: HTMLMediaElement): Promise<void> {\n    if (supportsFullscreenAPI(element)) {\n        return element.requestFullscreen();\n    } else if (supportsWebkitFullscreenAPI(element)) {\n        // This API is synchronous so no need to return the result\n        // @ts-ignore\n        element['webkitEnterFullScreen']?.();\n    } else if (supportsMsFullscreenAPI(element)) {\n        // This API is synchronous so no need to return the result\n        // @ts-ignore\n        element['msRequestFullscreen']?.();\n    } else {\n        throw new Error('Fullscreen not supported');\n    }\n}\n\n/**\n * Switches a video element out of fullscreen.\n */\n\nexport async function exitFullscreen(element: HTMLMediaElement): Promise<void> {\n    if (supportsFullscreenAPI(element)) {\n        return document.exitFullscreen();\n    } else if (supportsWebkitFullscreenAPI(element)) {\n        // This API is synchronous so no need to return the result\n        // @ts-ignore\n        element['webkitExitFullScreen']?.();\n    } else if (supportsMsFullscreenAPI(element)) {\n        // This API is synchronous so no need to return the result\n        // @ts-ignore\n        document['msExitFullscreen']?.();\n    } else {\n        throw new Error('Fullscreen not supported');\n    }\n}\n\n/**\n * Listens for fullscreen change events on a video element. The provided\n * callback will be called with `true` when the video is switched into\n * fullscreen and `false` when the video is switched out of fullscreen.\n */\nexport function addFullscreenListener(\n    element: HTMLVideoElement,\n    callback: (isFullscreen: boolean) => void\n): () => any {\n    if (supportsFullscreenAPI(element)) {\n        // Used by browsers that support the official spec\n        return addEventListener(element, 'fullscreenchange', event =>\n            callback(document.fullscreenElement === event.target)\n        );\n    } else if (supportsWebkitFullscreenAPI(element) && supportsWebkitFullscreenChangeEvent()) {\n        // Used by Safari on macOS\n        return addEventListener(element, 'webkitfullscreenchange', event => {\n                // @ts-ignore\n                return callback(document['webkitFullscreenElement'] === event.target)\n            }\n        );\n    } else if (supportsWebkitFullscreenAPI(element)) {\n        // Used by Safari on iOS\n        const removeBeginListener = addEventListener(element, 'webkitbeginfullscreen', () =>\n            callback(true)\n        );\n        const removeEndListener = addEventListener(element, 'webkitendfullscreen', () =>\n            callback(false)\n        );\n        return () => {\n            removeBeginListener();\n            removeEndListener();\n        };\n    } else if (supportsMsFullscreenAPI(element)) {\n        // Used by IE11\n        return addEventListener(document, 'MSFullscreenChange', event => {\n                // @ts-ignore\n                return callback(document['msFullscreenElement'] === event.target)\n            }\n        );\n    } else {\n        return () => {\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}