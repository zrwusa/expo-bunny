{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";export var DoublyLinkedListNode=function(){function DoublyLinkedListNode(nodeValue){_classCallCheck(this,DoublyLinkedListNode);this._value=nodeValue;this._next=undefined;this._prev=undefined;}_createClass(DoublyLinkedListNode,[{key:\"value\",get:function get(){return this._value;},set:function set(v){this._value=v;}},{key:\"next\",get:function get(){return this._next;},set:function set(v){this._next=v;}},{key:\"previous\",get:function get(){return this._prev;},set:function set(v){this._prev=v;}}]);return DoublyLinkedListNode;}();export var DoublyLinkedList=function(){function DoublyLinkedList(){_classCallCheck(this,DoublyLinkedList);this._length=0;this.head=undefined;this.tail=undefined;this.length=0;}_createClass(DoublyLinkedList,[{key:\"head\",get:function get(){return this._head;},set:function set(node){this._head=node;}},{key:\"tail\",get:function get(){return this._tail;},set:function set(node){this._tail=node;}},{key:\"length\",get:function get(){return this._length;},set:function set(v){this._length=v;}},{key:\"push\",value:function push(value){var newNode=new DoublyLinkedListNode(value);if(this.length===0){this.head=newNode;this.tail=newNode;}else{if(this.tail)this.tail.next=newNode;newNode.previous=this.tail;this.tail=newNode;}this.length++;return true;}},{key:\"pop\",value:function pop(){if(this.length===0)return undefined;var poppedNode=this.tail;if(this.length===1){this.head=undefined;this.tail=undefined;}else{this.tail=poppedNode==null?void 0:poppedNode.previous;if(this.tail)this.tail.next=undefined;if(poppedNode)poppedNode.previous=undefined;}this.length--;return poppedNode;}},{key:\"shift\",value:function shift(){if(this.length===0)return undefined;var oldHead=this.head;if(this.length===1){this.head=undefined;this.tail=undefined;}else{this.head=oldHead==null?void 0:oldHead.next;if(this.head)this.head.previous=undefined;if(oldHead)oldHead.next=undefined;}this.length--;return oldHead==null?void 0:oldHead.value;}},{key:\"unshift\",value:function unshift(value){var newNode=new DoublyLinkedListNode(value);if(this.length===0){this.head=newNode;this.tail=newNode;}else{if(this.head)this.head.previous=newNode;newNode.next=this.head;this.head=newNode;}this.length++;return true;}},{key:\"get\",value:function get(index){if(index<0||index>=this.length)return undefined;var count,current;if(index<=this.length/2){count=0;current=this.head;while(count!==index){var _current;current=(_current=current)==null?void 0:_current.next;count++;}}else{count=this.length-1;current=this.tail;while(count!==index){var _current2;current=(_current2=current)==null?void 0:_current2.previous;count--;}}return current;}},{key:\"set\",value:function set(index,value){var foundNode=this.get(index);if(foundNode!=null){foundNode.value=value;return true;}return false;}},{key:\"insert\",value:function insert(index,value){if(index<0||index>this.length)return false;if(index===0)return!!this.unshift(value);if(index===this.length)return!!this.push(value);var newNode=new DoublyLinkedListNode(value);var prevNode=this.get(index-1);var nextNode=prevNode==null?void 0:prevNode.next;if(prevNode)prevNode.next=newNode;newNode.previous=prevNode;newNode.next=nextNode;if(nextNode)nextNode.previous=newNode;this.length++;return true;}},{key:\"remove\",value:function remove(index){if(index<0||index>this._length-1){return undefined;}else if(index===0){return this.shift();}else if(index===this._length-1){var _this$pop;return(_this$pop=this.pop())==null?void 0:_this$pop.value;}else{var prevNode=this.get(index-1);var removeNode=prevNode==null?void 0:prevNode.next;var nextNode=removeNode==null?void 0:removeNode.next;if(prevNode)prevNode.next=nextNode;if(nextNode)nextNode.previous=prevNode;if(removeNode)removeNode.next=undefined;if(removeNode)removeNode.previous=undefined;this._length--;return removeNode==null?void 0:removeNode.value;}}}]);return DoublyLinkedList;}();","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/utils/data-structures/linked-list/doubly-linked-list.ts"],"names":["DoublyLinkedListNode","DoublyLinkedList","_length","newNode","poppedNode","oldHead","index","count","current","foundNode","prevNode","nextNode","removeNode"],"mappings":"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","sourcesContent":["export class DoublyLinkedListNode<T> {\r\n    private _value: T;\r\n    public get value(): T {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(v: T) {\r\n        this._value = v;\r\n    }\r\n\r\n    private _next: DoublyLinkedListNode<T> | undefined;\r\n    public get next(): DoublyLinkedListNode<T> | undefined {\r\n        return this._next;\r\n    }\r\n\r\n    public set next(v: DoublyLinkedListNode<T> | undefined) {\r\n        this._next = v;\r\n    }\r\n\r\n    private _prev: DoublyLinkedListNode<T> | undefined;\r\n\r\n    public get previous(): DoublyLinkedListNode<T> | undefined {\r\n        return this._prev;\r\n    }\r\n\r\n    public set previous(v: DoublyLinkedListNode<T> | undefined) {\r\n        this._prev = v;\r\n    }\r\n\r\n    constructor(nodeValue: T) {\r\n        this._value = nodeValue;\r\n        this._next = undefined;\r\n        this._prev = undefined;\r\n    }\r\n}\r\n\r\nexport class DoublyLinkedList<T> {\r\n    //#region \" Properties \"\r\n\r\n    private _head: DoublyLinkedListNode<T> | undefined;\r\n    public get head(): DoublyLinkedListNode<T> | undefined {\r\n        return this._head;\r\n    }\r\n\r\n    public set head(node: DoublyLinkedListNode<T> | undefined) {\r\n        this._head = node;\r\n    }\r\n\r\n    private _tail: DoublyLinkedListNode<T> | undefined;\r\n    public get tail(): DoublyLinkedListNode<T> | undefined {\r\n        return this._tail;\r\n    }\r\n\r\n    public set tail(node: DoublyLinkedListNode<T> | undefined) {\r\n        this._tail = node;\r\n    }\r\n\r\n    private _length: number = 0;\r\n    public get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    public set length(v: number) {\r\n        this._length = v;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    constructor() {\r\n        this.head = undefined;\r\n        this.tail = undefined;\r\n        this.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Adds a node to the end of the linked list\r\n     * @param value Value to be stored in the Doubly linked list node\r\n     */\r\n    push(value: T): boolean {\r\n        let newNode = new DoublyLinkedListNode(value);\r\n        if (this.length === 0) {\r\n            this.head = newNode;\r\n            this.tail = newNode;\r\n        } else {\r\n            if (this.tail) this.tail.next = newNode;\r\n            newNode.previous = this.tail;\r\n            this.tail = newNode;\r\n        }\r\n        this.length++;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes a node at the end of the linked list and will return the node value\r\n     */\r\n    pop(): DoublyLinkedListNode<T> | undefined {\r\n        if (this.length === 0) return undefined;\r\n        let poppedNode = this.tail;\r\n        if (this.length === 1) {\r\n            this.head = undefined;\r\n            this.tail = undefined;\r\n        } else {\r\n            this.tail = poppedNode?.previous;\r\n            if (this.tail) this.tail.next = undefined;\r\n            if (poppedNode) poppedNode.previous = undefined;\r\n        }\r\n        this.length--;\r\n        return poppedNode;\r\n    }\r\n\r\n    /**\r\n     * Removes a node form the beginning of the linked list and will return the node value\r\n     */\r\n    shift(): T | undefined {\r\n        if (this.length === 0) return undefined;\r\n        let oldHead = this.head;\r\n        if (this.length === 1) {\r\n            this.head = undefined;\r\n            this.tail = undefined;\r\n        } else {\r\n            this.head = oldHead?.next;\r\n            if (this.head) this.head.previous = undefined;\r\n            if (oldHead) oldHead.next = undefined;\r\n        }\r\n        this.length--;\r\n        return oldHead?.value;\r\n    }\r\n\r\n    /**\r\n     * Adds a node at the beginning of the linked list\r\n     * @param value Value to be stored at the beginning of the linked list\r\n     */\r\n    unshift(value: T): boolean {\r\n        let newNode = new DoublyLinkedListNode(value);\r\n        if (this.length === 0) {\r\n            this.head = newNode;\r\n            this.tail = newNode;\r\n        } else {\r\n            if (this.head) this.head.previous = newNode;\r\n            newNode.next = this.head;\r\n            this.head = newNode;\r\n        }\r\n        this.length++;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns the node at the specified index of the linked list.\r\n     * If index = 0; first element in the list is returned.\r\n     * If index = 3; fourth element in the list is returned.\r\n     * @param index Index of the node to be retrieved\r\n     */\r\n    get(index: number): DoublyLinkedListNode<T> | undefined {\r\n        if (index < 0 || index >= this.length) return undefined;\r\n        let count, current;\r\n        if (index <= this.length / 2) {\r\n            count = 0;\r\n            current = this.head;\r\n            while (count !== index) {\r\n                current = current?.next;\r\n                count++;\r\n            }\r\n        } else {\r\n            count = this.length - 1;\r\n            current = this.tail;\r\n            while (count !== index) {\r\n                current = current?.previous;\r\n                count--;\r\n            }\r\n        }\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     * Updates the value of the node at the specified index.\r\n     * If index = 0; Value of the first element in the list is updated.\r\n     * If index = 3; Value of the fourth element in the list is updated.\r\n     * @param index Index of the node to be updated\r\n     * @param value New value of the node\r\n     */\r\n    set(index: number, value: T): boolean {\r\n        let foundNode = this.get(index);\r\n        if (foundNode != null) {\r\n            foundNode.value = value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new node at the specified index.\r\n     * @param index Index at which the new node has to be inserted\r\n     * @param value Value of the new node to be inserted\r\n     */\r\n    insert(index: number, value: T): boolean {\r\n        if (index < 0 || index > this.length) return false;\r\n        if (index === 0) return !!this.unshift(value);\r\n        if (index === this.length) return !!this.push(value);\r\n\r\n        let newNode = new DoublyLinkedListNode(value);\r\n        let prevNode = this.get(index - 1);\r\n        let nextNode = prevNode?.next;\r\n\r\n        if (prevNode) prevNode.next = newNode;\r\n        newNode.previous = prevNode;\r\n\r\n        newNode.next = nextNode;\r\n        if (nextNode) nextNode.previous = newNode;\r\n        this.length++;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes a node at the specified index and returns its value.\r\n     * @param index Index at which the node has to be removed.\r\n     */\r\n    remove(index: number): T | undefined {\r\n        if (index < 0 || index > this._length - 1) {\r\n            return undefined;\r\n        } else if (index === 0) {\r\n            return this.shift();\r\n        } else if (index === this._length - 1) {\r\n            return this.pop()?.value;\r\n        } else {\r\n            const prevNode = this.get(index - 1);\r\n            const removeNode = prevNode?.next;\r\n            const nextNode = removeNode?.next;\r\n\r\n            if (prevNode) prevNode.next = nextNode;\r\n            if (nextNode) nextNode.previous = prevNode;\r\n\r\n            if (removeNode) removeNode.next = undefined;\r\n            if (removeNode) removeNode.previous = undefined;\r\n\r\n            this._length--;\r\n            return removeNode?.value;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}