{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";var _this=this,_jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/providers/size-labor/withSizeLabor.tsx\";import{useSizeLabor}from\"./useSizeLabor\";import React from'react';export var withSizeLabor=function withSizeLabor(WrappedComponent){var displayName=WrappedComponent.displayName||WrappedComponent.name||'Component';var ComponentWithSizeLabor=function ComponentWithSizeLabor(props){var sizeLabor=useSizeLabor();return React.createElement(WrappedComponent,_extends({},props,{sizeLabor:sizeLabor,__self:_this,__source:{fileName:_jsxFileName,lineNumber:20,columnNumber:16}}));};ComponentWithSizeLabor.displayName=\"withSizeLabor(\"+displayName+\")\";return ComponentWithSizeLabor;};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/providers/size-labor/withSizeLabor.tsx"],"names":["withSizeLabor","displayName","WrappedComponent","ComponentWithSizeLabor","sizeLabor","useSizeLabor"],"mappings":"sKAAA,OAAA,YAAA,sBACA,MAAA,CAAA,KAAA,KAAA,OAAA,CAOA,MAAO,IAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAA,gBAAA,CAExB,CAED,GAAMC,CAAAA,WAAW,CAAGC,gBAAgB,CAAhBA,WAAAA,EAAgCA,gBAAgB,CAAhDA,IAAAA,EAApB,WAAA,CAGA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAAA,KAAA,CAAyC,CAEpE,GAAMC,CAAAA,SAAS,CAAGC,YAAlB,EAAA,CAEA,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAoC,SAAS,CAA7C,SAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAP,CAJJ,CAAA,CAOAF,sBAAsB,CAAtBA,WAAAA,CAAAA,iBAAAA,WAAAA,CAAAA,GAAAA,CAEA,MAAA,CAAA,sBAAA,CAhBG,CAAA","sourcesContent":["import {useSizeLabor} from './useSizeLabor';\nimport React from 'react';\nimport {SizeLabor} from '../../types';\n\nexport interface WithSizeLabor {\n    sizeLabor: SizeLabor;\n}\n\nexport const withSizeLabor = <T extends WithSizeLabor = WithSizeLabor>(\n    WrappedComponent: React.ComponentType<T>\n) => {\n    // Try to create a nice displayName for React Dev Tools.\n    const displayName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n    // Creating the inner component. The calculated Props type here is the where the magic happens.\n    const ComponentWithSizeLabor = (props: Omit<T, keyof WithSizeLabor>) => {\n        // Fetch the props you want to inject. This could be done with context instead.\n        const sizeLabor = useSizeLabor();\n        // props comes afterwards so the can override the default ones.\n        return <WrappedComponent {...(props as T)} sizeLabor={sizeLabor}/>;\n    };\n\n    ComponentWithSizeLabor.displayName = `withSizeLabor(${displayName})`;\n\n    return ComponentWithSizeLabor;\n};\n"]},"metadata":{},"sourceType":"module"}