{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import{AVLTree}from\"../../../data-structures/binary-tree/avl-tree\";import{runAlgorithm}from\"../../helpers\";import{DeepProxy}from'@qiwi/deep-proxy';import{wait,WaitManager}from\"../../../utils\";import{testBSTCase1}from\"../bst\";var avlTree=new AVLTree();var performanceAVLTree=function performanceAVLTree(){for(var i=0;i<1e+5;i++){avlTree.insert(i);}};var performanceAVLTreeIsBST=function performanceAVLTreeIsBST(){return avlTree.isBST();};var waitManager=new WaitManager(10);var time1=waitManager.time1,time2=waitManager.time2,time3=waitManager.time3;export var testAVLTree=function testAVLTree(arr,proxyHandler){var arrCopy,rest,proxyVariables,_iterator,_step,i,node6,getNodeById,getNodesByCount,getNodesByLeftSum,getMinNodeByRoot,node15,getMinNodeBySpecificNode,subTreeSum,lesserSum,subTreeAdd,node11,allGreaterNodesAdd;return _regeneratorRuntime.async(function testAVLTree$(_context){while(1){switch(_context.prev=_context.next){case 0:arrCopy=_toConsumableArray(arr);rest=arrCopy.splice(1);proxyVariables=new DeepProxy({avl:new AVLTree(true,arrCopy[0],arrCopy[0])},proxyHandler);_iterator=_createForOfIteratorHelperLoose(rest);case 4:if((_step=_iterator()).done){_context.next=11;break;}i=_step.value;proxyVariables.avl.insert(i,i);_context.next=9;return _regeneratorRuntime.awrap(wait(time1));case 9:_context.next=4;break;case 11:node6=proxyVariables.avl.getNode(6);console.log('getHeight(getNode 6)',node6&&proxyVariables.avl.getHeight(node6));console.log('getDepth(getNode 6)',node6&&proxyVariables.avl.getDepth(node6));_context.next=16;return _regeneratorRuntime.awrap(wait(time2));case 16:getNodeById=proxyVariables.avl.getNode(10,'id');console.log('getNode, 10, id',getNodeById);_context.next=20;return _regeneratorRuntime.awrap(wait(time2));case 20:getNodesByCount=proxyVariables.avl.getNodes(1,'count');console.log('getNodes, 1, count',getNodesByCount);_context.next=24;return _regeneratorRuntime.awrap(wait(time2));case 24:getNodesByLeftSum=proxyVariables.avl.getNodes(2,'allLesserSum');console.log('getNodes, 2, allLesserSum',getNodesByLeftSum);_context.next=28;return _regeneratorRuntime.awrap(wait(time2));case 28:getMinNodeByRoot=proxyVariables.avl.getMinNode();console.log('getMinNode',getMinNodeByRoot);_context.next=32;return _regeneratorRuntime.awrap(wait(time2));case 32:node15=proxyVariables.avl.getNode(15);getMinNodeBySpecificNode=node15&&proxyVariables.avl.getMinNode(node15);console.log('getMinNode, 15',getMinNodeBySpecificNode);_context.next=37;return _regeneratorRuntime.awrap(wait(time2));case 37:subTreeSum=node15&&proxyVariables.avl.subTreeSum(node15);console.log('subTreeSum, 15',subTreeSum);_context.next=41;return _regeneratorRuntime.awrap(wait(time2));case 41:lesserSum=proxyVariables.avl.lesserSum(10);console.log('lesserSum, 10',lesserSum);_context.next=45;return _regeneratorRuntime.awrap(wait(time2));case 45:subTreeAdd=node15&&proxyVariables.avl.subTreeAdd(node15,1,'count');console.log('subTreeAdd, getNode(15)',subTreeAdd);_context.next=49;return _regeneratorRuntime.awrap(wait(time3));case 49:node11=proxyVariables.avl.getNode(11);allGreaterNodesAdd=node11&&proxyVariables.avl.allGreaterNodesAdd(node11,2,'count');console.log('allGreaterNodesAdd, getNode(11), 2, count',allGreaterNodesAdd);_context.next=54;return _regeneratorRuntime.awrap(wait(time3));case 54:console.log('DFS ,in, node',proxyVariables.avl.DFS('in','node'));console.log('waiting for balancing');_context.next=58;return _regeneratorRuntime.awrap(wait(time3));case 58:proxyVariables.avl.balance();console.log('balanced BFS, node',proxyVariables.avl.BFS('node'));_context.next=62;return _regeneratorRuntime.awrap(wait(time3));case 62:console.log('remove, 11',proxyVariables.avl.remove(11));console.log('isBalance',proxyVariables.avl.isAVLBalanced());console.log('getHeight, getNode(15)',node15&&proxyVariables.avl.getHeight(node15));_context.next=67;return _regeneratorRuntime.awrap(wait(time3));case 67:console.log('remove, 1',proxyVariables.avl.remove(1));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=72;return _regeneratorRuntime.awrap(wait(time3));case 72:console.log('remove, 4',proxyVariables.avl.remove(4));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=77;return _regeneratorRuntime.awrap(wait(time3));case 77:console.log('remove, 10',proxyVariables.avl.remove(10));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=82;return _regeneratorRuntime.awrap(wait(time3));case 82:console.log('remove, 15',proxyVariables.avl.remove(15));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=87;return _regeneratorRuntime.awrap(wait(time3));case 87:console.log('remove, 5',proxyVariables.avl.remove(5));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=92;return _regeneratorRuntime.awrap(wait(time3));case 92:console.log('remove, 13',proxyVariables.avl.remove(13));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=97;return _regeneratorRuntime.awrap(wait(time3));case 97:console.log('remove, 3',proxyVariables.avl.remove(3));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=102;return _regeneratorRuntime.awrap(wait(time3));case 102:console.log('remove, 8',proxyVariables.avl.remove(8));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=107;return _regeneratorRuntime.awrap(wait(time3));case 107:console.log('remove, 6',proxyVariables.avl.remove(6));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=112;return _regeneratorRuntime.awrap(wait(time3));case 112:console.log('remove, 7',proxyVariables.avl.remove(7));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=117;return _regeneratorRuntime.awrap(wait(time3));case 117:console.log('remove, 9',proxyVariables.avl.remove(9));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=122;return _regeneratorRuntime.awrap(wait(time3));case 122:console.log('remove, 14',proxyVariables.avl.remove(14));console.log('isAVLBalanced',proxyVariables.avl.isAVLBalanced());console.log('getHeight',proxyVariables.avl.getHeight());_context.next=127;return _regeneratorRuntime.awrap(wait(time3));case 127:_context.next=129;return _regeneratorRuntime.awrap(wait(time1));case 129:console.log('isAVLBalanced()',proxyVariables.avl.isAVLBalanced());_context.next=132;return _regeneratorRuntime.awrap(wait(time1));case 132:console.log('BFS',proxyVariables.avl.BFS());_context.next=135;return _regeneratorRuntime.awrap(wait(time1));case 135:console.log('BFS, node',proxyVariables.avl.BFS('node'));return _context.abrupt(\"return\",proxyVariables.avl);case 137:case\"end\":return _context.stop();}}},null,null,null,Promise);};var runTestAVLTree=function runTestAVLTree(){return _regeneratorRuntime.async(function runTestAVLTree$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(runAlgorithm.apply(void 0,[testAVLTree,false].concat(_toConsumableArray(testBSTCase1))));case 2:case\"end\":return _context2.stop();}}},null,null,null,Promise);};","map":null,"metadata":{},"sourceType":"module"}