{"ast":null,"code":"import{applyMiddleware,combineReducers,createStore}from'redux';import{createDynamicMiddlewares}from\"../../packages/redux-dynamic-middlewares/src\";import{blStateReducer,demoCryptoCurrencyReducer,demoHelloStateReducer,demoMapStateReducer,demoSagaReducer,demoThunkStateReducer,sysStateReducer}from\"./reducers\";import{firebase}from\"../firebase/firebase\";import{firebaseReducer}from'react-redux-firebase';import{createFirestoreInstance,firestoreReducer}from'redux-firestore';export var reduxMiddlewareManager=createDynamicMiddlewares();var rootReducer=combineReducers({demoHelloState:demoHelloStateReducer,demoThunkState:demoThunkStateReducer,demoMapState:demoMapStateReducer,sysState:sysStateReducer,bizLogicResultState:blStateReducer,demoSagaState:demoSagaReducer,demoCryptoCurrencyState:demoCryptoCurrencyReducer,firebaseState:firebaseReducer,firestoreState:firestoreReducer});export var store=createStore(rootReducer,applyMiddleware(reduxMiddlewareManager.enhancer));var rrfConfig={userProfile:'users'};export var rrfProps={firebase:firebase,config:rrfConfig,dispatch:store.dispatch,createFirestoreInstance:createFirestoreInstance};export default store;","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/store/store.ts"],"names":["reduxMiddlewareManager","createDynamicMiddlewares","rootReducer","combineReducers","demoHelloState","demoThunkState","demoMapState","sysState","bizLogicResultState","demoSagaState","demoCryptoCurrencyState","firebaseState","firestoreState","firestoreReducer","store","createStore","applyMiddleware","rrfConfig","userProfile","rrfProps","firebase","config","dispatch","createFirestoreInstance"],"mappings":"AAAA,OAAA,eAAA,CAAA,eAAA,CAAA,WAAA,KAAA,OAAA,CAEA,OAAA,wBAAA,oDACA,OAAA,cAAA,CAAA,yBAAA,CAAA,qBAAA,CAAA,mBAAA,CAAA,eAAA,CAAA,qBAAA,CAAA,eAAA,kBASA,OAAA,QAAA,4BACA,OAAA,eAAA,KAAA,sBAAA,CAEA,OAAA,uBAAA,CAAA,gBAAA,KAAA,iBAAA,CAEA,MAAO,IAAMA,CAAAA,sBAAsB,CAAGC,wBAA/B,EAAA,CACP,GAAMC,CAAAA,WAAW,CAAGC,eAAe,CAAY,CAC3CC,cAAc,CAD6B,qBAAA,CAE3CC,cAAc,CAF6B,qBAAA,CAG3CC,YAAY,CAH+B,mBAAA,CAI3CC,QAAQ,CAJmC,eAAA,CAK3CC,mBAAmB,CALwB,cAAA,CAM3CC,aAAa,CAN8B,eAAA,CAO3CC,uBAAuB,CAPoB,yBAAA,CAQ3CC,aAAa,CAR8B,eAAA,CAS3CC,cAAc,CAAEC,gBAT2B,CAAZ,CAAnC,CAYA,MAAO,IAAMC,CAAAA,KAAK,CAAGC,WAAW,CAAA,WAAA,CAAcC,eAAe,CAAChB,sBAAsB,CAA7E,QAAsD,CAA7B,CAAzB,CAGP,GAAMiB,CAAAA,SAAS,CAAG,CACdC,WAAW,CAAE,OADC,CAAlB,CAKA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,CACpBC,QAAQ,CADY,QAAA,CAEpBC,MAAM,CAFc,SAAA,CAGpBC,QAAQ,CAAER,KAAK,CAHK,QAAA,CAIpBS,uBAAuB,CAAvBA,uBAJoB,CAAjB,CAOP,cAAA,CAAA,KAAA","sourcesContent":["import {applyMiddleware, combineReducers, createStore} from 'redux';\n\nimport {createDynamicMiddlewares} from '../../packages/redux-dynamic-middlewares/src';\nimport {\n    blStateReducer,\n    demoCryptoCurrencyReducer,\n    demoHelloStateReducer,\n    demoMapStateReducer,\n    demoSagaReducer,\n    demoThunkStateReducer,\n    sysStateReducer\n} from './reducers';\nimport {firebase} from '../firebase/firebase';\nimport {firebaseReducer} from 'react-redux-firebase';\nimport {RootState} from '../types';\nimport {createFirestoreInstance, firestoreReducer} from 'redux-firestore';\n\nexport const reduxMiddlewareManager = createDynamicMiddlewares();\nconst rootReducer = combineReducers<RootState>({\n    demoHelloState: demoHelloStateReducer,\n    demoThunkState: demoThunkStateReducer,\n    demoMapState: demoMapStateReducer,\n    sysState: sysStateReducer,\n    bizLogicResultState: blStateReducer,\n    demoSagaState: demoSagaReducer,\n    demoCryptoCurrencyState: demoCryptoCurrencyReducer,\n    firebaseState: firebaseReducer,\n    firestoreState: firestoreReducer\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(reduxMiddlewareManager.enhancer));\n\n// react-redux-firebase config\nconst rrfConfig = {\n    userProfile: 'users'\n    // useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\n};\n\nexport const rrfProps = {\n    firebase: firebase,\n    config: rrfConfig,\n    dispatch: store.dispatch,\n    createFirestoreInstance // <- needed if using firestore\n};\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}