{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import{DeepProxy}from'@qiwi/deep-proxy';import{BinaryTree}from\"../../../data-structures/binary-tree\";import{wait,WaitManager}from\"../../../utils\";import{runAlgorithm}from\"../../helpers\";import{testBSTCase1}from\"../bst\";var waitManager=new WaitManager(10);var time1=waitManager.time1,time2=waitManager.time2,time3=waitManager.time3;export function testBinaryTree(arr,proxyHandler){var arrCopy,rest,proxyVariables,_iterator,_step,i,node6,getNodeById,getNodesByCount,getNodesByLeftSum,node15,subTreeSum;return _regeneratorRuntime.async(function testBinaryTree$(_context){while(1){switch(_context.prev=_context.next){case 0:arrCopy=_toConsumableArray(arr);rest=arrCopy.splice(1);proxyVariables=new DeepProxy({binaryTree:new BinaryTree(arrCopy[0],arrCopy[0])},proxyHandler);_iterator=_createForOfIteratorHelperLoose(rest);case 4:if((_step=_iterator()).done){_context.next=11;break;}i=_step.value;console.log(\"insert \"+i,proxyVariables.binaryTree.insert(i,i));_context.next=9;return _regeneratorRuntime.awrap(wait(time1));case 9:_context.next=4;break;case 11:node6=proxyVariables.binaryTree.getNode(6);console.log('getHeight(getNode 6)',node6&&proxyVariables.binaryTree.getHeight(node6));console.log('getDepth(getNode 6)',node6&&proxyVariables.binaryTree.getDepth(node6));_context.next=16;return _regeneratorRuntime.awrap(wait(time2));case 16:getNodeById=proxyVariables.binaryTree.getNode(10,'id');console.log('getNode, 10, id',getNodeById);_context.next=20;return _regeneratorRuntime.awrap(wait(time2));case 20:getNodesByCount=proxyVariables.binaryTree.getNodes(1,'count');console.log('getNodes, 1, count',getNodesByCount);_context.next=24;return _regeneratorRuntime.awrap(wait(time2));case 24:getNodesByLeftSum=proxyVariables.binaryTree.getNodes(2,'allLesserSum');console.log('getNodes, 2, allLesserSum',getNodesByLeftSum);_context.next=28;return _regeneratorRuntime.awrap(wait(time2));case 28:node15=proxyVariables.binaryTree.getNode(15);subTreeSum=node15&&proxyVariables.binaryTree.subTreeSum(node15);console.log('subTreeSum, 15',subTreeSum);_context.next=33;return _regeneratorRuntime.awrap(wait(time3));case 33:console.log('DFS ,in, node',proxyVariables.binaryTree.DFS('in','node'));_context.next=36;return _regeneratorRuntime.awrap(wait(time1));case 36:console.log('DFSIterative, in',proxyVariables.binaryTree.DFSIterative('in'));_context.next=39;return _regeneratorRuntime.awrap(wait(time3));case 39:console.log('DFS ,pre, node',proxyVariables.binaryTree.DFS('pre','node'));_context.next=42;return _regeneratorRuntime.awrap(wait(time1));case 42:console.log('DFSIterative, pre',proxyVariables.binaryTree.DFSIterative('pre'));_context.next=45;return _regeneratorRuntime.awrap(wait(time1));case 45:console.log('morris, in, node',proxyVariables.binaryTree.morris('in','node'));_context.next=48;return _regeneratorRuntime.awrap(wait(time1));case 48:console.log('morris, pre',proxyVariables.binaryTree.morris('pre'));_context.next=51;return _regeneratorRuntime.awrap(wait(time1));case 51:console.log('morris, post',proxyVariables.binaryTree.morris('post'));_context.next=54;return _regeneratorRuntime.awrap(wait(time3));case 54:console.log('DFS ,post, node',proxyVariables.binaryTree.DFS('post','node'));_context.next=57;return _regeneratorRuntime.awrap(wait(time1));case 57:console.log('DFSIterative, post, node',proxyVariables.binaryTree.DFSIterative('post','node'));console.log('waiting for balancing');_context.next=61;return _regeneratorRuntime.awrap(wait(time3));case 61:_context.next=63;return _regeneratorRuntime.awrap(wait(time1));case 63:console.log('BFS',proxyVariables.binaryTree.BFS());_context.next=66;return _regeneratorRuntime.awrap(wait(time1));case 66:console.log('BFS, node',proxyVariables.binaryTree.BFS('node'));return _context.abrupt(\"return\",proxyVariables.binaryTree);case 68:case\"end\":return _context.stop();}}},null,null,null,Promise);}var runTestBinaryTree=function runTestBinaryTree(){return _regeneratorRuntime.async(function runTestBinaryTree$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(runAlgorithm.apply(void 0,[testBinaryTree,false].concat(_toConsumableArray(testBSTCase1))));case 2:case\"end\":return _context2.stop();}}},null,null,null,Promise);};","map":null,"metadata":{},"sourceType":"module"}