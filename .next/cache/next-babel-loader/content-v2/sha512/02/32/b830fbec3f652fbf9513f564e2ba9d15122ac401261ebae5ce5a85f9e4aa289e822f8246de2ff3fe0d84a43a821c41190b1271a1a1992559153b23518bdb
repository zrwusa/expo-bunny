{"ast":null,"code":"\"use strict\";exports.__esModule=true;exports.formatUrl=formatUrl;var querystring=_interopRequireWildcard(require(\"./querystring\"));function _getRequireWildcardCache(){if(typeof WeakMap!==\"function\")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}var slashedProtocols=/https?|ftp|gopher|file/;function formatUrl(urlObj){var auth=urlObj.auth,hostname=urlObj.hostname;var protocol=urlObj.protocol||'';var pathname=urlObj.pathname||'';var hash=urlObj.hash||'';var query=urlObj.query||'';var host=false;auth=auth?encodeURIComponent(auth).replace(/%3A/i,':')+'@':'';if(urlObj.host){host=auth+urlObj.host;}else if(hostname){host=auth+(~hostname.indexOf(':')?\"[\"+hostname+\"]\":hostname);if(urlObj.port){host+=':'+urlObj.port;}}if(query&&typeof query==='object'){query=String(querystring.urlQueryToSearchParams(query));}var search=urlObj.search||query&&\"?\"+query||'';if(protocol&&protocol.substr(-1)!==':')protocol+=':';if(urlObj.slashes||(!protocol||slashedProtocols.test(protocol))&&host!==false){host='//'+(host||'');if(pathname&&pathname[0]!=='/')pathname='/'+pathname;}else if(!host){host='';}if(hash&&hash[0]!=='#')hash='#'+hash;if(search&&search[0]!=='?')search='?'+search;pathname=pathname.replace(/[?#]/g,encodeURIComponent);search=search.replace('#','%23');return\"\"+protocol+host+pathname+search+hash;}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/format-url.ts"],"names":["slashedProtocols","protocol","urlObj","pathname","hash","query","host","auth","encodeURIComponent","hostname","String","querystring","search"],"mappings":"iEAwBA,GAAA,CAAA,WAAA,CAAA,uBAAA,CAAA,OAAA,iBAAA,CAAA,C,60BAxBA,CA0BA,GAAMA,CAAAA,gBAAgB,CAAtB,wBAAA,CAEO,QAAA,CAAA,SAAA,CAAA,MAAA,CAAsC,CAC3C,GAAI,CAAA,IAAJ,CAAA,MAAA,CAAI,IAAJ,CAAI,QAAJ,CAAA,MAAA,CAAI,QAAJ,CACA,GAAIC,CAAAA,QAAQ,CAAGC,MAAM,CAANA,QAAAA,EAAf,EAAA,CACA,GAAIC,CAAAA,QAAQ,CAAGD,MAAM,CAANA,QAAAA,EAAf,EAAA,CACA,GAAIE,CAAAA,IAAI,CAAGF,MAAM,CAANA,IAAAA,EAAX,EAAA,CACA,GAAIG,CAAAA,KAAK,CAAGH,MAAM,CAANA,KAAAA,EAAZ,EAAA,CACA,GAAII,CAAAA,IAAoB,CAAxB,KAAA,CAEAC,IAAI,CAAGA,IAAI,CAAGC,kBAAkB,CAAlBA,IAAkB,CAAlBA,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,GAAAA,EAAH,GAAA,CAAXD,EAAAA,CAEA,GAAIL,MAAM,CAAV,IAAA,CAAiB,CACfI,IAAI,CAAGC,IAAI,CAAGL,MAAM,CAApBI,IAAAA,CADF,CAAA,IAEO,IAAA,QAAA,CAAc,CACnBA,IAAI,CAAGC,IAAI,EAAI,CAACE,QAAQ,CAARA,OAAAA,CAAD,GAACA,CAAD,KAAA,QAAA,KAAfH,QAAW,CAAXA,CACA,GAAIJ,MAAM,CAAV,IAAA,CAAiB,CACfI,IAAI,EAAI,IAAMJ,MAAM,CAApBI,IAAAA,CAEH,CAED,IAAID,KAAK,EAAI,MAAA,CAAA,KAAA,GAAb,QAAA,CAAwC,CACtCA,KAAK,CAAGK,MAAM,CAACC,WAAW,CAAXA,sBAAAA,CAAfN,KAAeM,CAAD,CAAdN,CAGF,IAAIO,CAAAA,MAAM,CAAGV,MAAM,CAANA,MAAAA,EAAkBG,KAAK,MAAvBH,KAAAA,EAAb,EAAA,CAEA,GAAID,QAAQ,EAAIA,QAAQ,CAARA,MAAAA,CAAgB,CAAhBA,CAAAA,IAAhB,GAAA,CAA6CA,QAAQ,EAARA,GAAAA,CAE7C,GACEC,MAAM,CAANA,OAAAA,EACC,CAAC,CAAA,QAAA,EAAaF,gBAAgB,CAAhBA,IAAAA,CAAd,QAAcA,CAAd,GAAkDM,IAAI,GAFzD,KAAA,CAGE,CACAA,IAAI,CAAG,MAAQA,IAAI,EAAnBA,EAAO,CAAPA,CACA,GAAIH,QAAQ,EAAIA,QAAQ,CAARA,CAAQ,CAARA,GAAhB,GAAA,CAAqCA,QAAQ,CAAG,IAAXA,QAAAA,CALvC,CAAA,IAMO,IAAI,CAAJ,IAAA,CAAW,CAChBG,IAAI,CAAJA,EAAAA,CAGF,IAAIF,IAAI,EAAIA,IAAI,CAAJA,CAAI,CAAJA,GAAZ,GAAA,CAA6BA,IAAI,CAAG,IAAPA,IAAAA,CAC7B,GAAIQ,MAAM,EAAIA,MAAM,CAANA,CAAM,CAANA,GAAd,GAAA,CAAiCA,MAAM,CAAG,IAATA,MAAAA,CAEjCT,QAAQ,CAAGA,QAAQ,CAARA,OAAAA,CAAAA,OAAAA,CAAXA,kBAAWA,CAAXA,CACAS,MAAM,CAAGA,MAAM,CAANA,OAAAA,CAAAA,GAAAA,CAATA,KAASA,CAATA,CAEA,SAAUX,QAAV,CAAqBK,IAArB,CAA4BH,QAA5B,CAAuCS,MAAvC,CAAA,IAAA,CACD","sourcesContent":["// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport { UrlObject } from 'url'\nimport { ParsedUrlQuery } from 'querystring'\nimport * as querystring from './querystring'\n\nconst slashedProtocols = /https?|ftp|gopher|file/\n\nexport function formatUrl(urlObj: UrlObject) {\n  let { auth, hostname } = urlObj\n  let protocol = urlObj.protocol || ''\n  let pathname = urlObj.pathname || ''\n  let hash = urlObj.hash || ''\n  let query = urlObj.query || ''\n  let host: string | false = false\n\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : ''\n\n  if (urlObj.host) {\n    host = auth + urlObj.host\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname)\n    if (urlObj.port) {\n      host += ':' + urlObj.port\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query as ParsedUrlQuery))\n  }\n\n  let search = urlObj.search || (query && `?${query}`) || ''\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':'\n\n  if (\n    urlObj.slashes ||\n    ((!protocol || slashedProtocols.test(protocol)) && host !== false)\n  ) {\n    host = '//' + (host || '')\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname\n  } else if (!host) {\n    host = ''\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash\n  if (search && search[0] !== '?') search = '?' + search\n\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent)\n  search = search.replace('#', '%23')\n\n  return `${protocol}${host}${pathname}${search}${hash}`\n}\n"]},"metadata":{},"sourceType":"script"}