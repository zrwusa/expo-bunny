{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import Platform from\"react-native-web/dist/exports/Platform\";import{EThemes}from\"../../constants\";var fontConfig={web:{regular:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'400'},medium:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'500'},light:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'300'},thin:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'100'}},ios:{regular:{fontFamily:'System',fontWeight:'400'},medium:{fontFamily:'System',fontWeight:'500'},light:{fontFamily:'System',fontWeight:'300'},thin:{fontFamily:'System',fontWeight:'100'}},default:{regular:{fontFamily:'sans-serif',fontWeight:'normal'},medium:{fontFamily:'sans-serif-medium',fontWeight:'normal'},light:{fontFamily:'sans-serif-light',fontWeight:'normal'},thin:{fontFamily:'sans-serif-thin',fontWeight:'normal'}}};var getFontConfigLeavesWrappedWithThemeNames=function getFontConfigLeavesWrappedWithThemeNames(){var configWithThemeName={};var fontConfigAlias=fontConfig;Object.keys(fontConfig).forEach(function(platformName){configWithThemeName[platformName]={};Object.keys(fontConfigAlias[platformName]).forEach(function(fontName){configWithThemeName[platformName][fontName]={};Object.keys(fontConfigAlias[platformName][fontName]).forEach(function(fontProperty){configWithThemeName[platformName][fontName][fontProperty]={};var themeKeys=Object.keys(EThemes);themeKeys.forEach(function(themeName){configWithThemeName[platformName][fontName][fontProperty][EThemes[themeName]]=fontConfigAlias[platformName][fontName][fontProperty];});});});});return configWithThemeName;};export var configureFonts=function configureFonts(config){return Platform.select(_objectSpread(_objectSpread({},fontConfig),config));};export var fonts=configureFonts();export var configureFontsWarehouse=function configureFontsWarehouse(config){return Platform.select(_objectSpread(_objectSpread({},getFontConfigLeavesWrappedWithThemeNames()),config));};export var fontsWarehouse=configureFontsWarehouse();","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/providers/theme-labor/fonts.ts"],"names":["fontConfig","web","regular","fontFamily","fontWeight","medium","light","thin","ios","default","getFontConfigLeavesWrappedWithThemeNames","configWithThemeName","fontConfigAlias","Object","themeKeys","EThemes","configureFonts","Platform","fonts","configureFontsWarehouse","fontsWarehouse"],"mappings":"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","sourcesContent":["import {Platform, PlatformOSType} from 'react-native';\nimport {FontConfigPlatform, Fonts, FontsWrapped, JSONSerializable, ThemeName} from '../../types';\nimport {EThemes} from '../../constants';\n\nconst fontConfig: FontConfigPlatform = {\n    web: {\n        regular: {\n            fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n            fontWeight: '400' as '400',\n        },\n        medium: {\n            fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n            fontWeight: '500' as '500',\n        },\n        light: {\n            fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n            fontWeight: '300' as '300',\n        },\n        thin: {\n            fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n            fontWeight: '100' as '100',\n        },\n    },\n    ios: {\n        regular: {\n            fontFamily: 'System',\n            fontWeight: '400' as '400',\n        },\n        medium: {\n            fontFamily: 'System',\n            fontWeight: '500' as '500',\n        },\n        light: {\n            fontFamily: 'System',\n            fontWeight: '300' as '300',\n        },\n        thin: {\n            fontFamily: 'System',\n            fontWeight: '100' as '100',\n        },\n    },\n    default: {\n        regular: {\n            fontFamily: 'sans-serif',\n            fontWeight: 'normal' as 'normal',\n        },\n        medium: {\n            fontFamily: 'sans-serif-medium',\n            fontWeight: 'normal' as 'normal',\n        },\n        light: {\n            fontFamily: 'sans-serif-light',\n            fontWeight: 'normal' as 'normal',\n        },\n        thin: {\n            fontFamily: 'sans-serif-thin',\n            fontWeight: 'normal' as 'normal',\n        },\n    },\n};\n\nconst getFontConfigLeavesWrappedWithThemeNames = () => {\n    let configWithThemeName: JSONSerializable = {};\n    // Todo as unknown as is not a safe method\n    let fontConfigAlias = fontConfig as unknown as JSONSerializable;\n    Object.keys(fontConfig).forEach(platformName => {\n        configWithThemeName[platformName] = {};\n        Object.keys(fontConfigAlias[platformName]).forEach(fontName => {\n            configWithThemeName[platformName][fontName] = {};\n            Object.keys(fontConfigAlias[platformName][fontName]).forEach(fontProperty => {\n                configWithThemeName[platformName][fontName][fontProperty] = {};\n                const themeKeys = Object.keys(EThemes) as Array<ThemeName>;\n                themeKeys.forEach((themeName) => {\n                    configWithThemeName[platformName][fontName][fontProperty][EThemes[themeName]] = fontConfigAlias[platformName][fontName][fontProperty];\n                });\n            });\n\n        });\n    });\n    return configWithThemeName;\n};\n\nexport const configureFonts = (\n    config?: { [platform in PlatformOSType | 'default']?: Fonts }\n): Fonts => {\n    return Platform.select({...fontConfig, ...config}) as Fonts;\n};\n\nexport const fonts = configureFonts();\n\nexport const configureFontsWarehouse = (\n    config?: { [platform in PlatformOSType | 'default']?: FontsWrapped }\n): FontsWrapped => {\n    return Platform.select({...getFontConfigLeavesWrappedWithThemeNames(), ...config}) as FontsWrapped;\n};\n\nexport const fontsWarehouse = configureFontsWarehouse();\n"]},"metadata":{},"sourceType":"module"}