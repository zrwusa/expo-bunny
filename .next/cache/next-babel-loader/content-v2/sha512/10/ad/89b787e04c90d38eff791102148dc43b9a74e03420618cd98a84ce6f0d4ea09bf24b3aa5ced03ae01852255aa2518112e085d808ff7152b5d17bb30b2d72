{"ast":null,"code":"import color from'color';import Animated from\"react-native-web/dist/exports/Animated\";import{themes}from\"./theme\";var DarkTheme=themes.dark;export default function overlay(){var elevation=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var surfaceColor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DarkTheme.colors.surface;if(elevation instanceof Animated.Value){var inputRange=[0,1,2,3,8,24];return elevation.interpolate({inputRange:inputRange,outputRange:inputRange.map(function(elevation){return calculateColor(surfaceColor,elevation);})});}return calculateColor(surfaceColor,elevation);}function calculateColor(surfaceColor,elevation){var overlayTransparency;if(elevation>=1&&elevation<=24){overlayTransparency=elevationOverlayTransparency[elevation];}else if(elevation>24){overlayTransparency=elevationOverlayTransparency[24];}else{overlayTransparency=elevationOverlayTransparency[1];}return color(surfaceColor).mix(color('white'),overlayTransparency*0.01).hex();}var elevationOverlayTransparency={1:5,2:7,3:8,4:9,5:10,6:11,7:11.5,8:12,9:12.5,10:13,11:13.5,12:14,13:14.25,14:14.5,15:14.75,16:15,17:15.12,18:15.24,19:15.36,20:15.48,21:15.6,22:15.72,23:15.84,24:16};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/providers/theme-labor/overlay.ts"],"names":["DarkTheme","themes","elevation","surfaceColor","surface","Animated","inputRange","outputRange","calculateColor","overlayTransparency","elevationOverlayTransparency","color"],"mappings":"AAAA,MAAA,CAAA,KAAA,KAAA,OAAA,C,6DAEA,OAAA,MAAA,eAEA,GAAMA,CAAAA,SAAS,CAAGC,MAAM,CAAxB,IAAA,CACA,cAAe,SAAA,CAAA,OAAA,EAGb,CAAA,GAFEC,CAAAA,SAEF,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAFuC,CAEvC,CAAA,GADEC,CAAAA,YACF,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CADyBH,SAAS,CAATA,MAAAA,CAAiBI,OAC1C,CACE,GAAIF,SAAS,WAAYG,CAAAA,QAAQ,CAAjC,KAAA,CAAyC,CACrC,GAAMC,CAAAA,UAAU,CAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAnB,EAAmB,CAAnB,CACA,MAAO,CAAA,SAAS,CAAT,WAAA,CAAsB,CACzBA,UAAU,CADe,UAAA,CAEzBC,WAAW,CAAE,UAAU,CAAV,GAAA,CAAe,SAAA,SAAA,CAAe,CACvC,MAAOC,CAAAA,cAAc,CAAA,YAAA,CAArB,SAAqB,CAArB,CADS,CAAA,CAFY,CAAtB,CAAP,CAMH,CACD,MAAOA,CAAAA,cAAc,CAAA,YAAA,CAArB,SAAqB,CAArB,CACH,CAED,QAAA,CAAA,cAAA,CAAA,YAAA,CAAA,SAAA,CAAiE,CAC7D,GAAA,CAAA,mBAAA,CACA,GAAIN,SAAS,EAATA,CAAAA,EAAkBA,SAAS,EAA/B,EAAA,CAAuC,CACnCO,mBAAmB,CAAGC,4BAA4B,CAAlDD,SAAkD,CAAlDA,CADJ,CAAA,IAEO,IAAIP,SAAS,CAAb,EAAA,CAAoB,CACvBO,mBAAmB,CAAGC,4BAA4B,CAAlDD,EAAkD,CAAlDA,CADG,CAAA,IAEA,CACHA,mBAAmB,CAAGC,4BAA4B,CAAlDD,CAAkD,CAAlDA,CACH,CACD,MAAOE,CAAAA,KAAK,CAALA,YAAK,CAALA,CAAAA,GAAAA,CACEA,KAAK,CADPA,OACO,CADPA,CACkBF,mBAAmB,CADrCE,IAAAA,EAAP,GAAOA,EAAP,CAGH,CAED,GAAMD,CAAAA,4BAAsD,CAAG,CAC3D,EAD2D,CAAA,CAE3D,EAF2D,CAAA,CAG3D,EAH2D,CAAA,CAI3D,EAJ2D,CAAA,CAK3D,EAL2D,EAAA,CAM3D,EAN2D,EAAA,CAO3D,EAP2D,IAAA,CAQ3D,EAR2D,EAAA,CAS3D,EAT2D,IAAA,CAU3D,GAV2D,EAAA,CAW3D,GAX2D,IAAA,CAY3D,GAZ2D,EAAA,CAa3D,GAb2D,KAAA,CAc3D,GAd2D,IAAA,CAe3D,GAf2D,KAAA,CAgB3D,GAhB2D,EAAA,CAiB3D,GAjB2D,KAAA,CAkB3D,GAlB2D,KAAA,CAmB3D,GAnB2D,KAAA,CAoB3D,GApB2D,KAAA,CAqB3D,GArB2D,IAAA,CAsB3D,GAtB2D,KAAA,CAuB3D,GAvB2D,KAAA,CAwB3D,GAAI,EAxBuD,CAA/D","sourcesContent":["import color from 'color';\nimport {Animated} from 'react-native';\nimport {themes} from './theme';\n\nconst DarkTheme = themes.dark;\nexport default function overlay(\n    elevation: number | Animated.Value = 1,\n    surfaceColor: string = DarkTheme.colors.surface\n) {\n    if (elevation instanceof Animated.Value) {\n        const inputRange = [0, 1, 2, 3, 8, 24];\n        return elevation.interpolate({\n            inputRange,\n            outputRange: inputRange.map((elevation) => {\n                return calculateColor(surfaceColor, elevation);\n            }),\n        });\n    }\n    return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number) {\n    let overlayTransparency: number;\n    if (elevation >= 1 && elevation <= 24) {\n        overlayTransparency = elevationOverlayTransparency[elevation];\n    } else if (elevation > 24) {\n        overlayTransparency = elevationOverlayTransparency[24];\n    } else {\n        overlayTransparency = elevationOverlayTransparency[1];\n    }\n    return color(surfaceColor)\n        .mix(color('white'), overlayTransparency * 0.01)\n        .hex();\n}\n\nconst elevationOverlayTransparency: { [id: number]: number } = {\n    1: 5,\n    2: 7,\n    3: 8,\n    4: 9,\n    5: 10,\n    6: 11,\n    7: 11.5,\n    8: 12,\n    9: 12.5,\n    10: 13,\n    11: 13.5,\n    12: 14,\n    13: 14.25,\n    14: 14.5,\n    15: 14.75,\n    16: 15,\n    17: 15.12,\n    18: 15.24,\n    19: 15.36,\n    20: 15.48,\n    21: 15.6,\n    22: 15.72,\n    23: 15.84,\n    24: 16,\n};\n"]},"metadata":{},"sourceType":"module"}