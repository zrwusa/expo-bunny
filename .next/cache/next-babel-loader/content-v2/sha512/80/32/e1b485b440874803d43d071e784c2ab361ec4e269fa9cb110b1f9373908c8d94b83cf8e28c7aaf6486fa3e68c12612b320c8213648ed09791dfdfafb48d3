{"ast":null,"code":"var _s=$RefreshSig$();import{useEffect,useRef}from'react';export var useIsMounted=function useIsMounted(){_s();var componentIsMounted=useRef(true);useEffect(function(){return function(){componentIsMounted.current=false;};},[]);return componentIsMounted;};_s(useIsMounted,\"iN5VVUxgAry449nrOG33KRa8Fdo=\");","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/hooks/is-mounted/useIsMounted.tsx"],"names":["useIsMounted","componentIsMounted","useRef","useEffect"],"mappings":"sBACA,OAAA,SAAA,CAAA,MAAA,KAAA,OAAA,CAEA,MAAO,IAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,MAE9B,GAAMC,CAAAA,kBAAkB,CAAGC,MAAM,CAAjC,IAAiC,CAAjC,CACAC,SAAS,CAAC,UAAM,CAIZ,MAAO,WAAM,CACTF,kBAAkB,CAAlBA,OAAAA,CAAAA,KAAAA,CADJ,CAAA,CAJK,CAAA,CAATE,EAAS,CAATA,CAQA,MAAA,CAAA,kBAAA,CAXG,CAAA,C,GAAMH,Y","sourcesContent":["import * as React from 'react';\nimport {useEffect, useRef} from 'react';\n\nexport const useIsMounted = () => {\n    // component is certainly mounted from the beginning\n    const componentIsMounted = useRef(true);\n    useEffect(() => {\n        // when non-SSR + (ComponentDidMount or ComponentDidUpdate):\n        // do nothing.\n        // when non-SSR + ComponentWillUnmount:\n        return () => {\n            componentIsMounted.current = false;\n        };\n    }, []);\n    return componentIsMounted;\n};\n"]},"metadata":{},"sourceType":"module"}