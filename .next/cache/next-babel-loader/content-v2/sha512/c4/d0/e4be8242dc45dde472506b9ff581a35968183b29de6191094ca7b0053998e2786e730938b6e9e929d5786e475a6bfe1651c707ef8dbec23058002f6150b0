{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import{runAlgorithm}from\"../helpers\";import{breakWordIICase8}from\"./cases\";export var fallingSquaresMy=function fallingSquaresMy(positions){var h=[];for(var i=0;i<1e+6;i++){h.push(0);}var max=0;var ans=[];for(var _iterator=_createForOfIteratorHelperLoose(positions),_step;!(_step=_iterator()).done;){var _ref=_step.value;var _ref2=_slicedToArray(_ref,2);var left=_ref2[0];var sl=_ref2[1];var maxInRange=0;for(var _i=left;_i<left+sl;_i++){maxInRange=Math.max(h[_i],maxInRange);}var newHeight=maxInRange+sl;for(var _i2=0;_i2<sl;_i2++){h[_i2+left]=newHeight;}ans.push(max=Math.max(newHeight,max));}return ans;};export var isValidSudoku=function isValidSudoku(board){var subValid=function subValid(dotNums,size){return dotNums===9||dotNums===1&&size===9||10-dotNums===size;};var areBoxesValid=function areBoxesValid(){for(var s=0;s<9;s++){var row1=Math.floor(s/3)*3,row2=row1+2,col1=s%3*3,col2=col1+2;var box=[];var dotNums=0;for(var row=row1;row<=row2;row++){for(var col=col1;col<=col2;col++){box.push(board[row][col]);if(board[row][col]==='.'){dotNums++;}}}var set=new Set(box);if(!subValid(dotNums,set.size))return false;}return true;};var areRowsValid=function areRowsValid(){for(var r=0;r<9;r++){var row=board[r];var set=new Set(row);var dotNums=0;for(var i=0;i<row.length;i++){if(row[i]==='.'){dotNums++;}}if(!subValid(dotNums,set.size))return false;}return true;};var areColsValid=function areColsValid(){for(var c=0;c<9;c++){var col=[];var dotNums=0;for(var i=0;i<board.length;i++){if(board[i][c]==='.'){dotNums++;}col.push(board[i][c]);}var set=new Set(col);if(!subValid(dotNums,set.size))return false;}return true;};return areRowsValid()&&areColsValid()&&areBoxesValid();};function solveSudokuBruteForceFailed(board){var getRowValidSet=function getRowValidSet(r){var set=new Set();for(var i=0;i<9;i++){set.add(board[r][i]);}return set;};var getColValidSet=function getColValidSet(c){var set=new Set();for(var i=0;i<9;i++){set.add(board[i][c]);}return set;};var getBoxValidSet=function getBoxValidSet(r,c){var row1=Math.floor(r/3)*3,row2=row1+3,col1=Math.floor(c/3)*3,col2=col1+3;var set=new Set();for(var row=row1;row<row2;row++){for(var col=col1;col<col2;col++){set.add(board[row][col]);}}return set;};var getPossible=function getPossible(exists){var possible=[];for(var i=1;i<=9;i++){var char=i.toString();if(!exists.has(char)){possible.push(char);}}return possible;};var fill=function fill(){for(var a=0;a<81;a++){for(var i=0;i<9;i++){for(var j=0;j<9;j++){if(board[i][j]==='.'){var exists=new Set([].concat(_toConsumableArray(getRowValidSet(i)),_toConsumableArray(getColValidSet(j)),_toConsumableArray(getBoxValidSet(i,j))));var possible=getPossible(exists);if(possible.length===1){board[i][j]=getPossible(exists)[0];}}}}}};fill();}function rotate(matrix){var n=matrix.length;for(var layer=0;layer<Math.floor(n/2);layer++){var last=n-1-layer;for(var i=0;i<last-layer;i++){var topLeft=matrix[layer][layer+i];matrix[layer][layer+i]=matrix[last-i][layer];matrix[last-i][layer]=matrix[last][last-i];matrix[last][last-i]=matrix[layer+i][last];matrix[layer+i][last]=topLeft;}}}function subSetOfArray(input){var res=[];var dfs=function dfs(index,accumulated){if(index===input.length){res.push(_toConsumableArray(accumulated));return;}accumulated.push(input[index]);dfs(index+1,accumulated);accumulated.pop();dfs(index+1,accumulated);};dfs(0,[]);return res;}function partition(s){var ans=[];var n=s.length;var isPalindrome=function isPalindrome(sub){var l=0,r=sub.length-1;while(l<r){if(sub[l]!==sub[r])return false;l++;r--;}return true;};var dfs=function dfs(acml,idx){if(idx===n){ans.push(_toConsumableArray(acml));return;}for(var i=1;i<=n-idx;i++){var sub=s.substr(idx,i);if(isPalindrome(sub)){acml.push(sub);dfs(acml,idx+i);acml.pop();}}};dfs([],0);return ans;}function minimumTotal(triangle){var dp=[[triangle[0][0]]];var n=triangle.length;for(var i=1;i<n;i++){var row=[];for(var j=0;j<triangle[i].length;j++){var prevCellA=dp[i-1][j];var prevCellB=dp[i-1][j-1];var dpCell=Math.min(prevCellA!==undefined?prevCellA:Number.MAX_SAFE_INTEGER,prevCellB!==undefined?prevCellB:Number.MAX_SAFE_INTEGER)+triangle[i][j];row.push(dpCell);}dp.push(row);}return Math.min.apply(Math,_toConsumableArray(dp[n-1]));}function rob(nums){var dp=[0,0,0];for(var i=3;i<nums.length+3;i++){var sum=Math.max(dp[i-2],dp[i-3])+nums[i-3];dp.push(sum);}var dpLen=dp.length;var pre1=dp[dpLen-1],pre2=dp[dpLen-2];return Math.max(pre1!==undefined?pre1:0,pre2!==undefined?pre2:0);}function robII(nums){if(nums.length===1)return nums[0];if(nums.length===0)return 0;var first=nums.slice(0,nums.length-1);var last=nums.slice(1);var maxFirst=rob(first);var maxLast=rob(last);return Math.max(maxFirst,maxLast);}function wordBreakBruteForce(s,wordDict){var ans=false;var dfs=function dfs(cur){if(cur.length===0){ans=true;return;}if(!ans){for(var i=0;i<wordDict.length;i++){if(cur.substring(0,wordDict[i].length)===wordDict[i]){dfs(cur.substring(wordDict[i].length));}}}};dfs(s);return ans;}function wordBreak(s,wordDict){var l=s.length;var dp=new Array(l+1).fill(false);dp[l]=true;for(var i=l-1;i>=0;i--){for(var _iterator2=_createForOfIteratorHelperLoose(wordDict),_step2;!(_step2=_iterator2()).done;){var word=_step2.value;if(dp[i])break;if(s.substr(i,word.length)===word){dp[i]=dp[i+word.length];}}}return dp[0];}function wordBreakIIBruteForce(s,wordDict){var ans=[];var dfs=function dfs(cur,acc){if(cur.length===0){ans.push(acc.join(' '));return;}for(var _iterator3=_createForOfIteratorHelperLoose(wordDict),_step3;!(_step3=_iterator3()).done;){var word=_step3.value;var wl=word.length;var cut=cur.substr(0,wl);if(cut===word){acc.push(word);dfs(cur.substr(wl),acc);acc.pop();}}};dfs(s,[]);return ans;}function wordBreakIIDfsDPLoopWordDict(s,wordDict){var memo=new Map();var dfs=function dfs(sub){var subMemo=memo.get(sub);if(subMemo){return subMemo;}var ret=[];for(var _iterator4=_createForOfIteratorHelperLoose(wordDict),_step4;!(_step4=_iterator4()).done;){var word=_step4.value;var prefix=sub.substr(0,word.length);if(prefix===word){if(prefix===sub){ret.push(prefix);}else{var restOfCur=dfs(sub.substr(prefix.length));for(var _iterator5=_createForOfIteratorHelperLoose(restOfCur),_step5;!(_step5=_iterator5()).done;){var phrase=_step5.value;ret.push(prefix+' '+phrase);}}}}memo.set(sub,ret);return ret;};return dfs(s);}function wordBreakIIDfsDPLoopS(s,wordDict){var wordSet=new Set(wordDict);var memo=new Map();var dfs=function dfs(sub){var subMemo=memo.get(sub);if(subMemo){return subMemo;}var ret=[];for(var i=1;i<=sub.length;i++){var prefix=sub.substr(0,i);if(wordSet.has(prefix)){if(prefix===sub){ret.push(prefix);}else{var restOfCur=dfs(sub.substr(prefix.length));for(var _iterator6=_createForOfIteratorHelperLoose(restOfCur),_step6;!(_step6=_iterator6()).done;){var phrase=_step6.value;ret.push(prefix+' '+phrase);}}}}memo.set(sub,ret);return ret;};return dfs(s);}export var runAllWordBreakII=function runAllWordBreakII(){return _regeneratorRuntime.async(function runAllWordBreakII$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(runAlgorithm.apply(void 0,[wordBreakIIBruteForce,false].concat(_toConsumableArray(breakWordIICase8))));case 2:_context.next=4;return _regeneratorRuntime.awrap(runAlgorithm.apply(void 0,[wordBreakIIDfsDPLoopWordDict,false].concat(_toConsumableArray(breakWordIICase8))));case 4:_context.next=6;return _regeneratorRuntime.awrap(runAlgorithm.apply(void 0,[wordBreakIIDfsDPLoopS,false].concat(_toConsumableArray(breakWordIICase8))));case 6:case\"end\":return _context.stop();}}},null,null,null,Promise);};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/utils/algorithms/uncategorized/uncategorized.ts"],"names":["fallingSquaresMy","h","i","max","ans","left","sl","maxInRange","Math","newHeight","isValidSudoku","subValid","dotNums","size","areBoxesValid","s","row1","row2","col1","col2","box","row","col","board","set","areRowsValid","r","areColsValid","c","getRowValidSet","getColValidSet","getBoxValidSet","getPossible","possible","char","exists","fill","a","j","n","matrix","layer","last","topLeft","res","dfs","index","input","accumulated","isPalindrome","l","sub","idx","acml","dp","triangle","prevCellA","prevCellB","dpCell","Number","nums","sum","dpLen","pre1","pre2","first","maxFirst","rob","maxLast","cur","wordDict","word","acc","wl","cut","memo","subMemo","ret","prefix","restOfCur","phrase","wordSet","runAllWordBreakII","runAlgorithm"],"mappings":"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","sourcesContent":["// 699. Falling Squares\nimport {runAlgorithm} from '../helpers';\nimport {breakWordIICase8} from './cases';\n\nexport const fallingSquaresMy = function (positions: number[][]): number[] {\n    const h = [];\n\n    for (let i = 0; i < 1e+6; i++) {\n        h.push(0);\n    }\n\n    let max = 0;\n    const ans = [];\n\n    for (let [left, sl] of positions) {\n        let maxInRange = 0;\n        for (let i = left; i < left + sl; i++) {\n            maxInRange = Math.max(h[i], maxInRange);\n        }\n        const newHeight = maxInRange + sl;\n\n        for (let i = 0; i < sl; i++) {\n            h[i + left] = newHeight;\n        }\n\n        ans.push(max = Math.max(newHeight, max));\n    }\n\n    return ans;\n};\n\n// 36 Valid Sudoku\n// 0  0,0 ~ 2,2\n// 1  0,3 ~ 2,5\n// 2  0,6 ~ 2,8\n// 3  3,0 ~ 5,2\n// 4  3,3 ~ 5,5\n// 5  3,6 ~ 5,8\n// 6  6,0 ~ 8,2\n// 7  6,3 ~ 8,5\n// 8  6,6 ~ 8,8\nexport const isValidSudoku = function (board: string[][]): boolean {\n    const subValid = (dotNums: number, size: number) => {\n        return dotNums === 9 || dotNums === 1 && size === 9 || 10 - dotNums === size;\n    };\n\n    const areBoxesValid = () => {\n        for (let s = 0; s < 9; s++) {\n            let row1 = Math.floor(s / 3) * 3, row2 = row1 + 2, col1 = (s % 3) * 3, col2 = col1 + 2;\n            const box = [];\n            let dotNums = 0;\n            for (let row = row1; row <= row2; row++) {\n                for (let col = col1; col <= col2; col++) {\n                    box.push(board[row][col]);\n                    if (board[row][col] === '.') {\n                        dotNums++;\n                    }\n                }\n            }\n            const set = new Set(box);\n            if (!subValid(dotNums, set.size)) return false;\n        }\n        return true;\n    };\n\n    const areRowsValid = () => {\n        for (let r = 0; r < 9; r++) {\n            const row = board[r];\n            const set = new Set(row);\n            let dotNums = 0;\n            for (let i = 0; i < row.length; i++) {\n                if (row[i] === '.') {\n                    dotNums++;\n                }\n            }\n            if (!subValid(dotNums, set.size)) return false;\n        }\n        return true;\n    };\n\n    const areColsValid = () => {\n        for (let c = 0; c < 9; c++) {\n            const col = [];\n            let dotNums = 0;\n            for (let i = 0; i < board.length; i++) {\n                if (board[i][c] === '.') {\n                    dotNums++;\n                }\n                col.push(board[i][c]);\n            }\n            const set = new Set(col);\n\n\n            if (!subValid(dotNums, set.size)) return false;\n\n        }\n        return true;\n    };\n    return areRowsValid() && areColsValid() && areBoxesValid();\n};\n\n// 37. Sudoku Solver\nfunction solveSudokuBruteForceFailed(board: string[][]): void {\n    const getRowValidSet = (r: number) => {\n        const set = new Set();\n        for (let i = 0; i < 9; i++) {\n            set.add(board[r][i]);\n        }\n        return set;\n    };\n\n    const getColValidSet = (c: number) => {\n        const set = new Set();\n        for (let i = 0; i < 9; i++) {\n            set.add(board[i][c]);\n        }\n        return set;\n    };\n\n    const getBoxValidSet = (r: number, c: number) => {\n        let row1 = Math.floor(r / 3) * 3, row2 = row1 + 3, col1 = Math.floor(c / 3) * 3, col2 = col1 + 3;\n        const set = new Set();\n        for (let row = row1; row < row2; row++) {\n            for (let col = col1; col < col2; col++) {\n                set.add(board[row][col]);\n            }\n        }\n        return set;\n    };\n\n    const getPossible = (exists: Set<any>) => {\n        const possible = [];\n        for (let i = 1; i <= 9; i++) {\n            const char = i.toString();\n            if (!exists.has(char)) {\n                possible.push(char);\n            }\n        }\n        return possible;\n\n    };\n    const fill = () => {\n        for (let a = 0; a < 81; a++) {\n            for (let i = 0; i < 9; i++) {\n                for (let j = 0; j < 9; j++) {\n                    if (board[i][j] === '.') {\n                        const exists = new Set([...getRowValidSet(i), ...getColValidSet(j), ...getBoxValidSet(i, j)]);\n                        const possible = getPossible(exists);\n                        if (possible.length === 1) {\n                            board[i][j] = getPossible(exists)[0];\n                        }\n                    }\n                }\n            }\n        }\n    };\n    fill();\n}\n\n// 48. Rotate Image\nfunction rotate(matrix: number[][]): void {\n    const n = matrix.length;\n\n    for (let layer = 0; layer < Math.floor(n / 2); layer++) {\n        const last = n - 1 - layer;\n\n        for (let i = 0; i < last - layer; i++) {\n            const topLeft = matrix[layer][layer + i];\n\n            // Top left = bottom left\n            matrix[layer][layer + i] = matrix[last - i][layer];\n\n            // Bottom left = bottom right\n            matrix[last - i][layer] = matrix[last][last - i];\n\n            // Bottom right = top right\n            matrix[last][last - i] = matrix[layer + i][last];\n\n            // Top right = top left\n            matrix[layer + i][last] = topLeft;\n        }\n    }\n}\n\nfunction subSetOfArray<T>(input: T[]): T[][] {\n    let res: T[][] = [];\n    let dfs = (index: number, accumulated: T[]) => {\n        if (index === input.length) {\n            res.push([...accumulated]);\n            return;\n        }\n        accumulated.push(input[index]);\n        dfs(index + 1, accumulated);\n        accumulated.pop();\n\n        dfs(index + 1, accumulated);\n    };\n\n    dfs(0, []);\n    return res;\n}\n\n// 131. Palindrome Partitioning\nfunction partition(s: string): string[][] {\n    const ans: string[][] = [];\n    const n = s.length;\n    const isPalindrome = (sub: string) => {\n        let l = 0, r = sub.length - 1;\n        while (l < r) {\n            if (sub[l] !== sub[r]) return false;\n            l++;\n            r--;\n        }\n        return true;\n    };\n\n    const dfs = (acml: string[], idx: number) => {\n        if (idx === n) {\n            ans.push([...acml]);\n            return;\n        }\n        for (let i = 1; i <= n - idx; i++) {\n            const sub = s.substr(idx, i);\n            if (isPalindrome(sub)) {\n                acml.push(sub);\n                dfs(acml, idx + i);\n                acml.pop();\n            }\n\n        }\n    };\n    dfs([], 0);\n    return ans;\n}\n\n// 312. Burst Balloons\n\n\n// 120. Triangle\nfunction minimumTotal(triangle: number[][]): number {\n    const dp = [[triangle[0][0]]];\n    let n = triangle.length;\n\n    for (let i = 1; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < triangle[i].length; j++) {\n            const prevCellA = dp[i - 1][j];\n            const prevCellB = dp[i - 1][j - 1];\n            const dpCell = Math.min(prevCellA !== undefined ? prevCellA : Number.MAX_SAFE_INTEGER, prevCellB !== undefined ? prevCellB : Number.MAX_SAFE_INTEGER) + triangle[i][j];\n            row.push(dpCell);\n        }\n        dp.push(row);\n    }\n\n    return Math.min(...dp[n - 1]);\n}\n\n// 198. House Robber\nfunction rob(nums: number[]): number {\n    const dp: number[] = [0, 0, 0];\n    for (let i = 3; i < nums.length + 3; i++) {\n        const sum = Math.max(dp[i - 2], dp[i - 3]) + nums[i - 3];\n        dp.push(sum);\n    }\n\n    const dpLen = dp.length;\n    const pre1 = dp[dpLen - 1], pre2 = dp[dpLen - 2];\n    return Math.max(pre1 !== undefined ? pre1 : 0, pre2 !== undefined ? pre2 : 0);\n}\n\n// 213. House Robber II\nfunction robII(nums: number[]): number {\n    if (nums.length === 1) return nums[0];\n    if (nums.length === 0) return 0;\n    const first = nums.slice(0, nums.length - 1);\n    const last = nums.slice(1);\n    const maxFirst = rob(first);\n    const maxLast = rob(last);\n    return Math.max(maxFirst, maxLast);\n}\n\n// 139. Word Break\n// time complexity is O(2*wordDict.length^validWord)\nfunction wordBreakBruteForce(s: string, wordDict: string[]): boolean {\n    let ans = false;\n    const dfs = (cur: string) => {\n        if (cur.length === 0) {\n            ans = true;\n            return;\n        }\n        if (!ans) {\n            for (let i = 0; i < wordDict.length; i++) {\n                if (cur.substring(0, wordDict[i].length) === wordDict[i]) {\n                    dfs(cur.substring(wordDict[i].length));\n                }\n            }\n        }\n    };\n\n    dfs(s);\n    return ans;\n}\n\nfunction wordBreak(s: string, wordDict: string[]): boolean {\n    const l = s.length;\n    const dp = new Array(l + 1).fill(false);\n    dp[l] = true;\n\n    for (let i = l - 1; i >= 0; i--) {\n        for (let word of wordDict) {\n            if (dp[i]) break;\n            if (s.substr(i, word.length) === word) {\n                dp[i] = dp[i + word.length];\n            }\n        }\n    }\n\n    return dp[0];\n}\n\n// 140. Word Break II\n// time complexity is O(2*wordDict.length^validWord)\nfunction wordBreakIIBruteForce(s: string, wordDict: string[]): string[] {\n    let ans: string[] = [];\n    const dfs = (cur: string, acc: string[]) => {\n        if (cur.length === 0) {\n            ans.push(acc.join(' '));\n            return;\n        }\n\n        for (let word of wordDict) {\n            const wl = word.length;\n            const cut = cur.substr(0, wl);\n            if (cut === word) {\n                acc.push(word);\n                dfs(cur.substr(wl), acc);\n                acc.pop();\n            }\n        }\n    };\n\n    dfs(s, []);\n    return ans;\n}\n\nfunction wordBreakIIDfsDPLoopWordDict(s: string, wordDict: string[]): string[] {\n    const memo: Map<string, string[]> = new Map();\n    const dfs = (sub: string): string[] => {\n        const subMemo = memo.get(sub);\n        if (subMemo) {\n            return subMemo;\n        }\n        const ret = [];\n        for (let word of wordDict) {\n            const prefix = sub.substr(0, word.length);\n            if (prefix === word) {\n                if (prefix === sub) {\n                    ret.push(prefix);\n                } else {\n                    const restOfCur = dfs(sub.substr(prefix.length));\n                    for (let phrase of restOfCur) {\n                        ret.push(prefix + ' ' + phrase);\n                    }\n                }\n            }\n        }\n        memo.set(sub, ret);\n        return ret;\n    };\n\n    return dfs(s);\n}\n\n// Use DP to accelerate,multiple times faster\nfunction wordBreakIIDfsDPLoopS(s: string, wordDict: string[]): string[] {\n    const wordSet = new Set(wordDict);\n    const memo: Map<string, string[]> = new Map();\n    const dfs = (sub: string): string[] => {\n        const subMemo = memo.get(sub);\n        if (subMemo) {\n            return subMemo;\n        }\n        const ret = [];\n        for (let i = 1; i <= sub.length; i++) {\n            const prefix = sub.substr(0, i);\n            if (wordSet.has(prefix)) {\n                if (prefix === sub) {\n                    ret.push(prefix);\n                } else {\n                    const restOfCur = dfs(sub.substr(prefix.length));\n                    for (let phrase of restOfCur) {\n                        ret.push(prefix + ' ' + phrase);\n                    }\n                }\n            }\n        }\n        memo.set(sub, ret);\n        return ret;\n    };\n\n    return dfs(s);\n}\n\nexport const runAllWordBreakII = async () => {\n    // await runAlgorithm(wordBreakIIBruteForce, false, ...breakWordIICase4);\n    // await runAlgorithm(wordBreakIIBruteForce, false, ...breakWordIICase7);\n    await runAlgorithm(wordBreakIIBruteForce, false, ...breakWordIICase8);\n\n    // await runAlgorithm(wordBreakIIDfsDPLoopS, false, ...breakWordIICase4);\n    // await runAlgorithm(wordBreakIIDfsDPLoopS, false, ...breakWordIICase7);\n    // await runAlgorithm(wordBreakIIDfsDPLoopS, false, ...breakWordIICase8);\n\n    // await runAlgorithm(wordBreakIIDfsDPLoopWordDict, false, ...breakWordIICase7);\n    await runAlgorithm(wordBreakIIDfsDPLoopWordDict, false, ...breakWordIICase8);\n\n    // await runAlgorithm(wordBreakIIDfsDPLoopS, false, ...breakWordIICase7);\n    await runAlgorithm(wordBreakIIDfsDPLoopS, false, ...breakWordIICase8);\n};\n"]},"metadata":{},"sourceType":"module"}