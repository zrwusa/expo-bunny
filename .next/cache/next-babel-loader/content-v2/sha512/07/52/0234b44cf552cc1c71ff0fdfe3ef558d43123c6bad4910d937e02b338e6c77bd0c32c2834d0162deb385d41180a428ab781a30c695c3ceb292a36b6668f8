{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";export var startWS=function startWS(){return _regeneratorRuntime.async(function startWS$(_context){while(1){switch(_context.prev=_context.next){case 0:case\"end\":return _context.stop();}}},null,null,null,Promise);};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/helpers/ws-worker.ts"],"names":["startWS"],"mappings":"4DAAA,MAAO,IAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,OAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAhB,CAAA","sourcesContent":["export const startWS = async function () {\n//     const ws = new WebSocket('wss://ws.bitstamp.net');\n//\n//     // Currency pairs: btcusd, btceur, btcgbp, btcpax, btcusdc, gbpusd, gbpeur, eurusd, xrpusd, xrpeur, xrpbtc, xrpgbp, xrppax, ltcusd, ltceur, ltcbtc, ltcgbp, ethusd, etheur, ethbtc, ethgbp, ethpax, ethusdc, bchusd, bcheur, bchbtc, bchgbp, paxusd, paxeur, paxgbp, xlmbtc, xlmusd, xlmeur, xlmgbp, linkusd, linkeur, linkgbp, linkbtc, linketh, omgusd, omgeur, omggbp, omgbtc, usdcusd, usdceur\n//     const subscribeMsg = {\n//         \"event\": \"bts:subscribe\",\n//         \"data\": {\n//             \"channel\": \"live_trades_btcusd\"\n//         }\n//     };\n//\n//     const unSubscribeMsg = {\n//         \"event\": \"bts:unsubscribe\",\n//         \"data\": {\n//             \"channel\": \"live_trades_btcusd\"\n//         }\n//     };\n//\n//     const reconnectMsg = {\n//         \"event\": \"bts:request_reconnect\",\n//         \"channel\": \"\",\n//         \"data\": \"\"\n//     }\n//\n//     const reconnectTimesConfig = 3;\n//     const reconnectTimes = 0;\n//\n//     const compare = (nowPrice: number, alertSetting: AlertSetting): boolean => {\n//         const {price} = alertSetting;\n//         switch (alertSetting.comparator) {\n//             case \"eq\":\n//                 return nowPrice === price\n//             case \"ge\":\n//                 return nowPrice >= price\n//             case \"gt\":\n//                 return nowPrice > price\n//             case \"le\":\n//                 return nowPrice <= price\n//             case \"lt\":\n//                 return nowPrice < price\n//             case \"ne\":\n//                 return nowPrice !== price\n//             default:\n//                 return false\n//         }\n//     }\n//\n//     const onWSOpen = (e: Event) => {\n//         ws.send(JSON.stringify(subscribeMsg));\n//     }\n//     ws.addEventListener('open', onWSOpen)\n//\n//     const onWSMessage = (e: MessageEvent) => {\n//         const data = JSON.parse(e.data).data;\n//         const nowPrice = data.price;\n//         if (nowPrice) {\n//             for (let i in alertSettings) {\n//                 const comparedResult = compare(nowPrice, alertSettings[i]);\n//                 // todo\n//                 if (comparedResult) {\n//                     // schedulePushNotification(data)\n//                     //     .then(() => {\n//                     //         _.remove(alertSettings, (item) => {\n//                     //             return item.id === alertSettings[i].id\n//                     //         })\n//                     //     });\n//                 }\n//             }\n//         }\n//     };\n//\n//     ws.addEventListener('message', onWSMessage)\n//\n//     const onWSError = (e: Event) => {\n//         if (reconnectTimes < reconnectTimesConfig) {\n//             ws.send(JSON.stringify(reconnectMsg))\n//         }\n//     };\n//\n//     ws.addEventListener('error', onWSError)\n//\n//     const onWSClose = (e: CloseEvent) => {\n//     };\n//\n//     ws.addEventListener('close', onWSClose)\n//\n//     return () => {\n//         ws.send(JSON.stringify(unSubscribeMsg));\n//         ws.close();\n//         setTimeout(() => {\n//             ws.removeEventListener('open', onWSOpen);\n//             ws.removeEventListener('message', onWSMessage);\n//             ws.removeEventListener('error', onWSError);\n//             ws.removeEventListener('close', onWSClose);\n//         }, 600)\n//     };\n};\n"]},"metadata":{},"sourceType":"module"}