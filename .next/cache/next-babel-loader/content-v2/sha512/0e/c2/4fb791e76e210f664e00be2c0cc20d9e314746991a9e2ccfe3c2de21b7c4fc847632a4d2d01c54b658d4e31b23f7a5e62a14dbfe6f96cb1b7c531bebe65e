{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";export var BinaryIndexedTree=function(){function BinaryIndexedTree(n){_classCallCheck(this,BinaryIndexedTree);this._sumTree=new Array(n+1).fill(0);}_createClass(BinaryIndexedTree,[{key:\"update\",value:function update(i,delta){while(i<this._sumTree.length){this._sumTree[i]+=delta;i+=BinaryIndexedTree.lowBit(i);}}},{key:\"getPrefixSum\",value:function getPrefixSum(i){var sum=0;while(i>0){sum+=this._sumTree[i];i-=BinaryIndexedTree.lowBit(i);}return sum;}},{key:\"getRangeSum\",value:function getRangeSum(start,end){if(!(0<=start&&start<=end&&end<=this._sumTree.length))throw'Index out of bounds';return this.getPrefixSum(end)-this.getPrefixSum(start);}}],[{key:\"lowBit\",value:function lowBit(x){return x&-x;}}]);return BinaryIndexedTree;}();","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/utils/data-structures/binary-tree/binary-indexed-tree.ts"],"names":["BinaryIndexedTree","n","i","sum","start","end","x"],"mappings":"gIAAA,MAAA,IAAaA,CAAAA,iBAAb,CAAA,UAAA,CAGI,QAAA,CAAA,iBAAA,CAAA,CAAA,CAAuB,CAAA,eAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,CACnB,KAAA,QAAA,CAAgB,GAAA,CAAA,KAAA,CAAkBC,CAAC,CAAnB,CAAA,EAAA,IAAA,CAAhB,CAAgB,CAAhB,CACH,CALL,YAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,GAAA,CAAA,QAAA,CAAA,KAAA,CAOI,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA,KAAA,CAAiC,CAC7B,MAAOC,CAAC,CAAG,KAAA,QAAA,CAAX,MAAA,CAAiC,CAC7B,KAAA,QAAA,CAAA,CAAA,GAAA,KAAA,CACAA,CAAC,EAAIF,iBAAiB,CAAjBA,MAAAA,CAALE,CAAKF,CAALE,CACH,CACJ,CAZL,CAAA,CAAA,CAAA,GAAA,CAAA,cAAA,CAAA,KAAA,CAcI,QAAA,CAAA,YAAA,CAAA,CAAA,CAAwB,CACpB,GAAIC,CAAAA,GAAG,CAAP,CAAA,CACA,MAAOD,CAAC,CAAR,CAAA,CAAc,CACVC,GAAG,EAAI,KAAA,QAAA,CAAPA,CAAO,CAAPA,CACAD,CAAC,EAAIF,iBAAiB,CAAjBA,MAAAA,CAALE,CAAKF,CAALE,CACH,CACD,MAAA,CAAA,GAAA,CACH,CArBL,CAAA,CAAA,CAAA,GAAA,CAAA,aAAA,CAAA,KAAA,CAuBI,QAAA,CAAA,WAAA,CAAA,KAAA,CAAA,GAAA,CAAuD,CACnD,GAAI,EAAE,GAAA,KAAA,EAAcE,KAAK,EAAnB,GAAA,EAA8BC,GAAG,EAAI,KAAA,QAAA,CAA3C,MAAI,CAAJ,CACI,KAAA,qBAAA,CACJ,MAAO,MAAA,YAAA,CAAA,GAAA,EAAyB,KAAA,YAAA,CAAhC,KAAgC,CAAhC,CACH,CA3BL,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,QAAA,CAAA,KAAA,CA6BI,QAAA,CAAA,MAAA,CAAA,CAAA,CAAyB,CACrB,MAAOC,CAAAA,CAAC,CAAI,CAAZ,CAAA,CACH,CA/BL,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,CAAA,EAAA","sourcesContent":["export class BinaryIndexedTree {\n    private readonly _sumTree: number[];\n\n    constructor(n: number) {\n        this._sumTree = new Array<number>(n + 1).fill(0);\n    }\n\n    update(i: number, delta: number) {\n        while (i < this._sumTree.length) {\n            this._sumTree[i] += delta;\n            i += BinaryIndexedTree.lowBit(i);\n        }\n    }\n\n    getPrefixSum(i: number) {\n        let sum = 0;\n        while (i > 0) {\n            sum += this._sumTree[i];\n            i -= BinaryIndexedTree.lowBit(i);\n        }\n        return sum;\n    }\n\n    public getRangeSum(start: number, end: number): number {\n        if (!(0 <= start && start <= end && end <= this._sumTree.length))\n            throw 'Index out of bounds';\n        return this.getPrefixSum(end) - this.getPrefixSum(start);\n    }\n\n    static lowBit(x: number) {\n        return x & (-x);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}