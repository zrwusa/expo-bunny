{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import ExponentAV from\"./ExponentAV\";export*from\"./Audio/Recording\";export*from\"./Audio/Sound\";export{setIsEnabledAsync}from\"./Audio/AudioAvailability\";export{PitchCorrectionQuality}from\"./AV\";export var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS=0;export var INTERRUPTION_MODE_IOS_DO_NOT_MIX=1;export var INTERRUPTION_MODE_IOS_DUCK_OTHERS=2;export var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX=1;export var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS=2;var _isValueValid=function _isValueValid(value,validValues){return validValues.filter(function(validValue){return validValue===value;}).length>0;};var _populateMissingKeys=function _populateMissingKeys(userAudioMode,defaultAudioMode){for(var key in defaultAudioMode){if(!userAudioMode.hasOwnProperty(key)){userAudioMode[key]=defaultAudioMode[key];}}return userAudioMode;};var defaultMode={allowsRecordingIOS:false,interruptionModeIOS:INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,playsInSilentModeIOS:false,staysActiveInBackground:false,interruptionModeAndroid:INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,shouldDuckAndroid:true,playThroughEarpieceAndroid:false};var currentAudioMode=null;function getCurrentAudioMode(){if(!currentAudioMode){return defaultMode;}return currentAudioMode;}export function setAudioModeAsync(partialMode){var mode;return _regeneratorRuntime.async(function setAudioModeAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:mode=_populateMissingKeys(partialMode,getCurrentAudioMode());if(_isValueValid(mode.interruptionModeIOS,[INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,INTERRUPTION_MODE_IOS_DO_NOT_MIX,INTERRUPTION_MODE_IOS_DUCK_OTHERS])){_context.next=3;break;}throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");case 3:if(_isValueValid(mode.interruptionModeAndroid,[INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])){_context.next=5;break;}throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");case 5:if(!(typeof mode.allowsRecordingIOS!=='boolean'||typeof mode.playsInSilentModeIOS!=='boolean'||typeof mode.staysActiveInBackground!=='boolean'||typeof mode.shouldDuckAndroid!=='boolean'||typeof mode.playThroughEarpieceAndroid!=='boolean')){_context.next=7;break;}throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');case 7:currentAudioMode=mode;_context.next=10;return _regeneratorRuntime.awrap(ExponentAV.setAudioMode(mode));case 10:return _context.abrupt(\"return\",_context.sent);case 11:case\"end\":return _context.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/packages/expo-av/src/Audio.ts"],"names":["INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS","INTERRUPTION_MODE_IOS_DO_NOT_MIX","INTERRUPTION_MODE_IOS_DUCK_OTHERS","INTERRUPTION_MODE_ANDROID_DO_NOT_MIX","INTERRUPTION_MODE_ANDROID_DUCK_OTHERS","_isValueValid","validValue","_populateMissingKeys","userAudioMode","defaultAudioMode","defaultMode","allowsRecordingIOS","interruptionModeIOS","playsInSilentModeIOS","staysActiveInBackground","interruptionModeAndroid","shouldDuckAndroid","playThroughEarpieceAndroid","currentAudioMode","mode","getCurrentAudioMode","ExponentAV"],"mappings":"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","sourcesContent":["import ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport {setIsEnabledAsync} from './Audio/AudioAvailability';\nexport {PitchCorrectionQuality} from './AV';\n\nexport type AudioMode = {\n    allowsRecordingIOS: boolean;\n    interruptionModeIOS: number;\n    playsInSilentModeIOS: boolean;\n    staysActiveInBackground: boolean;\n    interruptionModeAndroid: number;\n    shouldDuckAndroid: boolean;\n    playThroughEarpieceAndroid: boolean;\n};\n\nexport const INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport const INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\n\nexport const INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\n// Returns true if value is in validValues, and false if not.\nconst _isValueValid = (value: any, validValues: any[]): boolean => {\n    return validValues.filter(validValue => validValue === value).length > 0;\n};\n\nconst _populateMissingKeys = (\n    userAudioMode: Partial<AudioMode>,\n    defaultAudioMode: AudioMode\n): AudioMode => {\n    for (const key in defaultAudioMode) {\n        if (!userAudioMode.hasOwnProperty(key)) {\n            // @ts-ignore\n            userAudioMode[key] = defaultAudioMode[key];\n        }\n    }\n    return userAudioMode as AudioMode;\n};\n\nconst defaultMode: AudioMode = {\n    allowsRecordingIOS: false,\n    interruptionModeIOS: INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n    playsInSilentModeIOS: false,\n    staysActiveInBackground: false,\n    interruptionModeAndroid: INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n    shouldDuckAndroid: true,\n    playThroughEarpieceAndroid: false,\n};\n\nlet currentAudioMode: AudioMode | null = null;\n\nfunction getCurrentAudioMode(): AudioMode {\n    if (!currentAudioMode) {\n        return defaultMode;\n    }\n    return currentAudioMode;\n}\n\nexport async function setAudioModeAsync(partialMode: Partial<AudioMode>): Promise<void> {\n    const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n    if (\n        !_isValueValid(mode.interruptionModeIOS, [\n            INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n            INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n            INTERRUPTION_MODE_IOS_DUCK_OTHERS,\n        ])\n    ) {\n        throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n    }\n    if (\n        !_isValueValid(mode.interruptionModeAndroid, [\n            INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n            INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n        ])\n    ) {\n        throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n    }\n    if (\n        typeof mode.allowsRecordingIOS !== 'boolean' ||\n        typeof mode.playsInSilentModeIOS !== 'boolean' ||\n        typeof mode.staysActiveInBackground !== 'boolean' ||\n        typeof mode.shouldDuckAndroid !== 'boolean' ||\n        typeof mode.playThroughEarpieceAndroid !== 'boolean'\n    ) {\n        throw new Error(\n            '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n        );\n    }\n    currentAudioMode = mode;\n    return await ExponentAV.setAudioMode(mode);\n}\n"]},"metadata":{},"sourceType":"module"}