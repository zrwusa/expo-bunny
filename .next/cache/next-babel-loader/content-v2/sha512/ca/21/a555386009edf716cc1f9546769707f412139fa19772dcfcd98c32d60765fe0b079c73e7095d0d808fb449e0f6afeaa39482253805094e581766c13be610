{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";var _this=this,_jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/providers/auth-labor/withAuthLabor.tsx\";import React from'react';import{useAuthLabor}from\"./useAuthLabor\";export var withAuthLabor=function withAuthLabor(WrappedComponent){var _s=$RefreshSig$();var displayName=WrappedComponent.displayName||WrappedComponent.name||'Component';var ComponentWithAuthLabor=function ComponentWithAuthLabor(props){_s();var authLabor=useAuthLabor();return React.createElement(WrappedComponent,_extends({},props,{authLabor:authLabor,__self:_this,__source:{fileName:_jsxFileName,lineNumber:20,columnNumber:16}}));};_s(ComponentWithAuthLabor,\"PyuDVVDGVRkzjPcb8gLqNGkeXGw=\",false,function(){return[useAuthLabor];});ComponentWithAuthLabor.displayName=\"withAuthLabor(\"+displayName+\")\";return ComponentWithAuthLabor;};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/providers/auth-labor/withAuthLabor.tsx"],"names":["withAuthLabor","displayName","WrappedComponent","ComponentWithAuthLabor","authLabor","useAuthLabor"],"mappings":"sKAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CAEA,OAAA,YAAA,sBAKA,MAAO,IAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAA,gBAAA,CAExB,uBAED,GAAMC,CAAAA,WAAW,CAAGC,gBAAgB,CAAhBA,WAAAA,EAAgCA,gBAAgB,CAAhDA,IAAAA,EAApB,WAAA,CAGA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAAA,KAAA,CAAyC,MAEpE,GAAMC,CAAAA,SAAS,CAAGC,YAAlB,EAAA,CAGA,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAoC,SAAS,CAA7C,SAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAP,CALJ,CAAA,CALC,GAKKF,sBALL,wDAOqBE,YAPrB,KAaDF,sBAAsB,CAAtBA,WAAAA,CAAAA,iBAAAA,WAAAA,CAAAA,GAAAA,CAEA,MAAA,CAAA,sBAAA,CAjBG,CAAA","sourcesContent":["import React from 'react';\nimport {AuthLaborContextTypePartial} from '../../types';\nimport {useAuthLabor} from './useAuthLabor';\n\nexport interface WithAuthLabor extends AuthLaborContextTypePartial {\n}\n\nexport const withAuthLabor = <T extends WithAuthLabor = WithAuthLabor>(\n    WrappedComponent: React.ComponentType<T>\n) => {\n    // Try to create a nice displayName for React Dev Tools.\n    const displayName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n    // Creating the inner component. The calculated Props type here is the where the magic happens.\n    const ComponentWithAuthLabor = (props: Omit<T, keyof WithAuthLabor>) => {\n        // Fetch the props you want to inject. This could be done with context instead.\n        const authLabor = useAuthLabor();\n\n        // props comes afterwards so the can override the default ones.\n        return <WrappedComponent {...(props as T)} authLabor={authLabor}/>;\n    };\n\n    ComponentWithAuthLabor.displayName = `withAuthLabor(${displayName})`;\n\n    return ComponentWithAuthLabor;\n};\n"]},"metadata":{},"sourceType":"module"}