{"ast":null,"code":"import Dimensions from\"react-native-web/dist/exports/Dimensions\";import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";var percentageToDP=function percentageToDP(type,percentage,shouldRound){var _shouldRound=shouldRound;if(typeof shouldRound==='undefined'){_shouldRound=true;}var screenWidthOrHeight;var _Dimensions$get=Dimensions.get('window'),width=_Dimensions$get.width,height=_Dimensions$get.height;switch(type){case'W':screenWidthOrHeight=width;break;case'H':screenWidthOrHeight=height;break;default:screenWidthOrHeight=width;break;}var elemWidthOrHeight=typeof percentage==='number'?percentage:parseFloat(percentage);var value=screenWidthOrHeight*elemWidthOrHeight;if(_shouldRound===true){return PixelRatio.roundToNearestPixel(value);}return value;};export var widthPercentageToDP=function widthPercentageToDP(widthPercent,shouldRound){return percentageToDP('W',widthPercent,shouldRound);};export var heightPercentageToDP=function heightPercentageToDP(heightPercent,shouldRound){return percentageToDP('H',heightPercent,shouldRound);};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/providers/size-labor/responsiveScreen.ts"],"names":["percentageToDP","_shouldRound","width","height","Dimensions","screenWidthOrHeight","elemWidthOrHeight","parseFloat","value","PixelRatio","widthPercentageToDP","heightPercentageToDP"],"mappings":"kIAEA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAA,IAAA,CAAA,UAAA,CAAA,WAAA,CAAyE,CAC5F,GAAIC,CAAAA,YAAY,CAAhB,WAAA,CACA,GAAI,MAAA,CAAA,WAAA,GAAJ,WAAA,CAAwC,CACpCA,YAAY,CAAZA,IAAAA,CACH,CACD,GAAA,CAAA,mBAAA,CACA,GAAA,CAAA,eAAA,CAAwBG,UAAU,CAAVA,GAAAA,CAAxB,QAAwBA,CAAxB,CAAOF,KAAP,CAAA,eAAA,CAAA,KAAA,CAAcC,MAAd,CAAA,eAAA,CAAA,MAAA,CACA,OAAA,IAAA,EACI,IAAA,GAAA,CACIE,mBAAmB,CAAnBA,KAAAA,CACA,MACJ,IAAA,GAAA,CACIA,mBAAmB,CAAnBA,MAAAA,CACA,MACJ,QACIA,mBAAmB,CAAnBA,KAAAA,CACA,MATR,CAYA,GAAMC,CAAAA,iBAAiB,CAAG,MAAA,CAAA,UAAA,GAAA,QAAA,CAAA,UAAA,CAA8CC,UAAU,CAAlF,UAAkF,CAAlF,CAIA,GAAMC,CAAAA,KAAK,CAAGH,mBAAmB,CAAjC,iBAAA,CAEA,GAAIJ,YAAY,GAAhB,IAAA,CAA2B,CACvB,MAAOQ,CAAAA,UAAU,CAAVA,mBAAAA,CAAP,KAAOA,CAAP,CACH,CACD,MAAA,CAAA,KAAA,CA5BJ,CAAA,CA+BA,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAA,YAAA,CAAA,WAAA,CAAkE,CACjG,MAAOV,CAAAA,cAAc,CAAA,GAAA,CAAA,YAAA,CAArB,WAAqB,CAArB,CADG,CAAA,CAIP,MAAO,IAAMW,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAAA,aAAA,CAAA,WAAA,CAAmE,CACnG,MAAOX,CAAAA,cAAc,CAAA,GAAA,CAAA,aAAA,CAArB,WAAqB,CAArB,CADG,CAAA","sourcesContent":["import {Dimensions, PixelRatio} from 'react-native';\n\nconst percentageToDP = (type: 'W' | 'H', percentage: string | number, shouldRound?: boolean) => {\n    let _shouldRound = shouldRound;\n    if (typeof shouldRound === 'undefined') {\n        _shouldRound = true;\n    }\n    let screenWidthOrHeight;\n    const {width, height} = Dimensions.get('window');\n    switch (type) {\n        case 'W':\n            screenWidthOrHeight = width;\n            break;\n        case 'H':\n            screenWidthOrHeight = height;\n            break;\n        default:\n            screenWidthOrHeight = width;\n            break;\n    }\n    // Parse string percentage input and convert it to number.\n    const elemWidthOrHeight = typeof percentage === 'number' ? percentage : parseFloat(percentage);\n\n    // Use PixelRatio.roundToNearestPixel method in order to round the layout\n    // size (dp) to the nearest one that correspons to an integer number of pixels.\n    const value = screenWidthOrHeight * elemWidthOrHeight;\n\n    if (_shouldRound === true) {\n        return PixelRatio.roundToNearestPixel(value);\n    }\n    return value;\n};\n\nexport const widthPercentageToDP = (widthPercent: string | number, shouldRound?: boolean): number => {\n    return percentageToDP('W', widthPercent, shouldRound);\n};\n\nexport const heightPercentageToDP = (heightPercent: string | number, shouldRound?: boolean): number => {\n    return percentageToDP('H', heightPercent, shouldRound);\n};\n"]},"metadata":{},"sourceType":"module"}