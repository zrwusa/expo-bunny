{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{bunnyAPI}from\"../../helpers/bunny-api\";import{EBizLogicMsg,EDemoThunk}from\"../../constants\";import{collectSysError,requestFailed,requesting,requestSuccess}from\"./sys\";import{collectBizLogicResult}from\"./biz-logic-result\";import{bizLogicError}from\"../../helpers\";export var demoThunkSuccess=function demoThunkSuccess(payload){return{type:EDemoThunk.DEMO_THUNK_SUCCESS,payload:payload};};export var demoThunk=function demoThunk(reqParams){return function _callee(dispatch){var result,config,_await$bunnyAPI$reque,data;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:config={url:'/api/example-thunks',method:'POST',data:reqParams};_context.prev=1;result=dispatch(requesting(config));_context.next=5;return _regeneratorRuntime.awrap(bunnyAPI.request(config));case 5:_await$bunnyAPI$reque=_context.sent;data=_await$bunnyAPI$reque.data.data;if(data){result=dispatch(demoThunkSuccess(data));result=dispatch(requestSuccess(config));}else{result=dispatch(collectBizLogicResult(bizLogicError(EBizLogicMsg.NO_DEMO_THUNK_DATA)));}return _context.abrupt(\"return\",result);case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);result=dispatch(collectSysError(_context.t0));result=dispatch(requestFailed(config));return _context.abrupt(\"return\",result);case 16:case\"end\":return _context.stop();}}},null,null,[[1,11]],Promise);};};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/store/actions/demo-thunk.ts"],"names":["demoThunkSuccess","type","EDemoThunk","payload","demoThunk","config","url","method","data","reqParams","result","dispatch","requesting","bunnyAPI","requestSuccess","collectBizLogicResult","bizLogicError","EBizLogicMsg","collectSysError","requestFailed"],"mappings":"4DAAA,OAAA,QAAA,+BAaA,OAAA,YAAA,CAAA,UAAA,uBAGA,OAAA,eAAA,CAAA,aAAA,CAAA,UAAA,CAAA,cAAA,aACA,OAAA,qBAAA,0BACA,OAAA,aAAA,qBAEA,MAAO,IAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAA,OAAA,CAA8D,CAC1F,MAAO,CACHC,IAAI,CAAEC,UAAU,CADb,kBAAA,CAEHC,OAAO,CAAPA,OAFG,CAAP,CADG,CAAA,CAOP,MAAO,IAAMC,CAAAA,SAAoG,CAAG,QAAvGA,CAAAA,SAAuG,CAAA,SAAA,CAAiC,CACjJ,MAAO,SAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,qBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,OAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAEGC,MAFH,CAE2B,CAACC,GAAG,CAAJ,qBAAA,CAA6BC,MAAM,CAAnC,MAAA,CAA6CC,IAAI,CAAEC,SAAnD,CAAxBJ,CAFH,QAAA,CAAA,IAAA,CAAA,CAAA,CAICK,MAAM,CAAGC,QAAQ,CAACC,UAAU,CAA5BF,MAA4B,CAAX,CAAjBA,CAJD,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,KAAA,CAK8BG,QAAQ,CAARA,OAAAA,CAL9B,MAK8BA,CAL9B,CAAA,CAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,IAAA,CAKeL,IALf,CAAA,qBAAA,CAAA,IAAA,CAAA,IAKeA,CACd,GAAA,IAAA,CAAU,CACNE,MAAM,CAAGC,QAAQ,CAACX,gBAAgB,CAAlCU,IAAkC,CAAjB,CAAjBA,CACAA,MAAM,CAAGC,QAAQ,CAACG,cAAc,CAAhCJ,MAAgC,CAAf,CAAjBA,CAFJ,CAAA,IAGO,CACHA,MAAM,CAAGC,QAAQ,CAACI,qBAAqB,CAACC,aAAa,CAACC,YAAY,CAAlEP,kBAAqD,CAAd,CAAtB,CAAjBA,CACH,CAXF,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA,IAAA,GAAA,CAAA,QAAA,CAAA,IAAA,CAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAcCA,MAAM,CAAGC,QAAQ,CAACO,eAAe,CAAA,QAAA,CAAjCR,EAAiC,CAAhB,CAAjBA,CACAA,MAAM,CAAGC,QAAQ,CAACQ,aAAa,CAA/BT,MAA+B,CAAd,CAAjBA,CAfD,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA,IAAA,GAAA,CAAA,IAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,OAAA,CAAA,CAAP,CAAA,CADG,CAAA","sourcesContent":["import {bunnyAPI} from '../../helpers/bunny-api';\nimport {\n    CollectBizLogicResultAction,\n    DemoThunkPayload,\n    DemoThunkState,\n    DemoThunkSuccessAction,\n    DemoThunkSuccessPayload,\n    RequestConfig,\n    RequestFailedAction,\n    RequestingAction,\n    RequestSuccessAction,\n    SysErrorAction\n} from '../../types';\nimport {EBizLogicMsg, EDemoThunk} from '../../constants';\nimport {Action, ActionCreator, Dispatch} from 'redux';\nimport {ThunkAction} from 'redux-thunk';\nimport {collectSysError, requestFailed, requesting, requestSuccess} from './sys';\nimport {collectBizLogicResult} from './biz-logic-result';\nimport {bizLogicError} from '../../helpers';\n\nexport const demoThunkSuccess = (payload: DemoThunkSuccessPayload): DemoThunkSuccessAction => {\n    return {\n        type: EDemoThunk.DEMO_THUNK_SUCCESS,\n        payload\n    };\n};\n\nexport const demoThunk: ActionCreator<ThunkAction<Promise<Action>, DemoThunkState, void, DemoThunkSuccessAction>> = (reqParams: DemoThunkPayload) => {\n    return async (dispatch: Dispatch<DemoThunkSuccessAction | SysErrorAction | CollectBizLogicResultAction | RequestingAction | RequestSuccessAction | RequestFailedAction>): Promise<Action> => {\n        let result;\n        const config: RequestConfig = {url: '/api/example-thunks', method: 'POST', data: reqParams};\n        try {\n            result = dispatch(requesting(config));\n            const {data: {data}} = await bunnyAPI.request(config);\n            if (data) {\n                result = dispatch(demoThunkSuccess(data));\n                result = dispatch(requestSuccess(config));\n            } else {\n                result = dispatch(collectBizLogicResult(bizLogicError(EBizLogicMsg.NO_DEMO_THUNK_DATA)));\n            }\n            return result;\n        } catch (e: any) {\n            result = dispatch(collectSysError(e));\n            result = dispatch(requestFailed(config));\n            return result;\n        }\n    };\n};\n\nexport type DemoThunkActions = DemoThunkSuccessAction;\n"]},"metadata":{},"sourceType":"module"}