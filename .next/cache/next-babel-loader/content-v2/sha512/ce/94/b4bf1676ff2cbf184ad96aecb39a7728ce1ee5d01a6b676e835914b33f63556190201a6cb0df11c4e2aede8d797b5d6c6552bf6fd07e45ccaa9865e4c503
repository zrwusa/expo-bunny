{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";var _jsxFileName=\"/Users/revone/projects/expo-react-bunny/packages/expo-av/src/Video.tsx\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import*as React from'react';import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import Image from\"react-native-web/dist/exports/Image\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{assertStatusValuesInBounds,getNativeSourceAndFullInitialStatusForLoadAsync,getNativeSourceFromSource,getUnloadedStatus,PlaybackMixin}from\"./AV\";import ExpoVideoManager from\"./ExpoVideoManager\";import ExponentAV from\"./ExponentAV\";import ExponentVideo from\"./ExponentVideo\";import{ResizeMode}from\"./Video.types\";export{ResizeMode};export var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=0;export var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=1;export var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=2;export var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=3;export var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;export var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;export var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;export var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;var _STYLES=StyleSheet.create({base:{overflow:'hidden'},poster:{position:'absolute',left:0,top:0,right:0,bottom:0,resizeMode:'contain'},video:{position:'absolute',left:0,top:0,right:0,bottom:0}});var ExpoVideoManagerConstants=ExpoVideoManager;var ExpoVideoViewManager=ExpoVideoManager;var Video=function(_React$Component){_inherits(Video,_React$Component);var _super=_createSuper(Video);function Video(props){var _this;_classCallCheck(this,Video);_this=_super.call(this,props);_this._nativeRef=React.createRef();_this._onPlaybackStatusUpdate=null;_this._handleNewStatus=function(status){if(_this.state.showPoster&&status.isLoaded&&(status.isPlaying||status.positionMillis!==0)){_this.setState({showPoster:false});}if(_this.props.onPlaybackStatusUpdate){_this.props.onPlaybackStatusUpdate(status);}if(_this._onPlaybackStatusUpdate){_this._onPlaybackStatusUpdate(status);}};_this._performOperationAndHandleStatusAsync=function _callee(operation){var video,handle,status;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:video=_this._nativeRef.current;if(video){_context.next=3;break;}throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");case 3:handle=findNodeHandle(_this._nativeRef.current);_context.next=6;return _regeneratorRuntime.awrap(operation(handle));case 6:status=_context.sent;_this._handleNewStatus(status);return _context.abrupt(\"return\",status);case 9:case\"end\":return _context.stop();}}},null,null,null,Promise);};_this._setFullscreen=function _callee2(value){return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExpoVideoViewManager.setFullscreen(tag,value);}));case 1:case\"end\":return _context2.stop();}}},null,null,null,Promise);};_this.presentFullscreenPlayer=function _callee3(){return _regeneratorRuntime.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",_this._setFullscreen(true));case 1:case\"end\":return _context3.stop();}}},null,null,null,Promise);};_this.presentIOSFullscreenPlayer=function(){console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");return _this.presentFullscreenPlayer();};_this.presentFullscreenPlayerAsync=function _callee4(){return _regeneratorRuntime.async(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return _regeneratorRuntime.awrap(_this.presentFullscreenPlayer());case 2:return _context4.abrupt(\"return\",_context4.sent);case 3:case\"end\":return _context4.stop();}}},null,null,null,Promise);};_this.dismissFullscreenPlayer=function _callee5(){return _regeneratorRuntime.async(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt(\"return\",_this._setFullscreen(false));case 1:case\"end\":return _context5.stop();}}},null,null,null,Promise);};_this.dismissIOSFullscreenPlayer=function(){console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");_this.dismissFullscreenPlayer();};_this.getStatusAsync=function _callee6(){return _regeneratorRuntime.async(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:return _context6.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.getStatusForVideo(tag);}));case 1:case\"end\":return _context6.stop();}}},null,null,null,Promise);};_this.loadAsync=function _callee7(source){var initialStatus,downloadFirst,_await$getNativeSourc,nativeSource,fullInitialStatus,_args7=arguments;return _regeneratorRuntime.async(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:initialStatus=_args7.length>1&&_args7[1]!==undefined?_args7[1]:{};downloadFirst=_args7.length>2&&_args7[2]!==undefined?_args7[2]:true;_context7.next=4;return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source,initialStatus,downloadFirst));case 4:_await$getNativeSourc=_context7.sent;nativeSource=_await$getNativeSourc.nativeSource;fullInitialStatus=_await$getNativeSourc.fullInitialStatus;return _context7.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.loadForVideo(tag,nativeSource,fullInitialStatus);}));case 8:case\"end\":return _context7.stop();}}},null,null,null,Promise);};_this.unloadAsync=function _callee8(){return _regeneratorRuntime.async(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:return _context8.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.unloadForVideo(tag);}));case 1:case\"end\":return _context8.stop();}}},null,null,null,Promise);};_this.setStatusAsync=function _callee9(status){return _regeneratorRuntime.async(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:assertStatusValuesInBounds(status);return _context9.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.setStatusForVideo(tag,status);}));case 2:case\"end\":return _context9.stop();}}},null,null,null,Promise);};_this.replayAsync=function _callee10(){var status,_args10=arguments;return _regeneratorRuntime.async(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:status=_args10.length>0&&_args10[0]!==undefined?_args10[0]:{};if(!(status.positionMillis&&status.positionMillis!==0)){_context10.next=3;break;}throw new Error('Requested position after replay has to be 0.');case 3:return _context10.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return ExponentAV.replayVideo(tag,_objectSpread(_objectSpread({},status),{},{positionMillis:0,shouldPlay:true}));}));case 4:case\"end\":return _context10.stop();}}},null,null,null,Promise);};_this._nativeOnPlaybackStatusUpdate=function(event){_this._handleNewStatus(event.nativeEvent);};_this._nativeOnLoadStart=function(){if(_this.props.onLoadStart){_this.props.onLoadStart();}};_this._nativeOnLoad=function(event){if(_this.props.onLoad){_this.props.onLoad(event.nativeEvent);}_this._handleNewStatus(event.nativeEvent);};_this._nativeOnError=function(event){var error=event.nativeEvent.error;if(_this.props.onError){_this.props.onError(error);}_this._handleNewStatus(getUnloadedStatus(error));};_this._nativeOnReadyForDisplay=function(event){if(_this.props.onReadyForDisplay){_this.props.onReadyForDisplay(event.nativeEvent);}};_this._nativeOnFullscreenUpdate=function(event){if(_this.props.onIOSFullscreenUpdate&&_this.props.onFullscreenUpdate){console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");}else if(_this.props.onIOSFullscreenUpdate){console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");}if(_this.props.onIOSFullscreenUpdate){_this.props.onIOSFullscreenUpdate(event.nativeEvent);}if(_this.props.onFullscreenUpdate){_this.props.onFullscreenUpdate(event.nativeEvent);}};_this._renderPoster=function(){return _this.props.usePoster&&_this.state.showPoster?React.createElement(Image,{style:[_STYLES.poster,_this.props.posterStyle],source:_this.props.posterSource,__self:_assertThisInitialized(_this),__source:{fileName:_jsxFileName,lineNumber:322,columnNumber:13}}):null;};_this.state={showPoster:!!props.usePoster};return _this;}_createClass(Video,[{key:\"setNativeProps\",value:function setNativeProps(nativeProps){var nativeVideo=this._nativeRef.current;if(!nativeVideo)throw new Error(\"native video reference is not defined.\");nativeVideo.setNativeProps(nativeProps);}},{key:\"setOnPlaybackStatusUpdate\",value:function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate){this._onPlaybackStatusUpdate=onPlaybackStatusUpdate;this.getStatusAsync();}},{key:\"render\",value:function render(){var source=getNativeSourceFromSource(this.props.source)||undefined;var nativeResizeMode=ExpoVideoManagerConstants.ScaleNone;if(this.props.resizeMode){var resizeMode=this.props.resizeMode;if(resizeMode===ResizeMode.STRETCH){nativeResizeMode=ExpoVideoManagerConstants.ScaleToFill;}else if(resizeMode===ResizeMode.CONTAIN){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFit;}else if(resizeMode===ResizeMode.COVER){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFill;}}var status=_objectSpread({},this.props.status);status.progressUpdateIntervalMillis=this.props.progressUpdateIntervalMillis;status.positionMillis=this.props.positionMillis;status.shouldPlay=this.props.shouldPlay;status.rate=this.props.rate;status.shouldCorrectPitch=this.props.shouldCorrectPitch;status.volume=this.props.volume;status.isMuted=this.props.isMuted;status.isLooping=this.props.isLooping;var nativeProps=_objectSpread(_objectSpread({},omit(this.props,['source','onPlaybackStatusUpdate','usePoster','posterSource','posterStyle'].concat(_toConsumableArray(Object.keys(status))))),{},{style:StyleSheet.flatten([_STYLES.base,this.props.style]),source:source,resizeMode:nativeResizeMode,status:status,onStatusUpdate:this._nativeOnPlaybackStatusUpdate,onLoadStart:this._nativeOnLoadStart,onLoad:this._nativeOnLoad,onError:this._nativeOnError,onReadyForDisplay:this._nativeOnReadyForDisplay,onFullscreenUpdate:this._nativeOnFullscreenUpdate});return React.createElement(View,{style:nativeProps.style,pointerEvents:\"box-none\",__self:this,__source:{fileName:_jsxFileName,lineNumber:377,columnNumber:13}},React.createElement(ExponentVideo,_extends({ref:this._nativeRef},nativeProps,{style:_STYLES.video,__self:this,__source:{fileName:_jsxFileName,lineNumber:378,columnNumber:17}})),this._renderPoster());}}]);return Video;}(React.Component);Video.RESIZE_MODE_CONTAIN=ResizeMode.CONTAIN;Video.RESIZE_MODE_COVER=ResizeMode.COVER;Video.RESIZE_MODE_STRETCH=ResizeMode.STRETCH;Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;Video.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;Video.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;Video.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;Video.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;export{Video as default};function omit(props,propNames){var copied=_objectSpread({},props);for(var _iterator=_createForOfIteratorHelperLoose(propNames),_step;!(_step=_iterator()).done;){var propName=_step.value;delete copied[propName];}return copied;}_extends(Video.prototype,PlaybackMixin);","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/packages/expo-av/src/Video.tsx"],"names":["FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","_STYLES","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","React","Component","RESIZE_MODE_CONTAIN","ResizeMode","CONTAIN","RESIZE_MODE_COVER","COVER","RESIZE_MODE_STRETCH","STRETCH","_nativeRef","_onPlaybackStatusUpdate","showPoster","props","usePoster","nativeVideo","status","handle","findNodeHandle","operation","console","ExponentAV","initialStatus","downloadFirst","nativeSource","fullInitialStatus","getNativeSourceAndFullInitialStatusForLoadAsync","assertStatusValuesInBounds","positionMillis","shouldPlay","event","error","getUnloadedStatus","source","getNativeSourceFromSource","nativeResizeMode","nativeProps","omit","Object","style","StyleSheet","onStatusUpdate","onLoadStart","onLoad","onError","onReadyForDisplay","onFullscreenUpdate","_nativeOnFullscreenUpdate","copied","propName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {findNodeHandle, Image, NativeMethods, StyleSheet, View} from 'react-native';\n\nimport {\n    assertStatusValuesInBounds,\n    AVPlaybackNativeSource,\n    AVPlaybackSource,\n    AVPlaybackStatus,\n    AVPlaybackStatusToSet,\n    getNativeSourceAndFullInitialStatusForLoadAsync,\n    getNativeSourceFromSource,\n    getUnloadedStatus,\n    Playback,\n    PlaybackMixin,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n    ExponentVideoComponent,\n    ResizeMode,\n    VideoFullscreenUpdateEvent,\n    VideoNativeProps,\n    VideoNaturalSize,\n    VideoProps,\n    VideoReadyForDisplayEvent,\n    VideoState,\n} from './Video.types';\n\nexport {\n    ResizeMode\n};\nexport type {\n    ExponentVideoComponent,\n    VideoFullscreenUpdateEvent,\n    VideoNativeProps,\n    VideoNaturalSize,\n    VideoProps,\n    VideoReadyForDisplayEvent,\n\n    VideoState,\n    AVPlaybackStatus,\n    AVPlaybackStatusToSet,\n    AVPlaybackNativeSource\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n    base: {\n        overflow: 'hidden',\n    },\n    poster: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        resizeMode: 'contain',\n    },\n    video: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n    },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nexport default class Video extends React.Component<VideoProps, VideoState> implements Playback {\n    static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n    static RESIZE_MODE_COVER = ResizeMode.COVER;\n    static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n    static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n    static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n    static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n    static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n    static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n    static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n    static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n    static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n    _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n    _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n    // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n    constructor(props: VideoProps) {\n        super(props);\n        this.state = {\n            showPoster: !!props.usePoster,\n        };\n    }\n\n    setNativeProps(nativeProps: VideoNativeProps) {\n        const nativeVideo = this._nativeRef.current;\n        if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n        nativeVideo.setNativeProps(nativeProps);\n    }\n\n    // Internal methods\n\n    _handleNewStatus = (status: AVPlaybackStatus) => {\n        if (\n            this.state.showPoster &&\n            status.isLoaded &&\n            (status.isPlaying || status.positionMillis !== 0)\n        ) {\n            this.setState({showPoster: false});\n        }\n\n        if (this.props.onPlaybackStatusUpdate) {\n            this.props.onPlaybackStatusUpdate(status);\n        }\n        if (this._onPlaybackStatusUpdate) {\n            this._onPlaybackStatusUpdate(status);\n        }\n    };\n\n    _performOperationAndHandleStatusAsync = async (\n        operation: (tag: number) => Promise<AVPlaybackStatus>\n    ): Promise<AVPlaybackStatus> => {\n        const video = this._nativeRef.current;\n        if (!video) {\n            throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n        }\n\n        const handle = findNodeHandle(this._nativeRef.current)!;\n        const status: AVPlaybackStatus = await operation(handle);\n        this._handleNewStatus(status);\n        return status;\n    };\n\n    // ### iOS Fullscreening API ###\n\n    _setFullscreen = async (value: boolean) => {\n        return this._performOperationAndHandleStatusAsync((tag: number) =>\n            ExpoVideoViewManager.setFullscreen(tag, value)\n        );\n    };\n\n    presentFullscreenPlayer = async () => {\n        return this._setFullscreen(true);\n    };\n\n    presentIOSFullscreenPlayer = () => {\n        console.warn(\n            \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n        );\n        return this.presentFullscreenPlayer();\n    };\n\n    presentFullscreenPlayerAsync = async () => {\n        return await this.presentFullscreenPlayer();\n    };\n\n    dismissFullscreenPlayer = async () => {\n        return this._setFullscreen(false);\n    };\n\n    dismissIOSFullscreenPlayer = () => {\n        console.warn(\n            \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n        );\n        this.dismissFullscreenPlayer();\n    };\n\n    // ### Unified playback API ### (consistent with Audio.js)\n    // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n    // Get status API\n\n    getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n        return this._performOperationAndHandleStatusAsync((tag: number) =>\n            ExponentAV.getStatusForVideo(tag)\n        );\n    };\n\n    // Loading / unloading API\n\n    loadAsync = async (\n        source: AVPlaybackSource,\n        initialStatus: AVPlaybackStatusToSet = {},\n        downloadFirst: boolean = true\n    ): Promise<AVPlaybackStatus> => {\n        const {\n            nativeSource,\n            fullInitialStatus,\n        } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n        return this._performOperationAndHandleStatusAsync((tag: number) =>\n            ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n        );\n    };\n\n    // Equivalent to setting URI to null.\n    unloadAsync = async (): Promise<AVPlaybackStatus> => {\n        return this._performOperationAndHandleStatusAsync((tag: number) =>\n            ExponentAV.unloadForVideo(tag)\n        );\n    };\n\n    // Set status API (only available while isLoaded = true)\n\n    setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n        assertStatusValuesInBounds(status);\n        return this._performOperationAndHandleStatusAsync((tag: number) =>\n            ExponentAV.setStatusForVideo(tag, status)\n        );\n    };\n\n    replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n        if (status.positionMillis && status.positionMillis !== 0) {\n            throw new Error('Requested position after replay has to be 0.');\n        }\n\n        return this._performOperationAndHandleStatusAsync((tag: number) =>\n            ExponentAV.replayVideo(tag, {\n                ...status,\n                positionMillis: 0,\n                shouldPlay: true,\n            })\n        );\n    };\n\n    setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n        this.getStatusAsync();\n    }\n\n    // Methods of the Playback interface that are set via PlaybackMixin\n    playAsync!: () => Promise<AVPlaybackStatus>;\n    playFromPositionAsync!: (\n        positionMillis: number,\n        tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n    ) => Promise<AVPlaybackStatus>;\n    pauseAsync!: () => Promise<AVPlaybackStatus>;\n    stopAsync!: () => Promise<AVPlaybackStatus>;\n    setPositionAsync!: (\n        positionMillis: number,\n        tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n    ) => Promise<AVPlaybackStatus>;\n    setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n    setVolumeAsync!: (volume: number) => Promise<AVPlaybackStatus>;\n    setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n    setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n    setProgressUpdateIntervalAsync!: (\n        progressUpdateIntervalMillis: number\n    ) => Promise<AVPlaybackStatus>;\n\n    // ### Callback wrappers ###\n\n    _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n        this._handleNewStatus(event.nativeEvent);\n    };\n\n    // TODO make sure we are passing the right stuff\n    _nativeOnLoadStart = () => {\n        if (this.props.onLoadStart) {\n            this.props.onLoadStart();\n        }\n    };\n\n    _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n        if (this.props.onLoad) {\n            this.props.onLoad(event.nativeEvent);\n        }\n        this._handleNewStatus(event.nativeEvent);\n    };\n\n    _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n        const error: string = event.nativeEvent.error;\n        if (this.props.onError) {\n            this.props.onError(error);\n        }\n        this._handleNewStatus(getUnloadedStatus(error));\n    };\n\n    _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n        if (this.props.onReadyForDisplay) {\n            this.props.onReadyForDisplay(event.nativeEvent);\n        }\n    };\n\n    _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n        if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n            console.warn(\n                \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n            );\n        } else if (this.props.onIOSFullscreenUpdate) {\n            console.warn(\n                \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n            );\n        }\n\n        if (this.props.onIOSFullscreenUpdate) {\n            this.props.onIOSFullscreenUpdate(event.nativeEvent);\n        }\n\n        if (this.props.onFullscreenUpdate) {\n            this.props.onFullscreenUpdate(event.nativeEvent);\n        }\n    };\n\n    _renderPoster = () =>\n        this.props.usePoster && this.state.showPoster ? (\n            // @ts-ignore: the react-native type declarations are overly restrictive\n            <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!}/>\n        ) : null;\n\n    render() {\n        const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n        let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n        if (this.props.resizeMode) {\n            const resizeMode = this.props.resizeMode;\n            if (resizeMode === ResizeMode.STRETCH) {\n                nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n            } else if (resizeMode === ResizeMode.CONTAIN) {\n                nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n            } else if (resizeMode === ResizeMode.COVER) {\n                nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n            }\n        }\n\n        // Set status via individual props\n        const status: AVPlaybackStatusToSet = {...this.props.status};\n\n\n        status.progressUpdateIntervalMillis = this.props.progressUpdateIntervalMillis\n        status.positionMillis = this.props.positionMillis\n        status.shouldPlay = this.props.shouldPlay\n        status.rate = this.props.rate\n        status.shouldCorrectPitch = this.props.shouldCorrectPitch\n        status.volume = this.props.volume\n        status.isMuted = this.props.isMuted\n        status.isLooping = this.props.isLooping\n\n        // Replace selected native props\n        // @ts-ignore: TypeScript thinks \"children\" is not in the list of props\n        const nativeProps: VideoNativeProps = {\n            ...omit(this.props, [\n                'source',\n                'onPlaybackStatusUpdate',\n                'usePoster',\n                'posterSource',\n                'posterStyle',\n                ...Object.keys(status),\n            ]),\n            style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n            source,\n            resizeMode: nativeResizeMode,\n            status,\n            onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n            onLoadStart: this._nativeOnLoadStart,\n            onLoad: this._nativeOnLoad,\n            onError: this._nativeOnError,\n            onReadyForDisplay: this._nativeOnReadyForDisplay,\n            onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n        };\n\n        return (\n            <View style={nativeProps.style} pointerEvents=\"box-none\">\n                <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video}/>\n                {this._renderPoster()}\n            </View>\n        );\n    }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n    const copied = {...props};\n    for (const propName of propNames) {\n        delete copied[propName];\n    }\n    return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n"]},"metadata":{},"sourceType":"module"}