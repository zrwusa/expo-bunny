{"ast":null,"code":"import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}export var AbstractBinaryTree=function(){function AbstractBinaryTree(idOrNode,val,count,allowDuplicate){_classCallCheck(this,AbstractBinaryTree);this._root=null;this._size=0;this._allowDuplicate=true;this._visitedId=[];this._visitedVal=[];this._visitedNode=[];this._visitedCount=[];this._visitedLeftSum=[];if(allowDuplicate===undefined){allowDuplicate=false;}this._allowDuplicate=allowDuplicate;if(idOrNode!==undefined){if(typeof idOrNode==='number'){this.root=this.createNode(idOrNode,val,count);}else{this.root=idOrNode;}this._size=1;}}_createClass(AbstractBinaryTree,[{key:\"root\",get:function get(){return this._root;},set:function set(v){if(v){v.parent=null;v.familyPosition=0;}this._root=v;}},{key:\"size\",get:function get(){return this.size;},set:function set(v){this._size=v;}},{key:\"allowDuplicate\",get:function get(){return this._allowDuplicate;},set:function set(v){this._allowDuplicate=v;}},{key:\"clear\",value:function clear(){this.root=null;this._size=0;}},{key:\"isEmpty\",value:function isEmpty(){return this._size===0;}},{key:\"insert\",value:function insert(id,val,count){var _this=this;if(count===undefined){count=1;}var _bfs=function _bfs(root,newNode){var queue=[root];while(queue.length>0){var cur=queue.shift();if(cur){if(!cur.left){newNode.parent=cur;newNode.familyPosition=1;cur.left=newNode;_this._size++;return cur.left;}if(!cur.right){newNode.parent=cur;newNode.familyPosition=2;cur.right=newNode;_this._size++;return cur.right;}cur.left&&queue.push(cur.left);cur.right&&queue.push(cur.right);}else{return null;}}return null;};var inserted=[];if(this._allowDuplicate){if(this.root){for(var i=0;i<count;i++){inserted.push(_bfs(this.root,new BinaryTreeNode(id,val,1)));}}else{this.root=new BinaryTreeNode(id,val,1);inserted.push(this.root);this._size=1;for(var _i=0;_i<count-1;_i++){inserted.push(_bfs(this.root,new BinaryTreeNode(id,val,1)));}}}else{var existNode=this.getNode(id);if(this.root){if(existNode){existNode.count+=count;inserted.push(existNode);}else{inserted.push(_bfs(this.root,new BinaryTreeNode(id,val,count)));}}else{this.root=new BinaryTreeNode(id,val,count);this._size=1;inserted.push(this.root);}}return inserted;}},{key:\"remove\",value:function remove(id){var nodes=[];nodes=this.getNodes(id);for(var _iterator=_createForOfIteratorHelperLoose(nodes),_step;!(_step=_iterator()).done;){var _node=_step.value;switch(_node.familyPosition){case 0:if(_node.left){}else if(_node.right){}break;case 1:break;case 2:break;}}return[{deleted:null,needBalanced:null}];}},{key:\"getDepth\",value:function getDepth(node){var depth=0;while(node.parent!==null){depth++;node=node.parent;}return depth;}},{key:\"getMinHeight\",value:function getMinHeight(beginRoot){var _beginRoot=beginRoot||this.root;var _getMinHeight=function _getMinHeight(cur){if(!cur)return 0;if(!cur.left&&!cur.right)return 0;var leftMinHeight=_getMinHeight(cur.left);var rightMinHeight=_getMinHeight(cur.right);return Math.min(leftMinHeight,rightMinHeight)+1;};if(_beginRoot){return _getMinHeight(_beginRoot);}else{return-1;}}},{key:\"getHeight\",value:function getHeight(beginRoot){var _beginRoot=beginRoot||this.root;var _getMaxHeight=function _getMaxHeight(cur){if(!cur)return 0;if(!cur.left&&!cur.right)return 0;var leftHeight=_getMaxHeight(cur.left);var rightHeight=_getMaxHeight(cur.right);return Math.max(leftHeight,rightHeight)+1;};if(_beginRoot){return _getMaxHeight(_beginRoot);}else{return-1;}}},{key:\"isBalanced\",value:function isBalanced(beginRoot){return this.getMinHeight(beginRoot)>=this.getHeight(beginRoot)+1;}},{key:\"getNodes\",value:function getNodes(nodeProperty,propertyName,onlyOne){if(propertyName===undefined){propertyName='id';}var result=[];function _traverse(cur){switch(propertyName){case'id':if(cur.id===nodeProperty){result.push(cur);if(onlyOne)return;}break;case'count':if(cur.count===nodeProperty){result.push(cur);if(onlyOne)return;}break;case'val':if(cur.val===nodeProperty){result.push(cur);if(onlyOne)return;}break;case'allLesserSum':if(cur.allLesserSum===nodeProperty){result.push(cur);if(onlyOne)return;}break;default:if(cur.id===nodeProperty){result.push(cur);if(onlyOne)return;}break;}if(!cur.left&&!cur.right)return null;cur.left?_traverse(cur.left):null;cur.right?_traverse(cur.right):null;}this.root&&_traverse(this.root);return result;}},{key:\"getNode\",value:function getNode(nodeProperty,propertyName){if(propertyName===undefined){propertyName='id';}var node=this.getNodes(nodeProperty,propertyName,true)[0];if(node){return node;}else{return null;}}},{key:\"getPathToRoot\",value:function getPathToRoot(node){var result=[];while(node.parent!==null){result.unshift(node);node=node.parent;}result.unshift(node);return result;}},{key:\"_resetResults\",value:function _resetResults(){this._visitedId=[];this._visitedVal=[];this._visitedNode=[];this._visitedCount=[];this._visitedLeftSum=[];}},{key:\"_pushByPropertyName\",value:function _pushByPropertyName(node,nodeOrPropertyName){if(nodeOrPropertyName===undefined){nodeOrPropertyName='id';}switch(nodeOrPropertyName){case'id':this._visitedId.push(node.id);break;case'val':this._visitedVal.push(node.val);break;case'node':this._visitedNode.push(node);break;case'count':this._visitedCount.push(node.count);break;case'allLesserSum':this._visitedLeftSum.push(node.allLesserSum);break;default:this._visitedId.push(node.id);break;}}},{key:\"_getResultByPropertyName\",value:function _getResultByPropertyName(nodeOrPropertyName){if(nodeOrPropertyName===undefined){nodeOrPropertyName='id';}switch(nodeOrPropertyName){case'id':return this._visitedId;case'val':return this._visitedVal;case'node':return this._visitedNode;case'count':return this._visitedCount;case'allLesserSum':return this._visitedLeftSum;default:return this._visitedId;}}},{key:\"BFS\",value:function BFS(nodeOrPropertyName){if(nodeOrPropertyName===undefined){nodeOrPropertyName='id';}this._resetResults();var queue=new Array();queue.push(this.root);while(queue.length!==0){var cur=queue.shift();if(cur){this._pushByPropertyName(cur,nodeOrPropertyName);if((cur==null?void 0:cur.left)!==null)queue.push(cur.left);if((cur==null?void 0:cur.right)!==null)queue.push(cur.right);}}return this._getResultByPropertyName(nodeOrPropertyName);}},{key:\"DFS\",value:function DFS(pattern,nodeOrPropertyName){var _this2=this;if(pattern===undefined){pattern='in';}if(nodeOrPropertyName===undefined){nodeOrPropertyName='id';}this._resetResults();var _traverse=function _traverse(node){switch(pattern){case'in':if(node.left)_traverse(node.left);_this2._pushByPropertyName(node,nodeOrPropertyName);if(node.right)_traverse(node.right);break;case'pre':_this2._pushByPropertyName(node,nodeOrPropertyName);if(node.left)_traverse(node.left);if(node.right)_traverse(node.right);break;case'post':if(node.left)_traverse(node.left);if(node.right)_traverse(node.right);_this2._pushByPropertyName(node,nodeOrPropertyName);break;}};this.root&&_traverse(this.root);return this._getResultByPropertyName(nodeOrPropertyName);}},{key:\"DFSIterative\",value:function DFSIterative(pattern,nodeOrPropertyName){pattern=pattern||'in';nodeOrPropertyName=nodeOrPropertyName||'id';this._resetResults();if(!this.root)return this._getResultByPropertyName(nodeOrPropertyName);var stack=[];stack.push({opt:0,node:this.root});while(stack.length>0){var cur=stack.pop();if(!cur||!cur.node)continue;if(cur.opt===1){this._pushByPropertyName(cur.node,nodeOrPropertyName);}else{switch(pattern){case'in':stack.push({opt:0,node:cur.node.right});stack.push({opt:1,node:cur.node});stack.push({opt:0,node:cur.node.left});break;case'pre':stack.push({opt:0,node:cur.node.right});stack.push({opt:0,node:cur.node.left});stack.push({opt:1,node:cur.node});break;case'post':stack.push({opt:1,node:cur.node});stack.push({opt:0,node:cur.node.right});stack.push({opt:0,node:cur.node.left});break;default:stack.push({opt:0,node:cur.node.right});stack.push({opt:1,node:cur.node});stack.push({opt:0,node:cur.node.left});break;}}}return this._getResultByPropertyName(nodeOrPropertyName);}},{key:\"getPredecessor\",value:function getPredecessor(node){if(node.left){var predecessor=node.left;while(predecessor.right&&predecessor.right!==node){predecessor=predecessor.right;}return predecessor;}else{return node;}}},{key:\"morris\",value:function morris(pattern,nodeOrPropertyName){var _this3=this;if(this.root===null){return[];}pattern=pattern||'in';nodeOrPropertyName=nodeOrPropertyName||'id';this._resetResults();var cur=this.root;switch(pattern){case'in':while(cur){if(cur.left){var predecessor=this.getPredecessor(cur);if(!predecessor.right){predecessor.right=cur;cur=cur.left;continue;}else{predecessor.right=null;}}this._pushByPropertyName(cur,nodeOrPropertyName);cur=cur.right;}break;case'pre':while(cur){if(cur.left){var _predecessor=this.getPredecessor(cur);if(!_predecessor.right){_predecessor.right=cur;this._pushByPropertyName(cur,nodeOrPropertyName);cur=cur.left;continue;}else{_predecessor.right=null;}}else{this._pushByPropertyName(cur,nodeOrPropertyName);}cur=cur.right;}break;case'post':var reverseEdge=function reverseEdge(node){var pre=null;var next=null;while(node){next=node.right;node.right=pre;pre=node;node=next;}return pre;};var printEdge=function printEdge(node){var tail=reverseEdge(node);var cur=tail;while(cur){_this3._pushByPropertyName(cur,nodeOrPropertyName);cur=cur.right;}reverseEdge(tail);};while(cur){if(cur.left){var _predecessor2=this.getPredecessor(cur);if(_predecessor2.right===null){_predecessor2.right=cur;cur=cur.left;continue;}else{_predecessor2.right=null;printEdge(cur.left);}}cur=cur.right;}printEdge(this.root);break;}return this._getResultByPropertyName(nodeOrPropertyName);}},{key:\"subTreeSum\",value:function subTreeSum(subTreeRoot,propertyName){if(propertyName===undefined){propertyName='id';}var sum=0;function _traverse(cur){var needSum;switch(propertyName){case'id':needSum=cur.id;break;case'count':needSum=cur.count;break;case'allLesserSum':needSum=cur.allLesserSum;break;default:needSum=cur.id;break;}sum+=needSum;if(!cur.left&&!cur.right)return;cur.left&&_traverse(cur.left);cur.right&&_traverse(cur.right);}subTreeRoot&&_traverse(subTreeRoot);return sum;}}]);return AbstractBinaryTree;}();export var BinaryTreeNode=function(){function BinaryTreeNode(id,val,count){_classCallCheck(this,BinaryTreeNode);this._val=null;this._left=null;this._right=null;this._parent=null;this._familyPosition=0;this._count=1;this._height=0;this._allLesserSum=0;if(val===undefined){val=null;}if(count===undefined){count=1;}this._id=id;this._val=val;this._count=count;}_createClass(BinaryTreeNode,[{key:\"id\",get:function get(){return this._id;},set:function set(v){this._id=v;}},{key:\"val\",get:function get(){return this._val;},set:function set(v){this._val=v;}},{key:\"left\",get:function get(){return this._left;},set:function set(v){if(v){v.parent=this;v.familyPosition=1;}this._left=v;}},{key:\"right\",get:function get(){return this._right;},set:function set(v){if(v){v.parent=this;v.familyPosition=2;}this._right=v;}},{key:\"parent\",get:function get(){return this._parent;},set:function set(v){this._parent=v;}},{key:\"familyPosition\",get:function get(){return this._familyPosition;},set:function set(v){this._familyPosition=v;}},{key:\"count\",get:function get(){return this._count;},set:function set(v){this._count=v;}},{key:\"height\",get:function get(){return this._height;},set:function set(v){this._height=v;}},{key:\"allLesserSum\",get:function get(){return this._allLesserSum;},set:function set(v){this._allLesserSum=v;}},{key:\"replaceLocation\",value:function replaceLocation(replaceNode){this._id=replaceNode.id;this._val=replaceNode.val;this._count=replaceNode.count;this._allLesserSum=replaceNode.allLesserSum;this._height=replaceNode.height;return true;}},{key:\"swapLocation\",value:function swapLocation(swapNode){var tempNode=new BinaryTreeNode(swapNode.id);var val=swapNode.val,count=swapNode.count,height=swapNode.height,allLesserSum=swapNode.allLesserSum;tempNode.val=val;tempNode.count=count;tempNode.height=height;tempNode.allLesserSum=allLesserSum;swapNode.id=this._id;swapNode.val=this._val;swapNode.count=this._count;swapNode.height=this._height;swapNode.allLesserSum=this._allLesserSum;this._id=tempNode.id;this._val=tempNode.val;this._count=tempNode.count;this._height=tempNode.height;this._allLesserSum=tempNode.allLesserSum;return swapNode;}},{key:\"clone\",value:function clone(){return new BinaryTreeNode(this._id,this._val,this._count);}}]);return BinaryTreeNode;}();export var BinaryTree=function(_AbstractBinaryTree){_inherits(BinaryTree,_AbstractBinaryTree);var _super=_createSuper(BinaryTree);function BinaryTree(){_classCallCheck(this,BinaryTree);return _super.apply(this,arguments);}_createClass(BinaryTree,[{key:\"createNode\",value:function createNode(id,val,count){return new BinaryTreeNode(id,val,count);}}]);return BinaryTree;}(AbstractBinaryTree);","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/utils/data-structures/binary-tree/binary-tree.ts"],"names":["AbstractBinaryTree","_root","v","_size","_allowDuplicate","allowDuplicate","idOrNode","count","_bfs","queue","cur","newNode","inserted","i","existNode","nodes","node","deleted","needBalanced","depth","_beginRoot","beginRoot","_getMinHeight","leftMinHeight","rightMinHeight","Math","_getMaxHeight","leftHeight","rightHeight","propertyName","result","_traverse","nodeOrPropertyName","pattern","stack","opt","root","right","left","predecessor","reverseEdge","pre","next","printEdge","tail","sum","needSum","subTreeRoot","BinaryTreeNode","_val","_left","_right","_parent","_familyPosition","_count","_height","_allLesserSum","val","replaceNode","tempNode","swapNode","height","allLesserSum","BinaryTree"],"mappings":"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","sourcesContent":["export type BinaryTreeNodePropertyName = 'id' | 'val' | 'count' | 'allLesserSum';\nexport type NodeOrPropertyName = 'node' | BinaryTreeNodePropertyName;\nexport type DFSOrderPattern = 'in' | 'pre' | 'post';\nexport type BinaryTreeNodeId = number;\nexport type FamilyPosition = 0 | 1 | 2;\nexport type BinaryTreeDeletedResult<T> = { deleted: BinaryTreeNode<T> | null, needBalanced: BinaryTreeNode<T> | null };\nexport type ResultsByType<T> = Array<T | null> | BinaryTreeNode<T> [] | number[] | BinaryTreeNodeId[];\n\nexport interface I_BinaryTree<T> {\n    clear(): void;\n\n    isEmpty(): boolean;\n\n    insert(id: BinaryTreeNodeId, val?: T | null, count?: number): (BinaryTreeNode<T> | null)[];\n\n    getDepth(node: BinaryTreeNode<T>): number;\n\n    getMinHeight(beginRoot?: BinaryTreeNode<T> | null): number;\n\n    getHeight(beginRoot?: BinaryTreeNode<T> | null): number;\n\n    isBalanced(beginRoot?: BinaryTreeNode<T> | null): boolean;\n\n    getNodes(nodeProperty: BinaryTreeNodeId | number | T, propertyName ?: BinaryTreeNodePropertyName, onlyOne ?: boolean): BinaryTreeNode<T>[];\n\n    getNode(nodeProperty: BinaryTreeNodeId | number | T, propertyName ?: BinaryTreeNodePropertyName): BinaryTreeNode<T> | null;\n\n    getPathToRoot(node: BinaryTreeNode<T>): BinaryTreeNode<T>[];\n\n    BFS(): BinaryTreeNodeId[];\n\n    BFS(nodeOrPropertyName: 'id'): BinaryTreeNodeId[];\n\n    BFS(nodeOrPropertyName: 'val'): (T | null)[];\n\n    BFS(nodeOrPropertyName: 'node'): BinaryTreeNode<T>[];\n\n    BFS(nodeOrPropertyName: 'count'): number[];\n\n    BFS(nodeOrPropertyName: 'allLesserSum'): number[];\n\n    BFS(nodeOrPropertyName ?: NodeOrPropertyName): ResultsByType<T>;\n\n    DFS(): BinaryTreeNodeId[];\n\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'id'): BinaryTreeNodeId[];\n\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'val'): (T | null)[];\n\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'node'): BinaryTreeNode<T>[];\n\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'count'): number[];\n\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'allLesserSum'): number[];// TODO in BinaryTree not implemented\n\n    DFS(pattern ?: 'in' | 'pre' | 'post', nodeOrPropertyName ?: NodeOrPropertyName): ResultsByType<T>;\n\n    DFSIterative(): BinaryTreeNodeId[];\n\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'id'): BinaryTreeNodeId[];\n\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'val'): (T | null)[];\n\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'node'): BinaryTreeNode<T>[];\n\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'count'): number[];\n\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'allLesserSum'): number[];// TODO in BinaryTree not implemented\n\n    DFSIterative(pattern ?: 'in' | 'pre' | 'post', nodeOrPropertyName ?: NodeOrPropertyName): ResultsByType<T>;\n\n    morris(): BinaryTreeNodeId[];\n\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'id'): BinaryTreeNodeId[];\n\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'val'): (T | null)[];\n\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'node'): BinaryTreeNode<T>[];\n\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'count'): number[];\n\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'allLesserSum'): number[];// TODO in BinaryTree not implemented\n\n    morris(pattern ?: 'in' | 'pre' | 'post'): BinaryTreeNode<T>[];\n\n    subTreeSum(subTreeRoot: BinaryTreeNode<T>, propertyName ?: BinaryTreeNodePropertyName): number;\n}\n\nexport abstract class AbstractBinaryTree<T> implements I_BinaryTree<T> {\n    protected _root: BinaryTreeNode<T> | null = null;\n    public get root(): BinaryTreeNode<T> | null {\n        return this._root;\n    }\n\n    public set root(v: BinaryTreeNode<T> | null) {\n        if (v) {\n            v.parent = null;\n            v.familyPosition = 0;\n        }\n        this._root = v;\n    }\n\n    protected _size: number = 0;\n    public get size(): number {\n        return this.size;\n    }\n\n    public set size(v: number) {\n        this._size = v;\n    }\n\n    protected _allowDuplicate: boolean = true;\n    public get allowDuplicate(): boolean {\n        return this._allowDuplicate;\n    }\n\n    public set allowDuplicate(v: boolean) {\n        this._allowDuplicate = v;\n    }\n\n    constructor(idOrNode?: BinaryTreeNodeId | BinaryTreeNode<T>, val?: T | null, count?: number, allowDuplicate?: boolean) {\n        if (allowDuplicate === undefined) {\n            allowDuplicate = false;\n        }\n        this._allowDuplicate = allowDuplicate;\n        if (idOrNode !== undefined) {\n            if (typeof idOrNode === 'number') {\n                this.root = this.createNode(idOrNode, val, count);\n            } else {\n                this.root = idOrNode;\n            }\n            this._size = 1;\n        }\n    }\n\n    abstract createNode(id: BinaryTreeNodeId, val?: T | null, count?: number): BinaryTreeNode<T>;\n\n    clear() {\n        this.root = null;\n        this._size = 0;\n    }\n\n    isEmpty(): boolean {\n        return this._size === 0;\n    }\n\n    insert(id: BinaryTreeNodeId, val?: T | null, count?: number): (BinaryTreeNode<T> | null)[] {\n        if (count === undefined) {\n            count = 1;\n        }\n        const _bfs = (root: BinaryTreeNode<T>, newNode: BinaryTreeNode<T>): BinaryTreeNode<T> | null => {\n            const queue: BinaryTreeNode<T>[] = [root];\n            while (queue.length > 0) {\n                const cur = queue.shift();\n                if (cur) {\n                    if (!cur.left) {\n                        newNode.parent = cur;\n                        newNode.familyPosition = 1;\n                        cur.left = newNode;\n                        this._size++;\n                        return cur.left;\n                    }\n                    if (!cur.right) {\n                        newNode.parent = cur;\n                        newNode.familyPosition = 2;\n                        cur.right = newNode;\n                        this._size++;\n                        return cur.right;\n                    }\n                    cur.left && queue.push(cur.left);\n                    cur.right && queue.push(cur.right);\n                } else {\n                    return null;\n                }\n            }\n            return null;\n        };\n        const inserted: (BinaryTreeNode<T> | null)[] = [];\n        if (this._allowDuplicate) {\n            if (this.root) {\n                for (let i = 0; i < count; i++) {\n                    inserted.push(_bfs(this.root, new BinaryTreeNode<T>(id, val, 1)));\n                }\n            } else {\n                this.root = new BinaryTreeNode<T>(id, val, 1);\n                inserted.push(this.root);\n                this._size = 1;\n                for (let i = 0; i < count - 1; i++) {\n                    inserted.push(_bfs(this.root, new BinaryTreeNode<T>(id, val, 1)));\n                }\n            }\n        } else {\n            const existNode = this.getNode(id);\n            if (this.root) {\n                if (existNode) {\n                    existNode.count += count;\n                    inserted.push(existNode);\n                } else {\n                    inserted.push(_bfs(this.root, new BinaryTreeNode<T>(id, val, count)));\n                }\n            } else {\n                this.root = new BinaryTreeNode<T>(id, val, count);\n                this._size = 1;\n                inserted.push(this.root);\n            }\n        }\n        return inserted;\n    }\n\n    remove(id: BinaryTreeNodeId): BinaryTreeDeletedResult<T>[] {\n        let nodes: BinaryTreeNode<T>[] = [];\n        nodes = this.getNodes(id);\n        for (let node of nodes) {\n            switch (node.familyPosition) {\n                case 0:\n                    if (node.left) {\n\n                    } else if (node.right) {\n\n                    }\n                    break;\n                case 1:\n                    break;\n                case 2:\n                    break;\n            }\n        }\n        return [{deleted: null, needBalanced: null}];\n    }\n\n    getDepth(node: BinaryTreeNode<T>): number {\n        let depth = 0;\n        while (node.parent !== null) {\n            depth++;\n            node = node.parent;\n        }\n        return depth;\n    }\n\n    getMinHeight(beginRoot?: BinaryTreeNode<T> | null): number {\n        const _beginRoot = beginRoot || this.root;\n        const _getMinHeight = (cur: BinaryTreeNode<T> | null): number => {\n            if (!cur) return 0;\n            if (!cur.left && !cur.right) return 0;\n            const leftMinHeight = _getMinHeight(cur.left);\n            const rightMinHeight = _getMinHeight(cur.right);\n            return Math.min(leftMinHeight, rightMinHeight) + 1;\n        };\n\n        if (_beginRoot) {\n            return _getMinHeight(_beginRoot);\n        } else {\n            return -1;\n        }\n    }\n\n    getHeight(beginRoot?: BinaryTreeNode<T> | null): number {\n        const _beginRoot = beginRoot || this.root;\n        const _getMaxHeight = (cur: BinaryTreeNode<T> | null): number => {\n            if (!cur) return 0;\n            if (!cur.left && !cur.right) return 0;\n            const leftHeight = _getMaxHeight(cur.left);\n            const rightHeight = _getMaxHeight(cur.right);\n            return Math.max(leftHeight, rightHeight) + 1;\n        };\n\n        if (_beginRoot) {\n            return _getMaxHeight(_beginRoot);\n        } else {\n            return -1;\n        }\n    }\n\n    isBalanced(beginRoot?: BinaryTreeNode<T> | null): boolean {\n        return (this.getMinHeight(beginRoot) >= this.getHeight(beginRoot) + 1);\n    }\n\n    getNodes(nodeProperty: BinaryTreeNodeId | number | T, propertyName ?: BinaryTreeNodePropertyName, onlyOne ?: boolean) {\n        if (propertyName === undefined) {\n            propertyName = 'id';\n        }\n\n        const result: BinaryTreeNode<T>[] = [];\n\n        function _traverse(cur: BinaryTreeNode<T>) {\n            switch (propertyName) {\n                case 'id':\n                    if (cur.id === nodeProperty) {\n                        result.push(cur);\n                        if (onlyOne) return;\n                    }\n                    break;\n                case 'count':\n                    if (cur.count === nodeProperty) {\n                        result.push(cur);\n                        if (onlyOne) return;\n                    }\n                    break;\n                case 'val':\n                    if (cur.val === nodeProperty) {\n                        result.push(cur);\n                        if (onlyOne) return;\n                    }\n                    break;\n                case 'allLesserSum':\n                    if (cur.allLesserSum === nodeProperty) {\n                        result.push(cur);\n                        if (onlyOne) return;\n                    }\n                    break;\n                default:\n                    if (cur.id === nodeProperty) {\n                        result.push(cur);\n                        if (onlyOne) return;\n                    }\n                    break;\n            }\n\n            if (!cur.left && !cur.right) return null;\n            cur.left ? _traverse(cur.left) : null;\n            cur.right ? _traverse(cur.right) : null;\n        }\n\n        this.root && _traverse(this.root);\n        return result;\n    }\n\n    getNode(nodeProperty: BinaryTreeNodeId | number | T, propertyName ?: BinaryTreeNodePropertyName): BinaryTreeNode<T> | null {\n        if (propertyName === undefined) {\n            propertyName = 'id';\n        }\n        const node = this.getNodes(nodeProperty, propertyName, true)[0];\n        if (node) {\n            return node;\n        } else {\n            return null;\n        }\n    }\n\n    getPathToRoot(node: BinaryTreeNode<T>): BinaryTreeNode<T>[] {\n        const result: BinaryTreeNode<T>[] = [];\n        while (node.parent !== null) {\n            result.unshift(node);\n            node = node.parent;\n        }\n        result.unshift(node);\n        return result;\n    }\n\n    protected _visitedId: BinaryTreeNodeId[] = [];\n    protected _visitedVal: Array<T | null> = [];\n    protected _visitedNode: BinaryTreeNode<T>[] = [];\n    protected _visitedCount: number[] = [];\n    protected _visitedLeftSum: number[] = [];\n\n    protected _resetResults() {\n        this._visitedId = [];\n        this._visitedVal = [];\n        this._visitedNode = [];\n        this._visitedCount = [];\n        this._visitedLeftSum = [];\n    }\n\n    protected _pushByPropertyName(node: BinaryTreeNode<T>, nodeOrPropertyName ?: NodeOrPropertyName) {\n        if (nodeOrPropertyName === undefined) {\n            nodeOrPropertyName = 'id';\n        }\n\n        switch (nodeOrPropertyName) {\n            case 'id':\n                this._visitedId.push(node.id);\n                break;\n            case 'val':\n                this._visitedVal.push(node.val);\n                break;\n            case 'node':\n                this._visitedNode.push(node);\n                break;\n            case 'count':\n                this._visitedCount.push(node.count);\n                break;\n            case 'allLesserSum':\n                this._visitedLeftSum.push(node.allLesserSum);\n                break;\n            default:\n                this._visitedId.push(node.id);\n                break;\n        }\n    }\n\n    protected _getResultByPropertyName(nodeOrPropertyName ?: NodeOrPropertyName): ResultsByType<T> {\n        if (nodeOrPropertyName === undefined) {\n            nodeOrPropertyName = 'id';\n        }\n\n        switch (nodeOrPropertyName) {\n            case 'id':\n                return this._visitedId;\n            case 'val':\n                return this._visitedVal;\n            case 'node':\n                return this._visitedNode;\n            case 'count':\n                return this._visitedCount;\n            case 'allLesserSum':\n                return this._visitedLeftSum;\n            default:\n                return this._visitedId;\n        }\n    }\n\n    BFS(): BinaryTreeNodeId[];\n    BFS(nodeOrPropertyName: 'id'): BinaryTreeNodeId[];\n    BFS(nodeOrPropertyName: 'val'): (T | null)[];\n    BFS(nodeOrPropertyName: 'node'): BinaryTreeNode<T>[];\n    BFS(nodeOrPropertyName: 'count'): number[];\n    BFS(nodeOrPropertyName: 'allLesserSum'): number[];    // TODO in BinaryTree not implemented\n    BFS(nodeOrPropertyName ?: NodeOrPropertyName): ResultsByType<T> {\n        if (nodeOrPropertyName === undefined) {\n            nodeOrPropertyName = 'id';\n        }\n\n        this._resetResults();\n\n        let queue = new Array<BinaryTreeNode<T> | null>();\n        queue.push(this.root);\n        while (queue.length !== 0) {\n            let cur = queue.shift();\n            if (cur) {\n                this._pushByPropertyName(cur, nodeOrPropertyName);\n                if (cur?.left !== null) queue.push(cur.left);\n                if (cur?.right !== null) queue.push(cur.right);\n            }\n        }\n        return this._getResultByPropertyName(nodeOrPropertyName);\n    }\n\n    DFS(): BinaryTreeNodeId[];\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'id'): BinaryTreeNodeId[];\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'val'): (T | null)[];\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'node'): BinaryTreeNode<T>[];\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'count'): number[];\n    DFS(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'allLesserSum'): number[]; // TODO in BinaryTree not implemented\n    DFS(pattern ?: 'in' | 'pre' | 'post', nodeOrPropertyName ?: NodeOrPropertyName): ResultsByType<T> {\n        if (pattern === undefined) {\n            pattern = 'in';\n        }\n\n        if (nodeOrPropertyName === undefined) {\n            nodeOrPropertyName = 'id';\n        }\n\n        this._resetResults();\n\n        const _traverse = (node: BinaryTreeNode<T>) => {\n            switch (pattern) {\n                case 'in':\n                    if (node.left) _traverse(node.left);\n                    this._pushByPropertyName(node, nodeOrPropertyName);\n                    if (node.right) _traverse(node.right);\n                    break;\n                case 'pre':\n                    this._pushByPropertyName(node, nodeOrPropertyName);\n                    if (node.left) _traverse(node.left);\n                    if (node.right) _traverse(node.right);\n                    break;\n                case 'post':\n                    if (node.left) _traverse(node.left);\n                    if (node.right) _traverse(node.right);\n                    this._pushByPropertyName(node, nodeOrPropertyName);\n                    break;\n            }\n\n        };\n\n        this.root && _traverse(this.root);\n        return this._getResultByPropertyName(nodeOrPropertyName);\n    }\n\n    DFSIterative(): BinaryTreeNodeId[];\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'id'): BinaryTreeNodeId[];\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'val'): (T | null)[];\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'node'): BinaryTreeNode<T>[];\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'count'): number[];\n    DFSIterative(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'allLesserSum'): number[]; // TODO in BinaryTree not implemented\n\n    /**\n     * Time complexity is O(n)\n     * Space complexity of Iterative DFS equals to recursive DFS which is O(n) because of the stack\n     * @param pattern\n     * @param nodeOrPropertyName\n     * @constructor\n     */\n    DFSIterative(pattern ?: 'in' | 'pre' | 'post', nodeOrPropertyName ?: NodeOrPropertyName): ResultsByType<T> {\n        pattern = pattern || 'in';\n        nodeOrPropertyName = nodeOrPropertyName || 'id';\n        this._resetResults();\n        if (!this.root) return this._getResultByPropertyName(nodeOrPropertyName);\n        // 0: visit, 1: print\n        const stack: { opt: 0 | 1, node: BinaryTreeNode<T> | null }[] = [];\n        stack.push({opt: 0, node: this.root});\n        while (stack.length > 0) {\n            const cur = stack.pop();\n            if (!cur || !cur.node) continue;\n            if (cur.opt === 1) {\n                this._pushByPropertyName(cur.node, nodeOrPropertyName);\n            } else {\n                switch (pattern) {\n                    case 'in':\n                        stack.push({opt: 0, node: cur.node.right});\n                        stack.push({opt: 1, node: cur.node});\n                        stack.push({opt: 0, node: cur.node.left});\n                        break;\n                    case 'pre':\n                        stack.push({opt: 0, node: cur.node.right});\n                        stack.push({opt: 0, node: cur.node.left});\n                        stack.push({opt: 1, node: cur.node});\n                        break;\n                    case 'post':\n                        stack.push({opt: 1, node: cur.node});\n                        stack.push({opt: 0, node: cur.node.right});\n                        stack.push({opt: 0, node: cur.node.left});\n                        break;\n                    default:\n                        stack.push({opt: 0, node: cur.node.right});\n                        stack.push({opt: 1, node: cur.node});\n                        stack.push({opt: 0, node: cur.node.left});\n                        break;\n                }\n            }\n        }\n        return this._getResultByPropertyName(nodeOrPropertyName);\n    }\n\n    getPredecessor(node: BinaryTreeNode<T>): BinaryTreeNode<T> {\n        if (node.left) {\n            let predecessor: BinaryTreeNode<T> | null = node.left;\n            while (predecessor.right && predecessor.right !== node) {\n                predecessor = predecessor.right;\n            }\n            return predecessor;\n        } else {\n            return node;\n        }\n    }\n\n    morris(): BinaryTreeNodeId[];\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'id'): BinaryTreeNodeId[];\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'val'): (T | null)[];\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'node'): BinaryTreeNode<T>[];\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'count'): number[];\n    morris(pattern?: DFSOrderPattern, nodeOrPropertyName?: 'allLesserSum'): number[];\n    /**\n     * The time complexity of Morris traversal is O(n), it's may slower than others\n     * The space complexity  Morris traversal is O(1) because no using stack\n     * @param pattern\n     * @param nodeOrPropertyName\n     */\n    morris(pattern?: 'in' | 'pre' | 'post', nodeOrPropertyName?: NodeOrPropertyName): ResultsByType<T> {\n        if (this.root === null) {\n            return [];\n        }\n\n        pattern = pattern || 'in';\n        nodeOrPropertyName = nodeOrPropertyName || 'id';\n\n        this._resetResults();\n\n        let cur: BinaryTreeNode<T> | null = this.root;\n\n        switch (pattern) {\n            case 'in':\n                while (cur) {\n                    if (cur.left) {\n                        let predecessor = this.getPredecessor(cur);\n                        if (!predecessor.right) {\n                            predecessor.right = cur;\n                            cur = cur.left;\n                            continue;\n                        } else {\n                            predecessor.right = null;\n                        }\n                    }\n                    this._pushByPropertyName(cur, nodeOrPropertyName);\n                    cur = cur.right;\n                }\n                break;\n            case 'pre':\n                while (cur) {\n                    if (cur.left) {\n                        let predecessor = this.getPredecessor(cur);\n                        if (!predecessor.right) {\n                            predecessor.right = cur;\n                            this._pushByPropertyName(cur, nodeOrPropertyName);\n                            cur = cur.left;\n                            continue;\n                        } else {\n                            predecessor.right = null;\n                        }\n                    } else {\n                        this._pushByPropertyName(cur, nodeOrPropertyName);\n                    }\n                    cur = cur.right;\n                }\n                break;\n            case 'post':\n                const reverseEdge = (node: BinaryTreeNode<T> | null) => {\n                    let pre: BinaryTreeNode<T> | null = null;\n                    let next: BinaryTreeNode<T> | null = null;\n                    while (node) {\n                        next = node.right;\n                        node.right = pre;\n                        pre = node;\n                        node = next;\n                    }\n                    return pre;\n                };\n                const printEdge = (node: BinaryTreeNode<T> | null) => {\n                    let tail: BinaryTreeNode<T> | null = reverseEdge(node);\n                    let cur: BinaryTreeNode<T> | null = tail;\n                    while (cur) {\n                        this._pushByPropertyName(cur, nodeOrPropertyName);\n                        cur = cur.right;\n                    }\n                    reverseEdge(tail);\n                };\n                while (cur) {\n                    if (cur.left) {\n                        let predecessor = this.getPredecessor(cur);\n                        if (predecessor.right === null) {\n                            predecessor.right = cur;\n                            cur = cur.left;\n                            continue;\n                        } else {\n                            predecessor.right = null;\n                            printEdge(cur.left);\n                        }\n                    }\n                    cur = cur.right;\n                }\n                printEdge(this.root);\n                break;\n        }\n\n        return this._getResultByPropertyName(nodeOrPropertyName);\n    }\n\n    subTreeSum(subTreeRoot: BinaryTreeNode<T>, propertyName ?: BinaryTreeNodePropertyName): number {\n        if (propertyName === undefined) {\n            propertyName = 'id';\n        }\n        let sum = 0;\n\n        function _traverse(cur: BinaryTreeNode<T>): void {\n            let needSum: number;\n            switch (propertyName) {\n                case 'id':\n                    needSum = cur.id;\n                    break;\n                case 'count':\n                    needSum = cur.count;\n                    break;\n                case 'allLesserSum':\n                    needSum = cur.allLesserSum;\n                    break;\n                default:\n                    needSum = cur.id;\n                    break;\n            }\n            sum += needSum;\n            if (!cur.left && !cur.right) return;\n            cur.left && _traverse(cur.left);\n            cur.right && _traverse(cur.right);\n        }\n\n        subTreeRoot && _traverse(subTreeRoot);\n\n        return sum;\n    }\n}\n\nexport class BinaryTreeNode<T> {\n    protected _id: BinaryTreeNodeId;\n    public get id(): BinaryTreeNodeId {\n        return this._id;\n    }\n\n    public set id(v: BinaryTreeNodeId) {\n        this._id = v;\n    }\n\n    protected _val: T | null = null;\n    public get val(): T | null {\n        return this._val;\n    }\n\n    public set val(v: T | null) {\n        this._val = v;\n    }\n\n    protected _left: BinaryTreeNode<T> | null = null;\n    public get left(): BinaryTreeNode<T> | null {\n        return this._left;\n    }\n\n    public set left(v: BinaryTreeNode<T> | null) {\n        if (v) {\n            v.parent = this;\n            v.familyPosition = 1;\n        }\n        this._left = v;\n    }\n\n    protected _right: BinaryTreeNode<T> | null = null;\n    public get right(): BinaryTreeNode<T> | null {\n        return this._right;\n    }\n\n    public set right(v: BinaryTreeNode<T> | null) {\n        if (v) {\n            v.parent = this;\n            v.familyPosition = 2;\n        }\n        this._right = v;\n    }\n\n    protected _parent: BinaryTreeNode<T> | null = null;\n    public get parent(): BinaryTreeNode<T> | null {\n        return this._parent;\n    }\n\n    public set parent(v: BinaryTreeNode<T> | null) {\n        this._parent = v;\n    }\n\n    protected _familyPosition: FamilyPosition = 0;\n    public get familyPosition(): FamilyPosition {\n        return this._familyPosition;\n    }\n\n    public set familyPosition(v: FamilyPosition) {\n        this._familyPosition = v;\n    }\n\n    protected _count: number = 1;\n    public get count(): number {\n        return this._count;\n    }\n\n    public set count(v: number) {\n        this._count = v;\n    }\n\n    protected _height: number = 0;\n\n    public get height(): number {\n        return this._height;\n    }\n\n    public set height(v: number) {\n        this._height = v;\n    }\n\n    protected _allLesserSum: number = 0;\n    public get allLesserSum(): number {\n        return this._allLesserSum;\n    }\n\n    public set allLesserSum(v: number) {\n        this._allLesserSum = v;\n    }\n\n    constructor(id: BinaryTreeNodeId, val?: T | null, count?: number) {\n        if (val === undefined) {\n            val = null;\n        }\n        if (count === undefined) {\n            count = 1;\n        }\n        this._id = id;\n        this._val = val;\n        this._count = count;\n    }\n\n    replaceLocation(replaceNode: BinaryTreeNode<T>): boolean {\n        this._id = replaceNode.id;\n        this._val = replaceNode.val;\n        this._count = replaceNode.count;\n        this._allLesserSum = replaceNode.allLesserSum;\n        this._height = replaceNode.height;\n        return true;\n    }\n\n    swapLocation(swapNode: BinaryTreeNode<T>): BinaryTreeNode<T> {\n        const tempNode = new BinaryTreeNode<T>(swapNode.id);\n        const {val, count, height, allLesserSum} = swapNode;\n        tempNode.val = val;\n        tempNode.count = count;\n        tempNode.height = height;\n        tempNode.allLesserSum = allLesserSum;\n\n        swapNode.id = this._id;\n        swapNode.val = this._val;\n        swapNode.count = this._count;\n        swapNode.height = this._height;\n        swapNode.allLesserSum = this._allLesserSum;\n\n        this._id = tempNode.id;\n        this._val = tempNode.val;\n        this._count = tempNode.count;\n        this._height = tempNode.height;\n        this._allLesserSum = tempNode.allLesserSum;\n        return swapNode;\n    }\n\n    clone(): BinaryTreeNode<T> {\n        return new BinaryTreeNode<T>(this._id, this._val, this._count);\n    }\n}\n\nexport class BinaryTree<T> extends AbstractBinaryTree<T> {\n    createNode(id: BinaryTreeNodeId, val?: T | null, count?: number): BinaryTreeNode<T> {\n        return new BinaryTreeNode(id, val, count);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}