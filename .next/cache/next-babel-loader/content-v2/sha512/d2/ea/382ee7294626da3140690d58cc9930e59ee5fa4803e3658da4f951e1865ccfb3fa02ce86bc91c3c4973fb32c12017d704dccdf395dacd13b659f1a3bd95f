{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{SyntheticPlatformEmitter}from'@unimodules/core';import{PermissionStatus}from'unimodules-permissions-interface';import{RECORDING_OPTIONS_PRESET_HIGH_QUALITY}from\"./Audio/Recording\";function getPermissionsAsync(){var resolveWithStatus;return _regeneratorRuntime.async(function getPermissionsAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:resolveWithStatus=function resolveWithStatus(status){return{status:status,granted:status===PermissionStatus.GRANTED,canAskAgain:true,expires:0};};_context.prev=1;_context.next=4;return _regeneratorRuntime.awrap(navigator.mediaDevices.getUserMedia({audio:true}));case 4:return _context.abrupt(\"return\",resolveWithStatus(PermissionStatus.GRANTED));case 7:_context.prev=7;_context.t0=_context[\"catch\"](1);return _context.abrupt(\"return\",resolveWithStatus(PermissionStatus.DENIED));case 10:case\"end\":return _context.stop();}}},null,null,[[1,7]],Promise);}function getStatusFromMedia(media){if(!media){return{isLoaded:false,error:undefined};}var isPlaying=media.currentTime>0&&!media.paused&&!media.ended&&media.readyState>2;var status={isLoaded:true,uri:media.src,progressUpdateIntervalMillis:100,durationMillis:media.duration*1000,positionMillis:media.currentTime*1000,shouldPlay:media.autoplay,isPlaying:isPlaying,isBuffering:false,rate:media.playbackRate,shouldCorrectPitch:false,volume:media.volume,isMuted:media.muted,isLooping:media.loop,didJustFinish:media.ended};return status;}function setStatusForMedia(media,status){if(status.positionMillis!==undefined){media.currentTime=status.positionMillis/1000;}if(status.shouldPlay!==undefined){if(status.shouldPlay){media.play();}else{media.pause();}}if(status.rate!==undefined){media.playbackRate=status.rate;}if(status.volume!==undefined){media.volume=status.volume;}if(status.isMuted!==undefined){media.muted=status.isMuted;}if(status.isLooping!==undefined){media.loop=status.isLooping;}return getStatusFromMedia(media);}var mediaRecorder=null;var mediaRecorderUptimeOfLastStartResume=0;var mediaRecorderDurationAlreadyRecorded=0;var mediaRecorderIsRecording=false;function getAudioRecorderDurationMillis(){var duration=mediaRecorderDurationAlreadyRecorded;if(mediaRecorderIsRecording&&mediaRecorderUptimeOfLastStartResume>0){duration+=Date.now()-mediaRecorderUptimeOfLastStartResume;}return duration;}export default{get name(){return'ExponentAV';},getStatusForVideo:function getStatusForVideo(element){return _regeneratorRuntime.async(function getStatusForVideo$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",getStatusFromMedia(element));case 1:case\"end\":return _context2.stop();}}},null,null,null,Promise);},loadForVideo:function loadForVideo(element,nativeSource,fullInitialStatus){return _regeneratorRuntime.async(function loadForVideo$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",getStatusFromMedia(element));case 1:case\"end\":return _context3.stop();}}},null,null,null,Promise);},unloadForVideo:function unloadForVideo(element){return _regeneratorRuntime.async(function unloadForVideo$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt(\"return\",getStatusFromMedia(element));case 1:case\"end\":return _context4.stop();}}},null,null,null,Promise);},setStatusForVideo:function setStatusForVideo(element,status){return _regeneratorRuntime.async(function setStatusForVideo$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt(\"return\",setStatusForMedia(element,status));case 1:case\"end\":return _context5.stop();}}},null,null,null,Promise);},replayVideo:function replayVideo(element,status){return _regeneratorRuntime.async(function replayVideo$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:return _context6.abrupt(\"return\",setStatusForMedia(element,status));case 1:case\"end\":return _context6.stop();}}},null,null,null,Promise);},setAudioMode:function setAudioMode(){return _regeneratorRuntime.async(function setAudioMode$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:case\"end\":return _context7.stop();}}},null,null,null,Promise);},setAudioIsEnabled:function setAudioIsEnabled(){return _regeneratorRuntime.async(function setAudioIsEnabled$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:case\"end\":return _context8.stop();}}},null,null,null,Promise);},getStatusForSound:function getStatusForSound(element){return _regeneratorRuntime.async(function getStatusForSound$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:return _context9.abrupt(\"return\",getStatusFromMedia(element));case 1:case\"end\":return _context9.stop();}}},null,null,null,Promise);},loadForSound:function loadForSound(nativeSource,fullInitialStatus){var source,media,status;return _regeneratorRuntime.async(function loadForSound$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:source=typeof nativeSource==='string'?nativeSource:nativeSource.uri;media=new Audio(source);media.ontimeupdate=function(){SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus',{key:media,status:getStatusFromMedia(media)});};media.onerror=function(){SyntheticPlatformEmitter.emit('ExponentAV.onError',{key:media,error:media.error.message});};status=setStatusForMedia(media,fullInitialStatus);return _context10.abrupt(\"return\",[media,status]);case 6:case\"end\":return _context10.stop();}}},null,null,null,Promise);},unloadForSound:function unloadForSound(element){return _regeneratorRuntime.async(function unloadForSound$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:element.pause();element.removeAttribute('src');element.load();return _context11.abrupt(\"return\",getStatusFromMedia(element));case 4:case\"end\":return _context11.stop();}}},null,null,null,Promise);},setStatusForSound:function setStatusForSound(element,status){return _regeneratorRuntime.async(function setStatusForSound$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:return _context12.abrupt(\"return\",setStatusForMedia(element,status));case 1:case\"end\":return _context12.stop();}}},null,null,null,Promise);},replaySound:function replaySound(element,status){return _regeneratorRuntime.async(function replaySound$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:return _context13.abrupt(\"return\",setStatusForMedia(element,status));case 1:case\"end\":return _context13.stop();}}},null,null,null,Promise);},getAudioRecordingStatus:function getAudioRecordingStatus(){var _mediaRecorder,_mediaRecorder2,_mediaRecorder3;return _regeneratorRuntime.async(function getAudioRecordingStatus$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:return _context14.abrupt(\"return\",{canRecord:((_mediaRecorder=mediaRecorder)==null?void 0:_mediaRecorder.state)==='recording'||((_mediaRecorder2=mediaRecorder)==null?void 0:_mediaRecorder2.state)==='inactive',isRecording:((_mediaRecorder3=mediaRecorder)==null?void 0:_mediaRecorder3.state)==='recording',durationMillis:getAudioRecorderDurationMillis()});case 1:case\"end\":return _context14.stop();}}},null,null,null,Promise);},prepareAudioRecorder:function prepareAudioRecorder(options){var stream;return _regeneratorRuntime.async(function prepareAudioRecorder$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:if(!(typeof navigator!=='undefined'&&!navigator.mediaDevices)){_context15.next=2;break;}throw new Error('No media devices available');case 2:mediaRecorderUptimeOfLastStartResume=0;mediaRecorderDurationAlreadyRecorded=0;_context15.next=6;return _regeneratorRuntime.awrap(navigator.mediaDevices.getUserMedia({audio:true}));case 6:stream=_context15.sent;mediaRecorder=new window.MediaRecorder(stream,(options==null?void 0:options.web)||RECORDING_OPTIONS_PRESET_HIGH_QUALITY.web);mediaRecorder.addEventListener('pause',function(){mediaRecorderDurationAlreadyRecorded=getAudioRecorderDurationMillis();mediaRecorderIsRecording=false;});mediaRecorder.addEventListener('resume',function(){mediaRecorderUptimeOfLastStartResume=Date.now();mediaRecorderIsRecording=true;});mediaRecorder.addEventListener('start',function(){mediaRecorderUptimeOfLastStartResume=Date.now();mediaRecorderDurationAlreadyRecorded=0;mediaRecorderIsRecording=true;});mediaRecorder.addEventListener('stop',function(){mediaRecorderDurationAlreadyRecorded=getAudioRecorderDurationMillis();mediaRecorderIsRecording=false;stream.getTracks().forEach(function(track){return track.stop();});});_context15.next=14;return _regeneratorRuntime.awrap(this.getAudioRecordingStatus());case 14:_context15.t0=_context15.sent;return _context15.abrupt(\"return\",{uri:null,status:_context15.t0});case 16:case\"end\":return _context15.stop();}}},null,this,null,Promise);},startAudioRecording:function startAudioRecording(){return _regeneratorRuntime.async(function startAudioRecording$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:if(!(mediaRecorder===null)){_context16.next=2;break;}throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');case 2:if(mediaRecorder.state==='paused'){mediaRecorder.resume();}else{mediaRecorder.start();}return _context16.abrupt(\"return\",this.getAudioRecordingStatus());case 4:case\"end\":return _context16.stop();}}},null,this,null,Promise);},pauseAudioRecording:function pauseAudioRecording(){return _regeneratorRuntime.async(function pauseAudioRecording$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:if(!(mediaRecorder===null)){_context17.next=2;break;}throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');case 2:mediaRecorder.pause();return _context17.abrupt(\"return\",this.getAudioRecordingStatus());case 4:case\"end\":return _context17.stop();}}},null,this,null,Promise);},stopAudioRecording:function stopAudioRecording(){var dataPromise,data,url;return _regeneratorRuntime.async(function stopAudioRecording$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:if(!(mediaRecorder===null)){_context18.next=2;break;}throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');case 2:if(!(mediaRecorder.state==='inactive')){_context18.next=7;break;}_context18.next=5;return _regeneratorRuntime.awrap(this.getAudioRecordingStatus());case 5:_context18.t0=_context18.sent;return _context18.abrupt(\"return\",{uri:null,status:_context18.t0});case 7:dataPromise=new Promise(function(resolve){return mediaRecorder.addEventListener('dataavailable',function(e){resolve(e.data);});});mediaRecorder.stop();_context18.next=11;return _regeneratorRuntime.awrap(dataPromise);case 11:data=_context18.sent;url=URL.createObjectURL(data);_context18.t1=url;_context18.next=16;return _regeneratorRuntime.awrap(this.getAudioRecordingStatus());case 16:_context18.t2=_context18.sent;return _context18.abrupt(\"return\",{uri:_context18.t1,status:_context18.t2});case 18:case\"end\":return _context18.stop();}}},null,this,null,Promise);},unloadAudioRecorder:function unloadAudioRecorder(){return _regeneratorRuntime.async(function unloadAudioRecorder$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:mediaRecorder=null;case 1:case\"end\":return _context19.stop();}}},null,null,null,Promise);},getPermissionsAsync:getPermissionsAsync,requestPermissionsAsync:function requestPermissionsAsync(){return _regeneratorRuntime.async(function requestPermissionsAsync$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:return _context20.abrupt(\"return\",getPermissionsAsync());case 1:case\"end\":return _context20.stop();}}},null,null,null,Promise);}};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/packages/expo-av/src/ExponentAV.web.ts"],"names":["resolveWithStatus","status","granted","PermissionStatus","canAskAgain","expires","audio","isLoaded","error","undefined","isPlaying","media","uri","progressUpdateIntervalMillis","durationMillis","positionMillis","shouldPlay","isBuffering","rate","shouldCorrectPitch","volume","isMuted","isLooping","didJustFinish","ended","getStatusFromMedia","mediaRecorder","mediaRecorderUptimeOfLastStartResume","mediaRecorderDurationAlreadyRecorded","mediaRecorderIsRecording","duration","Date","getStatusForVideo","loadForVideo","unloadForVideo","setStatusForVideo","setStatusForMedia","replayVideo","setAudioMode","setAudioIsEnabled","getStatusForSound","loadForSound","source","nativeSource","SyntheticPlatformEmitter","key","message","unloadForSound","element","setStatusForSound","replaySound","getAudioRecordingStatus","canRecord","isRecording","getAudioRecorderDurationMillis","prepareAudioRecorder","navigator","stream","window","RECORDING_OPTIONS_PRESET_HIGH_QUALITY","track","startAudioRecording","pauseAudioRecording","stopAudioRecording","dataPromise","resolve","e","data","url","URL","unloadAudioRecorder","getPermissionsAsync","requestPermissionsAsync"],"mappings":"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","sourcesContent":["// TODO phone webkit browsers do not support MediaRecorder\nimport {SyntheticPlatformEmitter} from '@unimodules/core';\nimport {PermissionResponse, PermissionStatus} from 'unimodules-permissions-interface';\nimport {AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet} from './AV';\nimport {RECORDING_OPTIONS_PRESET_HIGH_QUALITY, RecordingOptions} from './Audio/Recording';\n\nexport interface MediaRecorderDataAvailableEvent extends Event {\n    data: any;\n}\n\n\n/**\n * Gets the permission details. The implementation is not very good as it actually requests\n * access to the microhpone, not all browsers support the experimental permissions api\n */\nasync function getPermissionsAsync(): Promise<PermissionResponse> {\n    const resolveWithStatus = (status: PermissionStatus) => ({\n        status,\n        granted: status === PermissionStatus.GRANTED,\n        canAskAgain: true,\n        expires: 0,\n    });\n\n    try {\n        await navigator.mediaDevices.getUserMedia({audio: true});\n        return resolveWithStatus(PermissionStatus.GRANTED);\n    } catch (e) {\n        return resolveWithStatus(PermissionStatus.DENIED);\n    }\n}\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): AVPlaybackStatus {\n    if (!media) {\n        return {\n            isLoaded: false,\n            error: undefined,\n        };\n    }\n\n    const isPlaying = (media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n\n    const status: AVPlaybackStatus = {\n        isLoaded: true,\n        uri: media.src,\n        progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n        durationMillis: media.duration * 1000,\n        positionMillis: media.currentTime * 1000,\n        // playableDurationMillis: media.buffered * 1000,\n        // seekMillisToleranceBefore?: number\n        // seekMillisToleranceAfter?: number\n        shouldPlay: media.autoplay,\n        isPlaying,\n        isBuffering: false, //media.waiting,\n        rate: media.playbackRate,\n        // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n        shouldCorrectPitch: false,\n        volume: media.volume,\n        isMuted: media.muted,\n        isLooping: media.loop,\n        didJustFinish: media.ended,\n    };\n\n    return status;\n}\n\nfunction setStatusForMedia(\n    media: HTMLMediaElement,\n    status: AVPlaybackStatusToSet\n): AVPlaybackStatus {\n    if (status.positionMillis !== undefined) {\n        media.currentTime = status.positionMillis / 1000;\n    }\n    // if (status.progressUpdateIntervalMillis !== undefined) {\n    //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n    // }\n    // if (status.seekMillisToleranceBefore !== undefined) {\n    //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n    // }\n    // if (status.seekMillisToleranceAfter !== undefined) {\n    //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n    // }\n    // if (status.shouldCorrectPitch !== undefined) {\n    //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n    // }\n    if (status.shouldPlay !== undefined) {\n        if (status.shouldPlay) {\n            media.play();\n        } else {\n            media.pause();\n        }\n    }\n    if (status.rate !== undefined) {\n        media.playbackRate = status.rate;\n    }\n    if (status.volume !== undefined) {\n        media.volume = status.volume;\n    }\n    if (status.isMuted !== undefined) {\n        media.muted = status.isMuted;\n    }\n    if (status.isLooping !== undefined) {\n        media.loop = status.isLooping;\n    }\n\n    return getStatusFromMedia(media);\n}\n\nlet mediaRecorder: null | any /*MediaRecorder*/ = null;\nlet mediaRecorderUptimeOfLastStartResume: number = 0;\nlet mediaRecorderDurationAlreadyRecorded: number = 0;\nlet mediaRecorderIsRecording: boolean = false;\n\nfunction getAudioRecorderDurationMillis() {\n    let duration = mediaRecorderDurationAlreadyRecorded;\n    if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n        duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n    }\n    return duration;\n}\n\nexport default {\n    get name(): string {\n        return 'ExponentAV';\n    },\n    async getStatusForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n        return getStatusFromMedia(element);\n    },\n    async loadForVideo(\n        element: HTMLMediaElement,\n        nativeSource: AVPlaybackNativeSource,\n        fullInitialStatus: AVPlaybackStatusToSet\n    ): Promise<AVPlaybackStatus> {\n        return getStatusFromMedia(element);\n    },\n    async unloadForVideo(element: HTMLMediaElement): Promise<AVPlaybackStatus> {\n        return getStatusFromMedia(element);\n    },\n    async setStatusForVideo(\n        element: HTMLMediaElement,\n        status: AVPlaybackStatusToSet\n    ): Promise<AVPlaybackStatus> {\n        return setStatusForMedia(element, status);\n    },\n    async replayVideo(\n        element: HTMLMediaElement,\n        status: AVPlaybackStatusToSet\n    ): Promise<AVPlaybackStatus> {\n        return setStatusForMedia(element, status);\n    },\n    /* Audio */\n    async setAudioMode() {\n    },\n    async setAudioIsEnabled() {\n    },\n    async getStatusForSound(element: HTMLMediaElement) {\n        return getStatusFromMedia(element);\n    },\n    async loadForSound(\n        nativeSource: string | { uri: string; [key: string]: any },\n        fullInitialStatus: AVPlaybackStatusToSet\n    ): Promise<[HTMLMediaElement, AVPlaybackStatus]> {\n        const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n        const media = new Audio(source);\n\n        media.ontimeupdate = () => {\n            SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n                key: media,\n                status: getStatusFromMedia(media),\n            });\n        };\n\n        media.onerror = () => {\n            SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n                key: media,\n                error: media.error!.message,\n            });\n        };\n\n        const status = setStatusForMedia(media, fullInitialStatus);\n\n        return [media, status];\n    },\n    async unloadForSound(element: HTMLMediaElement) {\n        element.pause();\n        element.removeAttribute('src');\n        element.load();\n        return getStatusFromMedia(element);\n    },\n    async setStatusForSound(\n        element: HTMLMediaElement,\n        status: AVPlaybackStatusToSet\n    ): Promise<AVPlaybackStatus> {\n        return setStatusForMedia(element, status);\n    },\n    async replaySound(\n        element: HTMLMediaElement,\n        status: AVPlaybackStatusToSet\n    ): Promise<AVPlaybackStatus> {\n        return setStatusForMedia(element, status);\n    },\n\n    /* Recording */\n    //   async setUnloadedCallbackForAndroidRecording() {},\n    async getAudioRecordingStatus() {\n        return {\n            canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n            isRecording: mediaRecorder?.state === 'recording',\n            durationMillis: getAudioRecorderDurationMillis(),\n        };\n    },\n    async prepareAudioRecorder(options: RecordingOptions) {\n        if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n            throw new Error('No media devices available');\n        }\n\n        mediaRecorderUptimeOfLastStartResume = 0;\n        mediaRecorderDurationAlreadyRecorded = 0;\n\n        const stream = await navigator.mediaDevices.getUserMedia({audio: true});\n\n        mediaRecorder = new window.MediaRecorder(\n            stream,\n            options?.web || RECORDING_OPTIONS_PRESET_HIGH_QUALITY.web\n        );\n\n        mediaRecorder.addEventListener('pause', () => {\n            mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n            mediaRecorderIsRecording = false;\n        });\n\n        mediaRecorder.addEventListener('resume', () => {\n            mediaRecorderUptimeOfLastStartResume = Date.now();\n            mediaRecorderIsRecording = true;\n        });\n\n        mediaRecorder.addEventListener('start', () => {\n            mediaRecorderUptimeOfLastStartResume = Date.now();\n            mediaRecorderDurationAlreadyRecorded = 0;\n            mediaRecorderIsRecording = true;\n        });\n\n        mediaRecorder.addEventListener('stop', () => {\n            mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n            mediaRecorderIsRecording = false;\n\n            // Clears recording icon in Chrome tab\n            stream.getTracks().forEach(track => track.stop());\n        });\n\n        return {uri: null, status: await this.getAudioRecordingStatus()};\n    },\n    async startAudioRecording() {\n        if (mediaRecorder === null) {\n            throw new Error(\n                'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n            );\n        }\n\n        if (mediaRecorder.state === 'paused') {\n            mediaRecorder.resume();\n        } else {\n            mediaRecorder.start();\n        }\n\n        return this.getAudioRecordingStatus();\n    },\n    async pauseAudioRecording() {\n        if (mediaRecorder === null) {\n            throw new Error(\n                'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n            );\n        }\n\n        // Set status to paused\n        mediaRecorder.pause();\n\n        return this.getAudioRecordingStatus();\n    },\n    async stopAudioRecording() {\n        if (mediaRecorder === null) {\n            throw new Error(\n                'Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.'\n            );\n        }\n\n        if (mediaRecorder.state === 'inactive') {\n            return {uri: null, status: await this.getAudioRecordingStatus()};\n        }\n\n        const dataPromise = new Promise(resolve => {\n            return mediaRecorder.addEventListener('dataavailable', (e: MediaRecorderDataAvailableEvent) => {\n                resolve(e.data)\n            })\n        });\n\n        mediaRecorder.stop();\n\n        const data = await dataPromise;\n        const url = URL.createObjectURL(data);\n\n        return {uri: url, status: await this.getAudioRecordingStatus()};\n    },\n    async unloadAudioRecorder() {\n        mediaRecorder = null;\n    },\n\n    getPermissionsAsync,\n    async requestPermissionsAsync(): Promise<PermissionResponse> {\n        return getPermissionsAsync();\n    },\n};\n"]},"metadata":{},"sourceType":"module"}