{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}export var array={};function canJump(nums){var max=0;for(var i=0;i<nums.length;i++){if(i>max){return false;}else{max=Math.max(i+nums[i],max);}}return true;}function canJumpMy(nums){var zeros=new Map();for(var i=0;i<nums.length;i++){for(var _iterator=_createForOfIteratorHelperLoose(zeros),_step;!(_step=_iterator()).done;){var _ref=_step.value;var _ref2=_slicedToArray(_ref,2);var zeroI=_ref2[0];var can=_ref2[1];if(!can){return false;}}if(nums[i]===0&&i!==nums.length-1){zeros.set(i,false);for(var j=0;j<i;j++){if(nums[j]>i-j){zeros.set(i,true);break;}}}}return true;}function twoSum(nums,target){var diffMap=new Map();for(var i=0;i<nums.length;i++){var first=diffMap.get(nums[i]);if(first!==undefined){return[first,i];}diffMap.set(target-nums[i],i);}return[-1,-1];}function removeDuplicates(nums){if(nums.length===0)return 0;var ans=1;for(var i=1;i<nums.length;i++){if(nums[i]!==nums[i-1]){nums[ans++]=nums[i];}}return ans;}function moveZeroesPlagiarized(nums){var id=0;for(var i=0;i<nums.length;i++){if(nums[i]!==0){nums[id]=nums[i];id++;}}for(var _i=id;_i<nums.length;_i++){nums[_i]=0;}}function moveZeroes(nums){var id=0;for(var i=0;i<nums.length;i++){if(nums[i]!==0){var temp=nums[id];nums[id]=nums[i];nums[i]=temp;id++;}}}var NumArray=function(){function NumArray(nums){_classCallCheck(this,NumArray);this._cache=new Map();for(var i=0;i<nums.length;i++){this._cache.set(i,i===0?nums[0]:this._cache.get(i-1)+nums[i]);}}_createClass(NumArray,[{key:\"sumRange\",value:function sumRange(left,right){if(left>0){return this._cache.get(right)-this._cache.get(left-1);}else{return this._cache.get(right);}}}]);return NumArray;}();var NumMatrixMy=function(){function NumMatrixMy(matrix){var _this=this;_classCallCheck(this,NumMatrixMy);this._cache=[];for(var row=0;row<matrix.length;row++){var rowData=[];for(var col=0;col<matrix[row].length;col++){rowData.push(Infinity);}this._cache.push(rowData);}var subMatrixSum=function subMatrixSum(row,col){if(row>0&&_this._cache[row-1][col]!==undefined){var rowSum=0;for(var i=0;i<=col;i++){rowSum+=matrix[row][i];}return(_this._cache[row-1][col]||0)+rowSum;}else if(col>0&&_this._cache[row][col-1]!==undefined){var colSum=0;for(var _i2=0;_i2<=row;_i2++){colSum+=matrix[_i2][col];}return(_this._cache[row][col-1]||0)+colSum;}};for(var _row=0;_row<matrix.length;_row++){for(var _col=0;_col<matrix[_row].length;_col++){if(_row===0&&_col===0){this._cache[0][0]=matrix[0][0];}else{this._cache[_row][_col]=subMatrixSum(_row,_col);}}}}_createClass(NumMatrixMy,[{key:\"sumRegion\",value:function sumRegion(row1,col1,row2,col2){var sum=0;var t=this._cache[0][0]||0;if(row2>0&&col2>0){t=this._cache[row2][col2]||0;}var x=0;if(row1>0){x=this._cache[row1-1][col2]||0;}var y=0;if(col1>0){y=this._cache[row2][col1-1]||0;}var z=this._cache[0][0]||0;if(row1>0&&col1>0){z=this._cache[row1-1][col1-1]||0;}sum=t-x-y+z;return sum;}}]);return NumMatrixMy;}();var NumMatrix=function(){function NumMatrix(matrix){_classCallCheck(this,NumMatrix);this._cache=[];var cLen=matrix.length+1;var cache=[];for(var row=0;row<cLen;row++){var rowSums=[];for(var col=0;col<matrix[row===0?0:row-1].length+1;col++){rowSums.push(0);}cache.push(rowSums);}for(var _row2=1;_row2<cLen;_row2++){for(var _col2=1;_col2<matrix[_row2-1].length+1;_col2++){cache[_row2][_col2]=cache[_row2-1][_col2]+cache[_row2][_col2-1]-cache[_row2-1][_col2-1]+matrix[_row2-1][_col2-1];}}this._cache=cache;}_createClass(NumMatrix,[{key:\"sumRegion\",value:function sumRegion(row1,col1,row2,col2){var cache=this._cache;return cache[row2+1][col2+1]-cache[row2+1][col1]-cache[row1][col2+1]+cache[row1][col1];}}]);return NumMatrix;}();var NumArrayMyFirst=function(){function NumArrayMyFirst(nums){_classCallCheck(this,NumArrayMyFirst);this._diffs=[];this._nums=nums;this._sums=new Array(nums.length+1).fill(0);var i=1;while(i<this._nums.length+1){this._sums[i]=this._sums[i-1]+this._nums[i-1];i++;}}_createClass(NumArrayMyFirst,[{key:\"update\",value:function update(index,val){this._diffs.push([index,val-this._nums[index]]);this._nums[index]=val;}},{key:\"sumRange\",value:function sumRange(left,right){var sum=0;sum=this._sums[right+1]-this._sums[left];for(var i=0;i<this._diffs.length;i++){if(this._diffs[i][0]<=right&&this._diffs[i][0]>=left){sum+=this._diffs[i][1];}}return sum;}}]);return NumArrayMyFirst;}();var NumArrayMySecond=function(){function NumArrayMySecond(nums){_classCallCheck(this,NumArrayMySecond);this._diffs=new Map();this._nums=nums;this._sums=new Array(nums.length+1).fill(0);var i=1;while(i<this._nums.length+1){this._sums[i]=this._sums[i-1]+this._nums[i-1];i++;}}_createClass(NumArrayMySecond,[{key:\"update\",value:function update(index,val){var d=this._diffs.get(index);if(d===undefined){this._diffs.set(index,val-this._nums[index]);}else{this._diffs.set(index,val-this._nums[index]+d);}this._nums[index]=val;}},{key:\"sumRange\",value:function sumRange(left,right){var sum=0;sum=this._sums[right+1]-this._sums[left];for(var _iterator2=_createForOfIteratorHelperLoose(this._diffs),_step2;!(_step2=_iterator2()).done;){var _ref3=_step2.value;var _ref4=_slicedToArray(_ref3,2);var index=_ref4[0];var diff=_ref4[1];if(index<=right&&index>=left){sum+=diff;}}return sum;}}]);return NumArrayMySecond;}();","map":null,"metadata":{},"sourceType":"module"}