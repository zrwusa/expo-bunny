{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";var _this=this,_jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/providers/theme-labor/withThemeLabor.tsx\";import{useThemeLabor}from\"./useThemeLabor\";import React from'react';export var withThemeLabor=function withThemeLabor(WrappedComponent){var displayName=WrappedComponent.displayName||WrappedComponent.name||'Component';var ComponentWithThemeLabor=function ComponentWithThemeLabor(props){var themeLabor=useThemeLabor();return React.createElement(WrappedComponent,_extends({},props,{themeLabor:themeLabor,__self:_this,__source:{fileName:_jsxFileName,lineNumber:22,columnNumber:16}}));};ComponentWithThemeLabor.displayName=\"withThemeLabor(\"+displayName+\")\";return ComponentWithThemeLabor;};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/providers/theme-labor/withThemeLabor.tsx"],"names":["withThemeLabor","displayName","WrappedComponent","ComponentWithThemeLabor","themeLabor","useThemeLabor"],"mappings":"wKAAA,OAAA,aAAA,uBACA,MAAA,CAAA,KAAA,KAAA,OAAA,CAOA,MAAO,IAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAA,gBAAA,CAEzB,CAED,GAAMC,CAAAA,WAAW,CACbC,gBAAgB,CAAhBA,WAAAA,EAAgCA,gBAAgB,CAAhDA,IAAAA,EADJ,WAAA,CAIA,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAA,KAAA,CAA0C,CAEtE,GAAMC,CAAAA,UAAU,CAAGC,aAAnB,EAAA,CAGA,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAoC,UAAU,CAA9C,UAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAP,CALJ,CAAA,CAQAF,uBAAuB,CAAvBA,WAAAA,CAAAA,kBAAAA,WAAAA,CAAAA,GAAAA,CAEA,MAAA,CAAA,uBAAA,CAlBG,CAAA","sourcesContent":["import {useThemeLabor} from './useThemeLabor';\nimport React from 'react';\nimport {ThemeLabor} from '../../types';\n\nexport interface WithThemeLabor {\n    themeLabor: ThemeLabor;\n}\n\nexport const withThemeLabor = <T extends WithThemeLabor = WithThemeLabor>(\n    WrappedComponent: React.ComponentType<T>\n) => {\n    // Try to create a nice displayName for React Dev Tools.\n    const displayName =\n        WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n    // Creating the inner component. The calculated Props type here is the where the magic happens.\n    const ComponentWithThemeLabor = (props: Omit<T, keyof WithThemeLabor>) => {\n        // Fetch the props you want to inject. This could be done with context instead.\n        const themeLabor = useThemeLabor();\n\n        // props comes afterwards so the can override the default ones.\n        return <WrappedComponent {...(props as T)} themeLabor={themeLabor}/>;\n    };\n\n    ComponentWithThemeLabor.displayName = `withThemeLabor(${displayName})`;\n\n    return ComponentWithThemeLabor;\n};\n"]},"metadata":{},"sourceType":"module"}