{"ast":null,"code":"\"use strict\";var _interopRequireDefault2=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault2(require(\"@babel/runtime/helpers/extends\"));var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");exports.__esModule=true;exports.markAssetError=markAssetError;exports.isAssetError=isAssetError;exports.getClientBuildManifest=getClientBuildManifest;exports.default=void 0;var _getAssetPathFromRoute=_interopRequireDefault(require(\"../next-server/lib/router/utils/get-asset-path-from-route\"));var _requestIdleCallback=require(\"./request-idle-callback\");var MS_MAX_IDLE_DELAY=3800;function withFuture(key,map,generator){var entry=map.get(key);if(entry){if('future'in entry){return entry.future;}return Promise.resolve(entry);}var resolver;var prom=new Promise(function(resolve){resolver=resolve;});map.set(key,entry={resolve:resolver,future:prom});return generator?generator().then(function(value){return resolver(value),value;}):prom;}function hasPrefetch(link){try{link=document.createElement('link');return!!window.MSInputMethodContext&&!!document.documentMode||link.relList.supports('prefetch');}catch(_unused){return false;}}var canPrefetch=hasPrefetch();function prefetchViaDom(href,as,link){return new Promise(function(res,rej){if(document.querySelector(\"link[rel=\\\"prefetch\\\"][href^=\\\"\"+href+\"\\\"]\")){return res();}link=document.createElement('link');if(as)link.as=as;link.rel=\"prefetch\";link.crossOrigin=process.env.__NEXT_CROSS_ORIGIN;link.onload=res;link.onerror=rej;link.href=href;document.head.appendChild(link);});}var ASSET_LOAD_ERROR=Symbol('ASSET_LOAD_ERROR');function markAssetError(err){return Object.defineProperty(err,ASSET_LOAD_ERROR,{});}function isAssetError(err){return err&&ASSET_LOAD_ERROR in err;}function appendScript(src,script){return new Promise(function(resolve,reject){script=document.createElement('script');script.onload=resolve;script.onerror=function(){return reject(markAssetError(new Error(\"Failed to load script: \"+src)));};script.crossOrigin=process.env.__NEXT_CROSS_ORIGIN;script.src=src;document.body.appendChild(script);});}function resolvePromiseWithTimeout(p,ms,err){return new Promise(function(resolve,reject){var cancelled=false;p.then(function(r){cancelled=true;resolve(r);}).catch(reject);(0,_requestIdleCallback.requestIdleCallback)(function(){return setTimeout(function(){if(!cancelled){reject(err);}},ms);});});}function getClientBuildManifest(){if(self.__BUILD_MANIFEST){return Promise.resolve(self.__BUILD_MANIFEST);}var onBuildManifest=new Promise(function(resolve){var cb=self.__BUILD_MANIFEST_CB;self.__BUILD_MANIFEST_CB=function(){resolve(self.__BUILD_MANIFEST);cb&&cb();};});return resolvePromiseWithTimeout(onBuildManifest,MS_MAX_IDLE_DELAY,markAssetError(new Error('Failed to load client build manifest')));}function getFilesForRoute(assetPrefix,route){if(false){return Promise.resolve({scripts:[assetPrefix+'/_next/static/chunks/pages'+encodeURI((0,_getAssetPathFromRoute.default)(route,'.js'))],css:[]});}return getClientBuildManifest().then(function(manifest){if(!(route in manifest)){throw markAssetError(new Error(\"Failed to lookup route: \"+route));}var allFiles=manifest[route].map(function(entry){return assetPrefix+'/_next/'+encodeURI(entry);});return{scripts:allFiles.filter(function(v){return v.endsWith('.js');}),css:allFiles.filter(function(v){return v.endsWith('.css');})};});}function createRouteLoader(assetPrefix){var entrypoints=new Map();var loadedScripts=new Map();var styleSheets=new Map();var routes=new Map();function maybeExecuteScript(src){var prom=loadedScripts.get(src);if(prom){return prom;}if(document.querySelector(\"script[src^=\\\"\"+src+\"\\\"]\")){return Promise.resolve();}loadedScripts.set(src,prom=appendScript(src));return prom;}function fetchStyleSheet(href){var prom=styleSheets.get(href);if(prom){return prom;}styleSheets.set(href,prom=fetch(href).then(function(res){if(!res.ok){throw new Error(\"Failed to load stylesheet: \"+href);}return res.text().then(function(text){return{href:href,content:text};});}).catch(function(err){throw markAssetError(err);}));return prom;}return{whenEntrypoint:function whenEntrypoint(route){return withFuture(route,entrypoints);},onEntrypoint:function onEntrypoint(route,execute){Promise.resolve(execute).then(function(fn){return fn();}).then(function(exports){return{component:exports&&exports.default||exports,exports:exports};},function(err){return{error:err};}).then(function(input){var old=entrypoints.get(route);entrypoints.set(route,input);if(old&&'resolve'in old)old.resolve(input);});},loadRoute:function loadRoute(route,prefetch){var _this=this;return withFuture(route,routes,function(){return resolvePromiseWithTimeout(getFilesForRoute(assetPrefix,route).then(function(_ref){var scripts=_ref.scripts,css=_ref.css;return Promise.all([entrypoints.has(route)?[]:Promise.all(scripts.map(maybeExecuteScript)),Promise.all(css.map(fetchStyleSheet))]);}).then(function(res){return _this.whenEntrypoint(route).then(function(entrypoint){return{entrypoint:entrypoint,styles:res[1]};});}),MS_MAX_IDLE_DELAY,markAssetError(new Error(\"Route did not complete loading: \"+route))).then(function(_ref2){var entrypoint=_ref2.entrypoint,styles=_ref2.styles;var res=(0,_extends2.default)({styles:styles},entrypoint);return'error'in entrypoint?entrypoint:res;}).catch(function(err){if(prefetch){throw err;}return{error:err};});});},prefetch:function prefetch(route){var _this2=this;var cn;if(cn=navigator.connection){if(cn.saveData||/2g/.test(cn.effectiveType))return Promise.resolve();}return getFilesForRoute(assetPrefix,route).then(function(output){return Promise.all(canPrefetch?output.scripts.map(function(script){return prefetchViaDom(script,'script');}):[]);}).then(function(){(0,_requestIdleCallback.requestIdleCallback)(function(){return _this2.loadRoute(route,true).catch(function(){});});}).catch(function(){});}};}var _default=createRouteLoader;exports.default=_default;","map":null,"metadata":{},"sourceType":"script"}