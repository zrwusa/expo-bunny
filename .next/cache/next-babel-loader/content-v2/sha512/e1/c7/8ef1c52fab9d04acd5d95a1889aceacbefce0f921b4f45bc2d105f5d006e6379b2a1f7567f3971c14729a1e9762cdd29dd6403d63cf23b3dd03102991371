{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";var _jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/components/BunnyChat/QuickReplies.tsx\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import React,{Component}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import View from\"react-native-web/dist/exports/View\";import{warning}from\"./utils\";import{withBunnyKit}from\"../../hooks/bunny-kit\";var makeStyles=function makeStyles(sizeLabor,themeLabor){var wp=sizeLabor.designsBasedOn.iphoneX.wp;var colors=themeLabor.theme.colors;return StyleSheet.create({container:{flexDirection:'row',flexWrap:'wrap',maxWidth:wp(300)},quickReply:{justifyContent:'center',alignItems:'center',borderWidth:wp(1),maxWidth:wp(200),paddingVertical:wp(7),paddingHorizontal:wp(12),minHeight:wp(50),borderRadius:wp(13),margin:wp(3)},quickReplyText:{overflow:'visible'},sendLink:{borderWidth:0},sendLinkText:{color:colors.accent,fontWeight:'600',fontSize:wp(17)}});};var sameReply=function sameReply(currentReply){return function(reply){return currentReply.value===reply.value;};};var diffReply=function diffReply(currentReply){return function(reply){return currentReply.value!==reply.value;};};var QuickReplies=function(_Component){_inherits(QuickReplies,_Component);var _super=_createSuper(QuickReplies);function QuickReplies(){var _this;_classCallCheck(this,QuickReplies);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={replies:[]};_this.handlePress=function(reply){return function(){var currentMessage=_this.props.currentMessage;var replies=_this.state.replies;if(currentMessage){var _ref=currentMessage.quickReplies,type=_ref.type;switch(type){case'radio':{_this.handleSend([reply])();return;}case'checkbox':{if(replies.find(sameReply(reply))){_this.setState({replies:_this.state.replies.filter(diffReply(reply))});}else{_this.setState({replies:[].concat(_toConsumableArray(_this.state.replies),[reply])});}return;}default:{warning(\"onQuickReply unknown type: \"+type);return;}}}};};_this.handleSend=function(replies){return function(){var currentMessage=_this.props.currentMessage;if(_this.props.onQuickReply){_this.props.onQuickReply(replies.map(function(reply){return _objectSpread(_objectSpread({},reply),{},{messageId:currentMessage._id});}));}};};_this.shouldComponentDisplay=function(){var _this$props=_this.props,currentMessage=_this$props.currentMessage,nextMessage=_this$props.nextMessage;var hasReplies=!!currentMessage&&!!currentMessage.quickReplies;var hasNext=!!nextMessage&&!!nextMessage._id;var keepIt=currentMessage.quickReplies.keepIt;if(hasReplies&&!hasNext){return true;}if(hasReplies&&hasNext&&keepIt){return true;}return false;};_this.renderQuickReplySend=function(){var replies=_this.state.replies;var _this$props2=_this.props,sendText=_this$props2.sendText,customSend=_this$props2.renderQuickReplySend;var _this$props$bunnyKit=_this.props.bunnyKit,sizeLabor=_this$props$bunnyKit.sizeLabor,themeLabor=_this$props$bunnyKit.themeLabor;var styles=makeStyles(sizeLabor,themeLabor);return React.createElement(TouchableOpacity,{style:[styles.quickReply,styles.sendLink],onPress:_this.handleSend(replies),__self:_assertThisInitialized(_this),__source:{fileName:_jsxFileName,lineNumber:146,columnNumber:13}},customSend?customSend():React.createElement(Text,{style:styles.sendLinkText,__self:_assertThisInitialized(_this),__source:{fileName:_jsxFileName,lineNumber:153,columnNumber:21}},sendText));};return _this;}_createClass(QuickReplies,[{key:\"render\",value:function render(){var _this2=this;var _this$props3=this.props,currentMessage=_this$props3.currentMessage,quickRepliesColor=_this$props3.quickRepliesColor,quickReplyStyle=_this$props3.quickReplyStyle;var replies=this.state.replies;if(!this.shouldComponentDisplay()){return null;}var _ref2=currentMessage.quickReplies,type=_ref2.type;var _this$props$bunnyKit2=this.props.bunnyKit,sizeLabor=_this$props$bunnyKit2.sizeLabor,themeLabor=_this$props$bunnyKit2.themeLabor,colors=_this$props$bunnyKit2.colors;var styles=makeStyles(sizeLabor,themeLabor);return React.createElement(View,{style:styles.container,__self:this,__source:{fileName:_jsxFileName,lineNumber:171,columnNumber:13}},currentMessage.quickReplies.values.map(function(reply,index){var selected=type==='checkbox'&&replies.find(sameReply(reply));return React.createElement(TouchableOpacity,{onPress:_this2.handlePress(reply),style:[styles.quickReply,quickReplyStyle,{borderColor:quickRepliesColor},selected&&{backgroundColor:quickRepliesColor}],key:reply.value+\"-\"+index,__self:_this2,__source:{fileName:_jsxFileName,lineNumber:177,columnNumber:29}},React.createElement(Text,{numberOfLines:10,ellipsizeMode:'tail',style:[styles.quickReplyText,{color:selected?colors.text:quickRepliesColor}],__self:_this2,__source:{fileName:_jsxFileName,lineNumber:187,columnNumber:33}},reply.title));}),replies.length>0&&this.renderQuickReplySend());}}]);return QuickReplies;}(Component);QuickReplies.defaultProps={currentMessage:undefined,nextMessage:undefined,onQuickReply:function onQuickReply(){},quickRepliesColor:'#3498db',sendText:'Send',keepReplies:false,renderQuickReplySend:undefined,quickReplyStyle:undefined};export default withBunnyKit(QuickReplies);","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/components/BunnyChat/QuickReplies.tsx"],"names":["makeStyles","wp","sizeLabor","colors","themeLabor","container","flexDirection","flexWrap","maxWidth","quickReply","justifyContent","alignItems","borderWidth","paddingVertical","paddingHorizontal","minHeight","borderRadius","margin","quickReplyText","overflow","sendLink","sendLinkText","color","fontWeight","fontSize","sameReply","currentReply","reply","diffReply","QuickReplies","Component","defaultProps","currentMessage","nextMessage","onQuickReply","quickRepliesColor","sendText","keepReplies","renderQuickReplySend","quickReplyStyle","undefined","state","replies","handlePress","type","warning","handleSend","messageId","_id","shouldComponentDisplay","hasReplies","hasNext","keepIt","customSend","styles","selected","borderColor","backgroundColor","withBunnyKit"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {StyleProp, StyleSheet, Text, TouchableOpacity, View, ViewStyle,} from 'react-native';\nimport {IMessage, Reply} from './types';\nimport {warning} from './utils';\nimport {SizeLabor, ThemeLabor} from '../../types';\nimport {withBunnyKit, WithBunnyKit} from '../../hooks/bunny-kit';\n\nconst makeStyles = (sizeLabor: SizeLabor, themeLabor: ThemeLabor) => {\n    const {wp} = sizeLabor.designsBasedOn.iphoneX;\n    const {theme: {colors}} = themeLabor;\n    return StyleSheet.create({\n        container: {\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n            maxWidth: wp(300),\n        },\n        quickReply: {\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderWidth: wp(1),\n            maxWidth: wp(200),\n            paddingVertical: wp(7),\n            paddingHorizontal: wp(12),\n            minHeight: wp(50),\n            borderRadius: wp(13),\n            margin: wp(3),\n        },\n        quickReplyText: {\n            overflow: 'visible',\n        },\n        sendLink: {\n            borderWidth: 0,\n        },\n        sendLinkText: {\n            color: colors.accent,\n            fontWeight: '600',\n            fontSize: wp(17),\n        },\n    });\n};\n\nexport interface QuickRepliesProps<TMessage extends IMessage> {\n    nextMessage?: TMessage;\n    currentMessage?: TMessage;\n    quickRepliesColor?: string;\n    sendText?: string;\n    keepReplies?: boolean;\n    quickReplyStyle?: StyleProp<ViewStyle>;\n\n    onQuickReply?(reply: Reply[]): void;\n\n    renderQuickReplySend?(): React.ReactNode;\n}\n\nexport interface QuickRepliesState {\n    replies: Reply[];\n}\n\nconst sameReply = (currentReply: Reply) => (reply: Reply) =>\n    currentReply.value === reply.value;\n\nconst diffReply = (currentReply: Reply) => (reply: Reply) =>\n    currentReply.value !== reply.value;\n\nclass QuickReplies<TMessage extends IMessage> extends Component<QuickRepliesProps<TMessage> & WithBunnyKit,\n    QuickRepliesState> {\n    static defaultProps = {\n        currentMessage: undefined,\n        nextMessage: undefined,\n        onQuickReply: () => {\n        },\n        quickRepliesColor: '#3498db',\n        sendText: 'Send',\n        keepReplies: false,\n        renderQuickReplySend: undefined,\n        quickReplyStyle: undefined,\n    };\n\n    state = {\n        replies: [],\n    };\n\n    handlePress = (reply: Reply) => () => {\n        const {currentMessage} = this.props;\n        const {replies} = this.state;\n        if (currentMessage) {\n            const {type} = currentMessage.quickReplies!;\n            switch (type) {\n                case 'radio': {\n                    this.handleSend([reply])();\n                    return;\n                }\n\n                case 'checkbox': {\n                    if (replies.find(sameReply(reply))) {\n                        this.setState({\n                            replies: this.state.replies.filter(diffReply(reply)),\n                        });\n                    } else {\n                        this.setState({replies: [...this.state.replies, reply]});\n                    }\n                    return;\n                }\n\n                default: {\n                    warning(`onQuickReply unknown type: ${type}`);\n                    return;\n                }\n            }\n        }\n    };\n\n    handleSend = (replies: Reply[]) => () => {\n        const {currentMessage} = this.props;\n        if (this.props.onQuickReply) {\n            this.props.onQuickReply(\n                replies.map((reply: Reply) => ({\n                    ...reply,\n                    messageId: currentMessage!._id,\n                })),\n            );\n        }\n    };\n\n    shouldComponentDisplay = () => {\n        const {currentMessage, nextMessage} = this.props;\n        const hasReplies = !!currentMessage && !!currentMessage!.quickReplies;\n        const hasNext = !!nextMessage && !!nextMessage!._id;\n        const keepIt = currentMessage!.quickReplies!.keepIt;\n\n        if (hasReplies && !hasNext) {\n            return true;\n        }\n        if (hasReplies && hasNext && keepIt) {\n            return true;\n        }\n        return false;\n    };\n\n    renderQuickReplySend = () => {\n        const {replies} = this.state;\n        const {sendText, renderQuickReplySend: customSend} = this.props;\n        const {bunnyKit: {sizeLabor, themeLabor}} = this.props;\n        const styles = makeStyles(sizeLabor, themeLabor);\n        return (\n            <TouchableOpacity\n                style={[styles.quickReply, styles.sendLink]}\n                onPress={this.handleSend(replies)}\n            >\n                {customSend ? (\n                    customSend()\n                ) : (\n                    <Text style={styles.sendLinkText}>{sendText}</Text>\n                )}\n            </TouchableOpacity>\n        );\n    };\n\n    render() {\n        const {currentMessage, quickRepliesColor, quickReplyStyle} = this.props;\n        const {replies} = this.state;\n\n        if (!this.shouldComponentDisplay()) {\n            return null;\n        }\n\n        const {type} = currentMessage!.quickReplies!;\n        const {bunnyKit: {sizeLabor, themeLabor, colors}} = this.props;\n        const styles = makeStyles(sizeLabor, themeLabor);\n        return (\n            <View style={styles.container}>\n                {currentMessage!.quickReplies!.values.map(\n                    (reply: Reply, index: number) => {\n                        const selected =\n                            type === 'checkbox' && replies.find(sameReply(reply));\n                        return (\n                            <TouchableOpacity\n                                onPress={this.handlePress(reply)}\n                                style={[\n                                    styles.quickReply,\n                                    quickReplyStyle,\n                                    {borderColor: quickRepliesColor},\n                                    selected && {backgroundColor: quickRepliesColor},\n                                ]}\n                                key={`${reply.value}-${index}`}\n                            >\n                                <Text\n                                    numberOfLines={10}\n                                    ellipsizeMode={'tail'}\n                                    style={[\n                                        styles.quickReplyText,\n                                        {color: selected ? colors.text : quickRepliesColor},\n                                    ]}\n                                >\n                                    {reply.title}\n                                </Text>\n                            </TouchableOpacity>\n                        );\n                    },\n                )}\n                {replies.length > 0 && this.renderQuickReplySend()}\n            </View>\n        );\n    }\n}\n\nexport default withBunnyKit(QuickReplies);\n"]},"metadata":{},"sourceType":"module"}