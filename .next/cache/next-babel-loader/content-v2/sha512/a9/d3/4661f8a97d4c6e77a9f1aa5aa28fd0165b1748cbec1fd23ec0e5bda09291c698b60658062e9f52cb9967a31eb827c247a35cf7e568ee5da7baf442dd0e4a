{"ast":null,"code":"\"use strict\";var _interopRequireDefault2=require(\"@babel/runtime/helpers/interopRequireDefault\");var _extends2=_interopRequireDefault2(require(\"@babel/runtime/helpers/extends\"));var _toArray2=_interopRequireDefault2(require(\"@babel/runtime/helpers/toArray\"));exports.__esModule=true;exports.default=resolveRewrites;var _pathMatch=_interopRequireDefault(require(\"./path-match\"));var _prepareDestination=_interopRequireWildcard(require(\"./prepare-destination\"));var _normalizeTrailingSlash=require(\"../../../../client/normalize-trailing-slash\");var _normalizeLocalePath=require(\"../../i18n/normalize-locale-path\");var _parseRelativeUrl=require(\"./parse-relative-url\");var _router=require(\"../router\");function _getRequireWildcardCache(){if(typeof WeakMap!==\"function\")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var customRouteMatcher=(0,_pathMatch.default)(true);function resolveRewrites(asPath,pages,rewrites,query,resolveHref,locales){var matchedPage=false;var parsedAs=(0,_parseRelativeUrl.parseRelativeUrl)(asPath);var fsPathname=(0,_normalizeTrailingSlash.removePathTrailingSlash)((0,_normalizeLocalePath.normalizeLocalePath)((0,_router.delBasePath)(parsedAs.pathname),locales).pathname);var resolvedHref;var handleRewrite=function handleRewrite(rewrite){var matcher=customRouteMatcher(rewrite.source);var params=matcher(parsedAs.pathname);if(rewrite.has&&params){var hasParams=(0,_prepareDestination.matchHas)({headers:{host:document.location.hostname},cookies:document.cookie.split('; ').reduce(function(acc,item){var _item$split=item.split('='),_item$split2=(0,_toArray2.default)(_item$split),key=_item$split2[0],value=_item$split2.slice(1);acc[key]=value.join('=');return acc;},{})},rewrite.has,parsedAs.query);if(hasParams){(0,_extends2.default)(params,hasParams);}else{params=false;}}if(params){if(!rewrite.destination){return true;}var destRes=(0,_prepareDestination.default)(rewrite.destination,params,query,true);parsedAs=destRes.parsedDestination;asPath=destRes.newUrl;(0,_extends2.default)(query,destRes.parsedDestination.query);fsPathname=(0,_normalizeTrailingSlash.removePathTrailingSlash)((0,_normalizeLocalePath.normalizeLocalePath)((0,_router.delBasePath)(asPath),locales).pathname);if(pages.includes(fsPathname)){matchedPage=true;resolvedHref=fsPathname;return true;}resolvedHref=resolveHref(fsPathname);if(resolvedHref!==asPath&&pages.includes(resolvedHref)){matchedPage=true;return true;}}};var finished=false;for(var i=0;i<rewrites.beforeFiles.length;i++){handleRewrite(rewrites.beforeFiles[i]);}matchedPage=pages.includes(fsPathname);if(!matchedPage){if(!finished){for(var _i=0;_i<rewrites.afterFiles.length;_i++){if(handleRewrite(rewrites.afterFiles[_i])){finished=true;break;}}}if(!finished){resolvedHref=resolveHref(fsPathname);matchedPage=pages.includes(resolvedHref);finished=matchedPage;}if(!finished){for(var _i2=0;_i2<rewrites.fallback.length;_i2++){if(handleRewrite(rewrites.fallback[_i2])){finished=true;break;}}}}return{asPath:asPath,parsedAs:parsedAs,matchedPage:matchedPage,resolvedHref:resolvedHref};}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","matchedPage","parsedAs","fsPathname","handleRewrite","rewrite","matcher","params","hasParams","headers","host","document","cookies","item","acc","value","Object","destRes","asPath","pages","resolvedHref","resolveHref","finished","i","rewrites"],"mappings":"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","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination, { matchHas } from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../../i18n/normalize-locale-path'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport { delBasePath } from '../router'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  rewrites: {\n    beforeFiles: Rewrite[]\n    afterFiles: Rewrite[]\n    fallback: Rewrite[]\n  },\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string,\n  locales?: string[]\n): {\n  matchedPage: boolean\n  parsedAs: ReturnType<typeof parseRelativeUrl>\n  asPath: string\n  resolvedHref?: string\n} {\n  let matchedPage = false\n  let parsedAs = parseRelativeUrl(asPath)\n  let fsPathname = removePathTrailingSlash(\n    normalizeLocalePath(delBasePath(parsedAs.pathname), locales).pathname\n  )\n  let resolvedHref\n\n  const handleRewrite = (rewrite: Rewrite) => {\n    const matcher = customRouteMatcher(rewrite.source)\n    let params = matcher(parsedAs.pathname)\n\n    if (rewrite.has && params) {\n      const hasParams = matchHas(\n        {\n          headers: {\n            host: document.location.hostname,\n          },\n          cookies: document.cookie\n            .split('; ')\n            .reduce<Record<string, string>>((acc, item) => {\n              const [key, ...value] = item.split('=')\n              acc[key] = value.join('=')\n              return acc\n            }, {}),\n        } as any,\n        rewrite.has,\n        parsedAs.query\n      )\n\n      if (hasParams) {\n        Object.assign(params, hasParams)\n      } else {\n        params = false\n      }\n    }\n\n    if (params) {\n      if (!rewrite.destination) {\n        // this is a proxied rewrite which isn't handled on the client\n        return true\n      }\n      const destRes = prepareDestination(\n        rewrite.destination,\n        params,\n        query,\n        true\n      )\n      parsedAs = destRes.parsedDestination\n      asPath = destRes.newUrl\n      Object.assign(query, destRes.parsedDestination.query)\n\n      fsPathname = removePathTrailingSlash(\n        normalizeLocalePath(delBasePath(asPath), locales).pathname\n      )\n\n      if (pages.includes(fsPathname)) {\n        // check if we now match a page as this means we are done\n        // resolving the rewrites\n        matchedPage = true\n        resolvedHref = fsPathname\n        return true\n      }\n\n      // check if we match a dynamic-route, if so we break the rewrites chain\n      resolvedHref = resolveHref(fsPathname)\n\n      if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n        matchedPage = true\n        return true\n      }\n    }\n  }\n  let finished = false\n\n  for (let i = 0; i < rewrites.beforeFiles.length; i++) {\n    // we don't end after match in beforeFiles to allow\n    // continuing through all beforeFiles rewrites\n    handleRewrite(rewrites.beforeFiles[i])\n  }\n  matchedPage = pages.includes(fsPathname)\n\n  if (!matchedPage) {\n    if (!finished) {\n      for (let i = 0; i < rewrites.afterFiles.length; i++) {\n        if (handleRewrite(rewrites.afterFiles[i])) {\n          finished = true\n          break\n        }\n      }\n    }\n\n    // check dynamic route before processing fallback rewrites\n    if (!finished) {\n      resolvedHref = resolveHref(fsPathname)\n      matchedPage = pages.includes(resolvedHref)\n      finished = matchedPage\n    }\n\n    if (!finished) {\n      for (let i = 0; i < rewrites.fallback.length; i++) {\n        if (handleRewrite(rewrites.fallback[i])) {\n          finished = true\n          break\n        }\n      }\n    }\n  }\n\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}