{"ast":null,"code":"var _s2=$RefreshSig$();import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";var _jsxFileName=\"/Users/revone/projects/expo-react-bunny/src/components/VividAlgorithm/VividAlgorithm.tsx\";import*as React from'react';import{useEffect,useRef}from'react';import{Text,View}from\"../UI\";import{Card,Col,Row}from\"../../containers\";import{useBunnyKit}from\"../../hooks/bunny-kit\";import{makeStyles}from\"./styles\";import{AbstractGraph,BinaryTree,BinaryTreeNode,Coordinate,DirectedGraph,getDirectionVector,SinglyLinkedListNode,Stack,UndirectedGraph,uuidV4}from\"../../utils\";import{TreeNode}from\"../../types\";import Svg,{Circle,Defs,G,Line,Marker,Path,Rect,Text as SVGText,TSpan}from'react-native-svg';import ScrollView from\"react-native-web/dist/exports/ScrollView\";export var VividAlgorithm=function VividAlgorithm(props){_s2();var _s=$RefreshSig$();var _this=this;var data=props.data,referenceData=props.referenceData,relatedNodeKey=props.relatedNodeKey,relatedRouteKey=props.relatedRouteKey,_props$isDebug=props.isDebug,isDebug=_props$isDebug===void 0?false:_props$isDebug;var _useBunnyKit=useBunnyKit(),sizeLabor=_useBunnyKit.sizeLabor,themeLabor=_useBunnyKit.themeLabor,wp=_useBunnyKit.wp,colors=_useBunnyKit.colors,ms=_useBunnyKit.ms;var styles=makeStyles(sizeLabor,themeLabor);var relatedNode;var relatedBinaryNode;var relatedMatrixCell;if(relatedNodeKey){relatedNode=data==null?void 0:data[relatedNodeKey];relatedBinaryNode=data==null?void 0:data[relatedNodeKey];relatedMatrixCell=data==null?void 0:data[relatedNodeKey];}var relatedMatrixRoutes;if(relatedRouteKey){relatedMatrixRoutes=data==null?void 0:data[relatedRouteKey];}var VividNumber=function VividNumber(_ref){var data=_ref.data;return React.createElement(Row,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:55,columnNumber:13}},React.createElement(Col,{size:6,__self:_this,__source:{fileName:_jsxFileName,lineNumber:56,columnNumber:17}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:56,columnNumber:31}},data.toString())));};var getPointsByDelta=function getPointsByDelta(src,dest,cutDelta){if(cutDelta===undefined)cutDelta=0;var PI=Math.PI;var angle=Math.atan2(dest.y-src.y,dest.x-src.x);var theta=angle*(180/Math.PI);var newSrc=new Coordinate(src.y,src.x);var newDest=new Coordinate(dest.y,dest.x);if(angle<=0.5*PI){newSrc.x=src.x+Math.cos(angle)*cutDelta;newSrc.y=src.y+Math.sin(angle)*cutDelta;newDest.x=dest.x-Math.cos(angle)*cutDelta;newDest.y=dest.y-Math.sin(angle)*cutDelta;}else if(angle>0.5*PI&&angle<=PI){angle=PI-angle;newSrc.x=src.x-Math.cos(angle)*cutDelta;newSrc.y=src.y+Math.sin(angle)*cutDelta;newDest.x=dest.x+Math.cos(angle)*cutDelta;newDest.y=dest.y-Math.sin(angle)*cutDelta;}src=newSrc;dest=newDest;return{src:src,dest:dest};};var LineWithArrow=function LineWithArrow(_ref2){var from=_ref2.from,to=_ref2.to,weight=_ref2.weight,delta=_ref2.delta;if(delta===undefined)delta=0;var _getPointsByDelta=getPointsByDelta(from,to,delta),src=_getPointsByDelta.src,dest=_getPointsByDelta.dest;return React.createElement(G,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:95,columnNumber:16}},React.createElement(Defs,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:96,columnNumber:13}},React.createElement(Marker,{id:\"Triangle\",viewBox:\"0 0 10 10\",refX:\"0\",refY:\"5\",markerWidth:\"4\",markerHeight:\"3\",orient:\"auto\",__self:_this,__source:{fileName:_jsxFileName,lineNumber:97,columnNumber:17}},React.createElement(Path,{d:\"M 0 0 L 10 5 L 0 10 z\",fill:arrowColor,stroke:arrowColor,__self:_this,__source:{fileName:_jsxFileName,lineNumber:106,columnNumber:21}}))),React.createElement(Path,{d:\"M \"+src.x+\" \"+src.y+\" L \"+dest.x+\" \"+dest.y,fill:arrowColor,stroke:arrowColor,strokeWidth:\"2\",markerEnd:\"url(#Triangle)\",__self:_this,__source:{fileName:_jsxFileName,lineNumber:109,columnNumber:13}}),weight!==undefined&&weight!==null?React.createElement(SVGText,{strokeWidth:wp(1),fontSize:ms.fs.xs,fill:colors.text,fontWeight:100,stroke:colors.text,x:src.x+(dest.x-src.x)/2+(src.x>dest.x?wp(10):wp(-10)),y:src.y+(dest.y-src.y)/2+(src.y>dest.y?wp(3):wp(-3)),textAnchor:\"middle\",__self:_this,__source:{fileName:_jsxFileName,lineNumber:118,columnNumber:23}},weight):null);};var VividString=function VividString(_ref3){var data=_ref3.data;return React.createElement(Row,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:136,columnNumber:13}},React.createElement(Col,{size:6,__self:_this,__source:{fileName:_jsxFileName,lineNumber:137,columnNumber:17}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:137,columnNumber:31}},data)));};var TwoWayScrollSVG=function TwoWayScrollSVG(_ref4){_s();var children=_ref4.children,autoScroll=_ref4.autoScroll;var horizontalScrollView=useRef(null);if(autoScroll){useEffect(function(){var _horizontalScrollView;horizontalScrollView==null?void 0:(_horizontalScrollView=horizontalScrollView.current)==null?void 0:_horizontalScrollView.scrollTo({x:(treePanelWidth-wp(375))/2,y:0,animated:false});},[]);}return React.createElement(ScrollView,{nestedScrollEnabled:true,style:{height:wp(375)},__self:_this,__source:{fileName:_jsxFileName,lineNumber:157,columnNumber:13}},React.createElement(ScrollView,{style:{width:wp(375)},horizontal:true,ref:horizontalScrollView,__self:_this,__source:{fileName:_jsxFileName,lineNumber:158,columnNumber:17}},React.createElement(Svg,{width:treePanelWidth,height:treePanelHeight,__self:_this,__source:{fileName:_jsxFileName,lineNumber:160,columnNumber:21}},React.createElement(G,{fill:colors.background,strokeWidth:strokeWidth,stroke:colors.border,__self:_this,__source:{fileName:_jsxFileName,lineNumber:164,columnNumber:25}},children))));};_s(TwoWayScrollSVG,\"aMKvA8wecmDCQRR3mbt1xlMvncY=\");var VividTree=function VividTree(_ref5){var data=_ref5.data;return React.createElement(TwoWayScrollSVG,{autoScroll:true,__self:_this,__source:{fileName:_jsxFileName,lineNumber:177,columnNumber:13}},React.createElement(VividTreeRecursive,{node:data,level:1,index:0,familyLength:1,parentX:0,parentY:0,maxHeight:data.getHeight(),__self:_this,__source:{fileName:_jsxFileName,lineNumber:178,columnNumber:17}}));};var VividBinaryTree=function VividBinaryTree(_ref6){var node=_ref6.node,maxHeight=_ref6.maxHeight;return React.createElement(TwoWayScrollSVG,{autoScroll:true,__self:_this,__source:{fileName:_jsxFileName,lineNumber:186,columnNumber:13}},node?React.createElement(VividBinaryTreeRecursive,{node:node,level:1,index:0,familyLength:1,maxHeight:maxHeight,__self:_this,__source:{fileName:_jsxFileName,lineNumber:189,columnNumber:27}}):null);};var VividGraph=function VividGraph(_ref7){var data=_ref7.data;return React.createElement(TwoWayScrollSVG,{autoScroll:false,__self:_this,__source:{fileName:_jsxFileName,lineNumber:199,columnNumber:13}},data?React.createElement(VividGraphDrawer,{graph:data,__self:_this,__source:{fileName:_jsxFileName,lineNumber:202,columnNumber:27}}):null);};var matrixPanelWidth=wp(360,false);var matrixRectStrokeWidth=wp(1,false);var arrowCut=0.3;var arrowColor=colors.accent;var VividMatrix=function VividMatrix(_ref8){var _data$;var data=_ref8.data;var rowCount=data==null?void 0:data.length;var colCount=data==null?void 0:(_data$=data[0])==null?void 0:_data$.length;if(colCount<1){return null;}var rectSize=(matrixPanelWidth-(colCount+1)*matrixRectStrokeWidth)/colCount;var matrixHeight=rectSize*rowCount;return React.createElement(Svg,{width:matrixPanelWidth,height:matrixHeight,__self:_this,__source:{fileName:_jsxFileName,lineNumber:224,columnNumber:13}},React.createElement(G,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:228,columnNumber:17}},data.map(function(row,i){return row.map(function(col,j){var _relatedMatrixCell,_relatedMatrixCell2;var colKey=i+'-'+j.toString();var isActive=((_relatedMatrixCell=relatedMatrixCell)==null?void 0:_relatedMatrixCell.y)===i&&((_relatedMatrixCell2=relatedMatrixCell)==null?void 0:_relatedMatrixCell2.x)===j;return React.createElement(Rect,{key:colKey,x:j*rectSize,y:i*rectSize,width:rectSize,height:rectSize,stroke:colors.border,strokeDasharray:rectSize+\",\"+rectSize*2+\",\"+rectSize,strokeWidth:matrixRectStrokeWidth,fill:isActive?colors.primary:colors.backgroundA,__self:_this,__source:{fileName:_jsxFileName,lineNumber:233,columnNumber:36}});});}),data.map(function(row,i){var rowKey=i.toString();return row.map(function(col,j){var _relatedMatrixCell3,_relatedMatrixCell4;var colKey='text-'+i+'-'+j.toString();var isActive=((_relatedMatrixCell3=relatedMatrixCell)==null?void 0:_relatedMatrixCell3.y)===i&&((_relatedMatrixCell4=relatedMatrixCell)==null?void 0:_relatedMatrixCell4.x)===j;return React.createElement(SVGText,{key:colKey,strokeWidth:wp(1),fontSize:ms.fs.m,fill:isActive?colors.buttonText:colors.text,fontWeight:100,x:(j+0.5)*rectSize,y:(i+0.5)*rectSize,textAnchor:\"middle\",__self:_this,__source:{fileName:_jsxFileName,lineNumber:252,columnNumber:36}},data[i][j].toString());});}),relatedMatrixRoutes?relatedMatrixRoutes.map(function(route,routeIndex){return route.map(function(cell,cellIndex){var _relatedMatrixRoutes,_relatedMatrixRoutes$;var from=cell;var to=(_relatedMatrixRoutes=relatedMatrixRoutes)==null?void 0:(_relatedMatrixRoutes$=_relatedMatrixRoutes[routeIndex])==null?void 0:_relatedMatrixRoutes$[cellIndex+1];var deviationVector=getDirectionVector(from,to);if(from&&to){var src=new Coordinate((from.y+0.5+deviationVector.y*arrowCut)*rectSize,(from.x+0.5+deviationVector.x*arrowCut)*rectSize);var dest=new Coordinate((to.y+0.5-deviationVector.y*arrowCut)*rectSize,(to.x+0.5-deviationVector.x*arrowCut)*rectSize);return React.createElement(LineWithArrow,{key:src.y+','+src.x+dest.y+dest.x,from:src,to:dest,__self:_this,__source:{fileName:_jsxFileName,lineNumber:275,columnNumber:48}});}else{return null;}});}):null));};var treePanelWidth=wp(20000);var treePanelHeight=wp(20000);var strokeWidth=wp(2);var levelOffset=wp(60);var circleR=wp(20);var nodeSpace=wp(40);var fontSize=wp(12);var fontOffsetY=fontSize/3;var VividTreeRecursive=function VividTreeRecursive(_ref9){var _relatedNode;var node=_ref9.node,_ref9$level=_ref9.level,level=_ref9$level===void 0?1:_ref9$level,_ref9$index=_ref9.index,index=_ref9$index===void 0?0:_ref9$index,_ref9$familyLength=_ref9.familyLength,familyLength=_ref9$familyLength===void 0?1:_ref9$familyLength,parentX=_ref9.parentX,parentY=_ref9.parentY,maxHeight=_ref9.maxHeight;if(!node){return null;}var space=0;var offsetX=0;var offsetY=0;var levelNodeSpace=nodeSpace*Math.pow(2,(maxHeight||5)-level);if(level===1){space=treePanelWidth/2;offsetX=space-circleR;offsetY=(level-1)*levelOffset+circleR+strokeWidth;}else{offsetX=parentX-familyLength/2*levelNodeSpace+(index+0.5)*levelNodeSpace;offsetY=(level-1)*levelOffset+circleR+strokeWidth;}var isActive=node.id===((_relatedNode=relatedNode)==null?void 0:_relatedNode.id);return React.createElement(G,{key:node.id,__self:_this,__source:{fileName:_jsxFileName,lineNumber:334,columnNumber:13}},level>1?React.createElement(Line,{x1:parentX,y1:parentY,x2:offsetX,y2:offsetY,__self:_this,__source:{fileName:_jsxFileName,lineNumber:337,columnNumber:27}}):null,node.children?node.children.map(function(child,index,family){return React.createElement(VividTreeRecursive,{key:child.id,node:child,level:level+1,index:index,familyLength:family.length,parentX:offsetX,parentY:offsetY,maxHeight:maxHeight,__self:_this,__source:{fileName:_jsxFileName,lineNumber:341,columnNumber:67}});}):null,React.createElement(Circle,{r:circleR,cx:offsetX,cy:offsetY,fill:isActive?colors.primary:colors.background,__self:_this,__source:{fileName:_jsxFileName,lineNumber:351,columnNumber:17}}),React.createElement(SVGText,{strokeWidth:wp(1),fill:isActive?colors.buttonText:colors.text,stroke:isActive?colors.buttonText:colors.text,fontSize:fontSize,fontWeight:100,x:offsetX,y:offsetY+fontOffsetY,textAnchor:\"middle\",__self:_this,__source:{fileName:_jsxFileName,lineNumber:353,columnNumber:17}},node.name||node.id));};var VividBinaryTreeRecursive=function VividBinaryTreeRecursive(_ref10){var _relatedBinaryNode;var node=_ref10.node,_ref10$level=_ref10.level,level=_ref10$level===void 0?1:_ref10$level,_ref10$index=_ref10.index,index=_ref10$index===void 0?0:_ref10$index,_ref10$familyLength=_ref10.familyLength,familyLength=_ref10$familyLength===void 0?1:_ref10$familyLength,parentX=_ref10.parentX,parentY=_ref10.parentY,maxHeight=_ref10.maxHeight;if(!node){return null;}var space=0;var offsetX;var offsetY;var levelNodeSpace=nodeSpace*Math.pow(2,(maxHeight||5)-level);if(level===1){space=treePanelWidth/2;offsetX=space-circleR;offsetY=(level-1)*levelOffset+circleR+strokeWidth;}else{offsetX=parentX-(index<1?levelNodeSpace:-levelNodeSpace);offsetY=(level-1)*levelOffset+circleR+strokeWidth;}var isActive=node.id===((_relatedBinaryNode=relatedBinaryNode)==null?void 0:_relatedBinaryNode.id);return React.createElement(G,{key:node.id,__self:_this,__source:{fileName:_jsxFileName,lineNumber:394,columnNumber:13}},level>1?React.createElement(Line,{x1:parentX,y1:parentY,x2:offsetX,y2:offsetY,__self:_this,__source:{fileName:_jsxFileName,lineNumber:397,columnNumber:27}}):null,node.left?React.createElement(VividBinaryTreeRecursive,{node:node.left,level:level+1,index:0,familyLength:2,parentX:offsetX,parentY:offsetY,maxHeight:maxHeight,__self:_this,__source:{fileName:_jsxFileName,lineNumber:403,columnNumber:25}}):null,node.right?React.createElement(VividBinaryTreeRecursive,{node:node.right,level:level+1,index:1,familyLength:2,parentX:offsetX,parentY:offsetY,maxHeight:maxHeight,__self:_this,__source:{fileName:_jsxFileName,lineNumber:411,columnNumber:25}}):null,React.createElement(Circle,{r:circleR,cx:offsetX,cy:offsetY,fill:isActive?colors.primary:colors.background,__self:_this,__source:{fileName:_jsxFileName,lineNumber:416,columnNumber:17}}),React.createElement(SVGText,{fill:\"none\",stroke:isActive?colors.buttonText:colors.text,fontSize:fontSize,fontWeight:1,x:offsetX,y:offsetY+fontOffsetY,textAnchor:\"middle\",__self:_this,__source:{fileName:_jsxFileName,lineNumber:418,columnNumber:17}},React.createElement(TSpan,{x:offsetX,y:offsetY+fontOffsetY,__self:_this,__source:{fileName:_jsxFileName,lineNumber:427,columnNumber:21}},node.id),React.createElement(TSpan,{x:offsetX,y:offsetY+fontOffsetY+fontSize+wp(2),__self:_this,__source:{fileName:_jsxFileName,lineNumber:428,columnNumber:21}},node.count),React.createElement(TSpan,{x:offsetX,y:offsetY+fontOffsetY+2*fontSize+wp(4),__self:_this,__source:{fileName:_jsxFileName,lineNumber:430,columnNumber:21}},node.allLesserSum)));};var VividGraphDrawer=function VividGraphDrawer(_ref11){var graph=_ref11.graph;var vertexDistance=wp(80);var vertices=graph.vertexSet();var vertexCount=vertices.size;var edges=graph.edgeSet();var coordsMap=new Map();var rowCount=Math.ceil(Math.sqrt(vertexCount));var i=0;vertices.forEach(function(vertex,id){var rowIndex=Math.floor(i/rowCount);var colIndex=Math.floor(i%rowCount);var y=rowIndex*vertexDistance+circleR;var x=(rowIndex%2===0?colIndex+1:colIndex)*vertexDistance+circleR;coordsMap.set(vertex,new Coordinate(y,x));i++;});return React.createElement(G,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:456,columnNumber:13}},_toConsumableArray(vertices).map(function(_ref12){var _ref13=_slicedToArray(_ref12,2),id=_ref13[0],vertex=_ref13[1];var coordinate=coordsMap.get(vertex);return coordinate?React.createElement(G,{key:vertex.id,__self:_this,__source:{fileName:_jsxFileName,lineNumber:462,columnNumber:35}},React.createElement(Circle,{key:vertex.id,r:circleR,cx:coordinate.x,cy:coordinate.y,fill:colors.primary,__self:_this,__source:{fileName:_jsxFileName,lineNumber:463,columnNumber:37}}),React.createElement(SVGText,{key:vertex.id+'id',fill:\"none\",stroke:colors.text,fontSize:fontSize,fontWeight:1,x:coordinate.x,y:coordinate.y+fontOffsetY,textAnchor:\"middle\",__self:_this,__source:{fileName:_jsxFileName,lineNumber:467,columnNumber:37}},React.createElement(TSpan,{x:coordinate.x,y:coordinate.y+fontOffsetY,__self:_this,__source:{fileName:_jsxFileName,lineNumber:476,columnNumber:41}},vertex.id))):null;}),edges.map(function(edge){if(graph instanceof UndirectedGraph){var ends=graph.getEndsOfEdge(edge);if(ends&&ends.length>1){var v1Coordinate=coordsMap.get(ends[0]);var v2Coordinate=coordsMap.get(ends[1]);if(v1Coordinate&&v2Coordinate){var _getPointsByDelta2=getPointsByDelta(v1Coordinate,v2Coordinate,circleR),src=_getPointsByDelta2.src,dest=_getPointsByDelta2.dest;return React.createElement(G,{key:edge.hashCode,__self:_this,__source:{fileName:_jsxFileName,lineNumber:491,columnNumber:44}},React.createElement(Line,{x1:src.x,y1:src.y,x2:dest.x,y2:dest.y,__self:_this,__source:{fileName:_jsxFileName,lineNumber:492,columnNumber:41}}));}}}else if(graph instanceof DirectedGraph){var _src=graph.getEdgeSrc(edge);var _dest=graph.getEdgeDest(edge);if(_src&&_dest){var srcCod=coordsMap.get(_src);var destCod=coordsMap.get(_dest);var _edge=graph.getEdge(_src,_dest);if(srcCod&&destCod){return React.createElement(LineWithArrow,{key:_edge.hashCode,from:srcCod,to:destCod,weight:_edge==null?void 0:_edge.weight,delta:circleR,__self:_this,__source:{fileName:_jsxFileName,lineNumber:506,columnNumber:44}});}}}}));};var VividArray=function VividArray(_ref14){var data=_ref14.data;return React.createElement(View,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:523,columnNumber:13}},data[0]instanceof Array?React.createElement(VividMatrix,{data:data,__self:_this,__source:{fileName:_jsxFileName,lineNumber:526,columnNumber:27}}):data.map(function(item){switch(typeof item){case'number':return React.createElement(View,{style:styles.arrayItem,key:uuidV4(),__self:_this,__source:{fileName:_jsxFileName,lineNumber:530,columnNumber:44}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:531,columnNumber:65}},item));case'string':return React.createElement(View,{style:styles.arrayItem,key:uuidV4(),__self:_this,__source:{fileName:_jsxFileName,lineNumber:533,columnNumber:44}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:534,columnNumber:65}},item));default:return React.createElement(View,{style:styles.arrayItem,key:uuidV4(),__self:_this,__source:{fileName:_jsxFileName,lineNumber:536,columnNumber:44}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:537,columnNumber:65}},JSON.stringify(item)));}}));};var VividObject=function VividObject(_ref15){var data=_ref15.data;return React.createElement(Row,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:548,columnNumber:13}},Object.keys(data).map(function(key){return React.createElement(View,{style:styles.arrayItem,key:key,__self:_this,__source:{fileName:_jsxFileName,lineNumber:551,columnNumber:32}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:552,columnNumber:29}},key),React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:553,columnNumber:29}},data[key]));}));};var VividLinkedListNode=function VividLinkedListNode(_ref16){var data=_ref16.data;return React.createElement(Row,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:563,columnNumber:13}},React.createElement(View,{style:styles.arrayItem,key:data.index,__self:_this,__source:{fileName:_jsxFileName,lineNumber:564,columnNumber:17}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:565,columnNumber:21}},data.index),React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:566,columnNumber:21}},data.value)));};var VividBinaryTreeNode=function VividBinaryTreeNode(_ref17){var data=_ref17.data;return React.createElement(Row,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:575,columnNumber:13}},React.createElement(View,{style:styles.arrayItem,key:data.id,__self:_this,__source:{fileName:_jsxFileName,lineNumber:576,columnNumber:17}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:577,columnNumber:21}},data.id)));};var VividBinarySearchTreeNode=function VividBinarySearchTreeNode(_ref18){var data=_ref18.data;return React.createElement(Row,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:585,columnNumber:13}},React.createElement(View,{style:styles.arrayItem,key:data.id,__self:_this,__source:{fileName:_jsxFileName,lineNumber:586,columnNumber:17}},React.createElement(Text,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:587,columnNumber:21}},data.id)));};var renderVariable=function renderVariable(item){if(!item)return null;switch(typeof item){case'number':return React.createElement(VividNumber,{data:item,__self:_this,__source:{fileName:_jsxFileName,lineNumber:597,columnNumber:24}});case'string':return React.createElement(VividString,{data:item,__self:_this,__source:{fileName:_jsxFileName,lineNumber:599,columnNumber:24}});case'object':if(item instanceof TreeNode){return React.createElement(VividTree,{data:item,__self:_this,__source:{fileName:_jsxFileName,lineNumber:602,columnNumber:28}});}else if(item instanceof AbstractGraph){return React.createElement(VividGraph,{data:item,__self:_this,__source:{fileName:_jsxFileName,lineNumber:604,columnNumber:28}});}else if(item instanceof BinaryTreeNode){return React.createElement(VividBinaryTreeNode,{data:item,__self:_this,__source:{fileName:_jsxFileName,lineNumber:606,columnNumber:28}});}else if(item instanceof BinaryTree){return React.createElement(VividBinaryTree,{node:item.root,maxHeight:item.getHeight(),__self:_this,__source:{fileName:_jsxFileName,lineNumber:608,columnNumber:28}});}else if(item instanceof SinglyLinkedListNode){return React.createElement(VividLinkedListNode,{data:item,__self:_this,__source:{fileName:_jsxFileName,lineNumber:610,columnNumber:28}});}else if(item instanceof Map){return React.createElement(VividArray,{data:Array.from(item),__self:_this,__source:{fileName:_jsxFileName,lineNumber:612,columnNumber:28}});}else if(item instanceof Stack){return React.createElement(VividArray,{data:item.toArray(),__self:_this,__source:{fileName:_jsxFileName,lineNumber:614,columnNumber:28}});}else if(item instanceof Array){return React.createElement(VividArray,{data:item,__self:_this,__source:{fileName:_jsxFileName,lineNumber:616,columnNumber:28}});}else{return React.createElement(VividObject,{data:item,__self:_this,__source:{fileName:_jsxFileName,lineNumber:618,columnNumber:28}});}}};return React.createElement(View,{__self:this,__source:{fileName:_jsxFileName,lineNumber:623,columnNumber:12}},referenceData?renderVariable(referenceData):null,data?Object.keys(data).map(function(datumKey){var item=data[datumKey];return datumKey!==relatedRouteKey&&datumKey!==relatedNodeKey?React.createElement(Card,{title:datumKey,key:datumKey,__self:_this,__source:{fileName:_jsxFileName,lineNumber:635,columnNumber:25}},renderVariable(item)):null;}):null);};_s2(VividAlgorithm,\"CfLz1b2x8K/yRnqJ1/TE1S3QG8M=\",false,function(){return[useBunnyKit];});_c=VividAlgorithm;var _c;$RefreshReg$(_c,\"VividAlgorithm\");","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/components/VividAlgorithm/VividAlgorithm.tsx"],"names":["Text","VividAlgorithm","data","referenceData","relatedNodeKey","relatedRouteKey","isDebug","props","sizeLabor","themeLabor","wp","colors","ms","useBunnyKit","styles","makeStyles","relatedNode","relatedBinaryNode","relatedMatrixCell","relatedMatrixRoutes","VividNumber","getPointsByDelta","cutDelta","PI","Math","angle","dest","src","theta","newSrc","newDest","LineWithArrow","from","to","weight","delta","VividString","TwoWayScrollSVG","children","autoScroll","horizontalScrollView","useRef","useEffect","x","treePanelWidth","y","animated","height","width","VividTree","VividBinaryTree","node","maxHeight","VividGraph","matrixPanelWidth","matrixRectStrokeWidth","arrowCut","arrowColor","VividMatrix","rowCount","colCount","rectSize","matrixHeight","colKey","i","j","isActive","rowKey","cellIndex","deviationVector","getDirectionVector","treePanelHeight","strokeWidth","levelOffset","circleR","nodeSpace","fontSize","fontOffsetY","VividTreeRecursive","level","index","familyLength","parentX","parentY","space","offsetX","offsetY","levelNodeSpace","child","family","VividBinaryTreeRecursive","VividGraphDrawer","graph","vertexDistance","vertices","vertexCount","edges","coordsMap","rowIndex","colIndex","id","vertex","coordinate","ends","v1Coordinate","v2Coordinate","edge","srcCod","destCod","VividArray","uuidV4","JSON","VividObject","VividLinkedListNode","VividBinaryTreeNode","VividBinarySearchTreeNode","renderVariable","item","Array","datumKey"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {useEffect, useRef} from 'react';\nimport {Text, View} from '../UI';\nimport {Card, Col, Row} from '../../containers';\nimport {useBunnyKit} from '../../hooks/bunny-kit';\nimport {makeStyles} from './styles';\nimport {\n    AbstractEdge,\n    AbstractGraph,\n    AbstractVertex,\n    BinaryTree,\n    BinaryTreeNode,\n    Coordinate,\n    DirectedGraph,\n    getDirectionVector,\n    SinglyLinkedListNode,\n    Stack,\n    UndirectedGraph,\n    uuidV4\n} from '../../utils';\nimport {TreeNode} from '../../types';\nimport Svg, {Circle, Defs, G, Line, Marker, Path, Rect, Text as SVGText, TSpan} from 'react-native-svg';\nimport {ScrollView} from 'react-native';\n\nexport interface VividAlgorithmProps<T> {\n    data?: T,\n    referenceData?: any,\n    relatedNodeKey?: string,\n    relatedRouteKey?: string,\n    isDebug?: boolean\n}\n\nexport const VividAlgorithm = function <T extends { [key in string]: any }>(props: VividAlgorithmProps<T>) {\n    const {data, referenceData, relatedNodeKey, relatedRouteKey, isDebug = false} = props;\n    const {sizeLabor, themeLabor, wp, colors, ms} = useBunnyKit();\n    const styles = makeStyles(sizeLabor, themeLabor);\n\n    let relatedNode: TreeNode<any> | undefined;\n    let relatedBinaryNode: BinaryTreeNode<any> | undefined;\n    let relatedMatrixCell: Coordinate | undefined;\n    if (relatedNodeKey) {\n        relatedNode = data?.[relatedNodeKey] as TreeNode<any> | undefined;\n        relatedBinaryNode = data?.[relatedNodeKey] as BinaryTreeNode<any> | undefined;\n        relatedMatrixCell = data?.[relatedNodeKey] as Coordinate | undefined;\n    }\n\n    // TODO render bug needs to be fixed\n    let relatedMatrixRoutes: Coordinate[][] | undefined;\n    if (relatedRouteKey) {\n        relatedMatrixRoutes = data?.[relatedRouteKey] as Coordinate[][] | undefined;\n    }\n\n    const VividNumber: React.FC<{ data: number }> = ({data}) => {\n        return (\n            <Row>\n                <Col size={6}><Text>{data.toString()}</Text></Col>\n            </Row>\n        );\n    };\n\n    const getPointsByDelta = (src: Coordinate, dest: Coordinate, cutDelta?: number) => {\n        if (cutDelta === undefined) cutDelta = 0;\n        const PI = Math.PI;\n        let angle: number = Math.atan2((dest.y - src.y), (dest.x - src.x));\n        let theta: number = angle * (180 / Math.PI);\n        let newSrc = new Coordinate(src.y, src.x);\n        let newDest = new Coordinate(dest.y, dest.x);\n        if (angle <= 0.5 * PI) {\n            newSrc.x = src.x + Math.cos(angle) * cutDelta;\n            newSrc.y = src.y + Math.sin(angle) * cutDelta;\n            newDest.x = dest.x - Math.cos(angle) * cutDelta;\n            newDest.y = dest.y - Math.sin(angle) * cutDelta;\n        } else if (angle > 0.5 * PI && angle <= PI) {\n            angle = PI - angle;\n            newSrc.x = src.x - Math.cos(angle) * cutDelta;\n            newSrc.y = src.y + Math.sin(angle) * cutDelta;\n            newDest.x = dest.x + Math.cos(angle) * cutDelta;\n            newDest.y = dest.y - Math.sin(angle) * cutDelta;\n        }\n\n        src = newSrc;\n        dest = newDest;\n        return {src, dest};\n    };\n\n    const LineWithArrow = ({\n                               from,\n                               to,\n                               weight,\n                               delta\n                           }: { from: Coordinate, to: Coordinate, weight?: number, delta?: number }) => {\n        if (delta === undefined) delta = 0;\n        const {src, dest} = getPointsByDelta(from, to, delta);\n\n        return <G>\n            <Defs>\n                <Marker\n                    id=\"Triangle\"\n                    viewBox=\"0 0 10 10\"\n                    refX=\"0\"\n                    refY=\"5\"\n                    markerWidth=\"4\"\n                    markerHeight=\"3\"\n                    orient=\"auto\"\n                >\n                    <Path d=\"M 0 0 L 10 5 L 0 10 z\" fill={arrowColor} stroke={arrowColor}/>\n                </Marker>\n            </Defs>\n            <Path\n                d={`M ${src.x} ${src.y} L ${dest.x} ${dest.y}`}\n                fill={arrowColor}\n                stroke={arrowColor}\n                strokeWidth=\"2\"\n                markerEnd=\"url(#Triangle)\"\n            />\n            {\n                weight !== undefined && weight !== null\n                    ? <SVGText\n                        strokeWidth={wp(1)}\n                        fontSize={ms.fs.xs}\n                        fill={colors.text}\n                        fontWeight={100}\n                        stroke={colors.text}\n                        x={src.x + (dest.x - src.x) / 2 + (src.x > dest.x ? wp(10) : wp(-10))}\n                        y={src.y + (dest.y - src.y) / 2 + (src.y > dest.y ? wp(3) : wp(-3))}\n                        textAnchor=\"middle\"\n                    >{weight}</SVGText>\n                    : null\n            }\n\n        </G>;\n    };\n\n    const VividString: React.FC<{ data: string }> = ({data}) => {\n        return (\n            <Row>\n                <Col size={6}><Text>{data}</Text></Col>\n            </Row>\n        );\n    };\n\n\n    const TwoWayScrollSVG: React.FC<{ autoScroll: boolean }> = ({children, autoScroll}) => {\n        const horizontalScrollView = useRef<ScrollView>(null);\n        if (autoScroll) {\n            useEffect(() => {\n                horizontalScrollView?.current?.scrollTo({\n                    x: (treePanelWidth - wp(375)) / 2,\n                    y: 0,\n                    animated: false\n                });\n            }, []);\n        }\n\n\n        return (\n            <ScrollView nestedScrollEnabled style={{height: wp(375)}}>\n                <ScrollView style={{width: wp(375)}}\n                            horizontal ref={horizontalScrollView}>\n                    <Svg\n                        width={treePanelWidth}\n                        height={treePanelHeight}\n                    >\n                        <G fill={colors.background} strokeWidth={strokeWidth} stroke={colors.border}>\n                            {\n                                children\n                            }\n                        </G>\n                    </Svg>\n                </ScrollView>\n            </ScrollView>\n        );\n    };\n\n    const VividTree: React.FC<{ data: TreeNode<any> }> = ({data}) => {\n        return (\n            <TwoWayScrollSVG autoScroll>\n                <VividTreeRecursive node={data} level={1} index={0} familyLength={1} parentX={0} parentY={0}\n                                    maxHeight={data.getHeight()}/>\n            </TwoWayScrollSVG>\n        );\n    };\n\n    const VividBinaryTree: React.FC<{ node: BinaryTreeNode<any> | null, maxHeight?: number }> = ({node, maxHeight}) => {\n        return (\n            <TwoWayScrollSVG autoScroll>\n                {\n                    node\n                        ? <VividBinaryTreeRecursive node={node} level={1} index={0} familyLength={1}\n                                                    maxHeight={maxHeight}/>\n                        : null\n                }\n            </TwoWayScrollSVG>\n        );\n    };\n\n    const VividGraph: React.FC<{ data: AbstractGraph<AbstractVertex, AbstractEdge> }> = ({data}) => {\n        return (\n            <TwoWayScrollSVG autoScroll={false}>\n                {\n                    data\n                        ? <VividGraphDrawer graph={data}/>\n                        : null\n                }\n            </TwoWayScrollSVG>\n        );\n    };\n\n    const matrixPanelWidth = wp(360, false);\n    const matrixRectStrokeWidth = wp(1, false);\n    const arrowCut = 0.3;\n    const arrowColor = colors.accent;\n\n    const VividMatrix: React.FC<{ data: Array<Array<any>> }> = ({data}) => {\n        const rowCount = data?.length;\n        const colCount = data?.[0]?.length;\n        if (colCount < 1) {\n            return null;\n        }\n        const rectSize = (matrixPanelWidth - (colCount + 1) * matrixRectStrokeWidth) / colCount;\n        const matrixHeight = rectSize * rowCount;\n\n        return (\n            <Svg\n                width={matrixPanelWidth}\n                height={matrixHeight}\n            >\n                <G>\n                    {data.map((row, i) => {\n                        return row.map((col, j) => {\n                            const colKey = i + '-' + j.toString();\n                            const isActive = (relatedMatrixCell?.y === i && relatedMatrixCell?.x === j);\n                            return <Rect\n                                key={colKey}\n                                x={j * rectSize}\n                                y={i * rectSize}\n                                width={rectSize}\n                                height={rectSize}\n                                stroke={colors.border}\n                                strokeDasharray={`${rectSize},${rectSize * 2},${rectSize}`}\n                                strokeWidth={matrixRectStrokeWidth}\n                                fill={isActive ? colors.primary : colors.backgroundA}\n                            />;\n                        });\n                    })}\n                    {data.map((row, i) => {\n                        const rowKey = i.toString();\n\n                        return row.map((col, j) => {\n                            const colKey = 'text-' + i + '-' + j.toString();\n                            const isActive = (relatedMatrixCell?.y === i && relatedMatrixCell?.x === j);\n                            return <SVGText\n                                key={colKey}\n                                strokeWidth={wp(1)}\n                                fontSize={ms.fs.m}\n                                fill={isActive ? colors.buttonText : colors.text}\n                                fontWeight={100}\n                                x={(j + 0.5) * rectSize}\n                                y={(i + 0.5) * rectSize}\n                                textAnchor=\"middle\"\n                            >{data[i][j].toString()}</SVGText>;\n                        });\n                    })}\n                    {\n                        relatedMatrixRoutes\n                            ? relatedMatrixRoutes.map((route, routeIndex) => {\n                                return route.map((cell, cellIndex) => {\n                                    const from = cell;\n                                    const to = relatedMatrixRoutes?.[routeIndex]?.[cellIndex + 1];\n                                    const deviationVector = getDirectionVector(from, to);\n                                    if (from && to) {\n                                        const src = new Coordinate((from.y + 0.5 + deviationVector.y * arrowCut) * rectSize, (from.x + 0.5 + deviationVector.x * arrowCut) * rectSize);\n                                        const dest = new Coordinate((to.y + 0.5 - deviationVector.y * arrowCut) * rectSize, (to.x + 0.5 - deviationVector.x * arrowCut) * rectSize);\n\n                                        return <LineWithArrow key={src.y + ',' + src.x + dest.y + dest.x}\n                                                              from={src}\n                                                              to={dest}\n                                        />;\n                                    } else {\n                                        return null;\n                                    }\n\n                                });\n                            })\n                            : null\n                    }\n                </G>\n            </Svg>\n\n        );\n    };\n\n    const treePanelWidth = wp(20000);\n    const treePanelHeight = wp(20000);\n    const strokeWidth = wp(2);\n    const levelOffset = wp(60);\n    const circleR = wp(20);\n    const nodeSpace = wp(40);\n    const fontSize = wp(12);\n    const fontOffsetY = fontSize / 3;\n\n\n    const VividTreeRecursive: React.FC<{ node: TreeNode<any>, level: number, index: number, familyLength: number, parentX?: number, parentY?: number, maxHeight?: number }> = ({\n                                                                                                                                                                                   node,\n                                                                                                                                                                                   level = 1,\n                                                                                                                                                                                   index = 0,\n                                                                                                                                                                                   familyLength = 1,\n                                                                                                                                                                                   parentX,\n                                                                                                                                                                                   parentY,\n                                                                                                                                                                                   maxHeight\n                                                                                                                                                                               }) => {\n        if (!node) {\n            return null;\n        }\n        // const firstRender = useMemo(\n        //     () =>console.log('!!!first Render'),\n        //     []\n        // );\n        let space = 0;\n        let offsetX = 0;\n        let offsetY = 0;\n        let levelNodeSpace = nodeSpace * Math.pow(2, (maxHeight || 5) - level);\n        if (level === 1) {\n            space = treePanelWidth / 2;\n            offsetX = space - circleR;\n            offsetY = (level - 1) * levelOffset + circleR + strokeWidth;\n        } else {\n            offsetX = parentX! - (familyLength / 2) * levelNodeSpace + (index + 0.5) * levelNodeSpace;\n            offsetY = (level - 1) * levelOffset + circleR + strokeWidth;\n        }\n\n        const isActive = node.id === relatedNode?.id;\n        return (\n            <G key={node.id}>\n                {\n                    level > 1\n                        ? <Line x1={parentX} y1={parentY} x2={offsetX} y2={offsetY}/>\n                        : null\n                }\n                {node.children\n                    ? node.children.map((child, index, family) => <VividTreeRecursive key={child.id}\n                                                                                      node={child}\n                                                                                      level={level + 1}\n                                                                                      index={index}\n                                                                                      familyLength={family.length}\n                                                                                      parentX={offsetX}\n                                                                                      parentY={offsetY}\n                                                                                      maxHeight={maxHeight}/>)\n                    : null\n                }\n                <Circle r={circleR} cx={offsetX} cy={offsetY}\n                        fill={isActive ? colors.primary : colors.background}/>\n                <SVGText\n                    strokeWidth={wp(1)}\n                    fill={isActive ? colors.buttonText : colors.text}\n                    stroke={isActive ? colors.buttonText : colors.text}\n                    fontSize={fontSize}\n                    fontWeight={100}\n                    x={offsetX}\n                    y={offsetY + fontOffsetY}\n                    textAnchor=\"middle\"\n                >{node.name || node.id}</SVGText>\n            </G>\n        );\n    };\n\n    const VividBinaryTreeRecursive: React.FC<{ node: BinaryTreeNode<any>, level: number, index: number, familyLength: number, parentX?: number, parentY?: number, maxHeight?: number }> = ({\n                                                                                                                                                                                               node,\n                                                                                                                                                                                               level = 1,\n                                                                                                                                                                                               index = 0,\n                                                                                                                                                                                               familyLength = 1,\n                                                                                                                                                                                               parentX,\n                                                                                                                                                                                               parentY,\n                                                                                                                                                                                               maxHeight\n                                                                                                                                                                                           }) => {\n        if (!node) {\n            return null;\n        }\n        let space = 0;\n        let offsetX;\n        let offsetY;\n        let levelNodeSpace = nodeSpace * Math.pow(2, (maxHeight || 5) - level);\n        if (level === 1) {\n            space = treePanelWidth / 2;\n            offsetX = space - circleR;\n            offsetY = (level - 1) * levelOffset + circleR + strokeWidth;\n        } else {\n            offsetX = parentX! - ((index < 1) ? levelNodeSpace : -levelNodeSpace);\n            offsetY = (level - 1) * levelOffset + circleR + strokeWidth;\n        }\n\n        const isActive = node.id === relatedBinaryNode?.id;\n        return (\n            <G key={node.id}>\n                {\n                    level > 1\n                        ? <Line x1={parentX} y1={parentY} x2={offsetX} y2={offsetY}/>\n                        : null\n                }\n                {\n                    node.left\n                        ?\n                        <VividBinaryTreeRecursive node={node.left} level={level + 1} index={0}\n                                                  familyLength={2} parentX={offsetX} parentY={offsetY}\n                                                  maxHeight={maxHeight}/>\n                        : null\n                }\n                {\n                    node.right\n                        ?\n                        <VividBinaryTreeRecursive node={node.right} level={level + 1} index={1}\n                                                  familyLength={2} parentX={offsetX} parentY={offsetY}\n                                                  maxHeight={maxHeight}/>\n                        : null\n                }\n                <Circle r={circleR} cx={offsetX} cy={offsetY}\n                        fill={isActive ? colors.primary : colors.background}/>\n                <SVGText\n                    fill=\"none\"\n                    stroke={isActive ? colors.buttonText : colors.text}\n                    fontSize={fontSize}\n                    fontWeight={1}\n                    x={offsetX}\n                    y={offsetY + fontOffsetY}\n                    textAnchor=\"middle\"\n                >\n                    <TSpan x={offsetX} y={offsetY + fontOffsetY}>{node.id}</TSpan>\n                    <TSpan x={offsetX} y={offsetY + fontOffsetY + fontSize + wp(2)}>{node.count}</TSpan>\n\n                    <TSpan x={offsetX}\n                           y={offsetY + fontOffsetY + 2 * fontSize + wp(4)}>{node.allLesserSum}</TSpan>\n\n                </SVGText>\n            </G>\n        );\n    };\n\n\n    const VividGraphDrawer: React.FC<{ graph: AbstractGraph<any, any> }> = ({graph}) => {\n        const vertexDistance = wp(80);\n        const vertices = graph.vertexSet();\n        const vertexCount = vertices.size;\n        const edges = graph.edgeSet();\n        let coordsMap: Map<AbstractVertex, Coordinate> = new Map<AbstractVertex, Coordinate>();\n        const rowCount = Math.ceil(Math.sqrt(vertexCount));\n        let i = 0;\n        vertices.forEach((vertex, id) => {\n            const rowIndex = Math.floor(i / rowCount);\n            const colIndex = Math.floor(i % rowCount);\n            const y = (rowIndex) * vertexDistance + circleR;\n            const x = (rowIndex % 2 === 0 ? (colIndex + 1) : colIndex) * vertexDistance + circleR;\n            coordsMap.set(vertex, new Coordinate(y, x));\n            i++;\n        });\n        return (\n            <G>\n                {\n                    [...vertices].map(([id, vertex]) => {\n                        const coordinate = coordsMap.get(vertex);\n                        return (\n                            coordinate\n                                ? <G key={vertex.id}>\n                                    <Circle key={vertex.id} r={circleR}\n                                            cx={coordinate.x}\n                                            cy={coordinate.y}\n                                            fill={colors.primary}/>\n                                    <SVGText key={vertex.id + 'id'}\n                                             fill=\"none\"\n                                             stroke={colors.text}\n                                             fontSize={fontSize}\n                                             fontWeight={1}\n                                             x={coordinate.x}\n                                             y={coordinate.y + fontOffsetY}\n                                             textAnchor=\"middle\"\n                                    >\n                                        <TSpan x={coordinate.x} y={coordinate.y + fontOffsetY}>{vertex.id}</TSpan>\n                                    </SVGText>\n                                </G>\n                                : null\n                        );\n                    })}\n                {\n                    edges.map(edge => {\n                        if (graph instanceof UndirectedGraph) {\n                            const ends = graph.getEndsOfEdge(edge);\n                            if (ends && ends.length > 1) {\n                                const v1Coordinate = coordsMap.get(ends[0]);\n                                const v2Coordinate = coordsMap.get(ends[1]);\n                                if (v1Coordinate && v2Coordinate) {\n                                    const {src, dest} = getPointsByDelta(v1Coordinate, v2Coordinate, circleR);\n                                    return <G key={edge.hashCode}>\n                                        <Line\n                                            x1={src.x} y1={src.y} x2={dest.x}\n                                            y2={dest.y}/>\n                                    </G>;\n                                }\n                            }\n                        } else if (graph instanceof DirectedGraph) {\n                            const src = graph.getEdgeSrc(edge);\n                            const dest = graph.getEdgeDest(edge);\n                            if (src && dest) {\n                                const srcCod = coordsMap.get(src);\n                                const destCod = coordsMap.get(dest);\n                                const edge = graph.getEdge(src, dest);\n                                if (srcCod && destCod) {\n                                    return <LineWithArrow\n                                        key={edge.hashCode}\n                                        from={srcCod} to={destCod}\n                                        weight={edge?.weight}\n                                        delta={circleR}\n                                    />;\n                                }\n                            }\n                        }\n                    })\n                }\n            </G>\n        );\n    };\n\n    const VividArray: React.FC<{ data: any[] }> = ({data}) => {\n        return (\n            <View>\n                {\n                    data[0] instanceof Array\n                        ? <VividMatrix data={data}/>\n                        : data.map(item => {\n                            switch (typeof item) {\n                                case 'number':\n                                    return <View style={styles.arrayItem}\n                                                 key={uuidV4()}><Text>{item}</Text></View>;\n                                case 'string':\n                                    return <View style={styles.arrayItem}\n                                                 key={uuidV4()}><Text>{item}</Text></View>;\n                                default:\n                                    return <View style={styles.arrayItem}\n                                                 key={uuidV4()}><Text>{JSON.stringify(item)}</Text></View>;\n                            }\n                        })\n\n                }\n            </View>\n        );\n    };\n\n    const VividObject: React.FC<{ data: { [key in string]: any } }> = ({data}) => {\n        return (\n            <Row>\n                {\n                    Object.keys(data).map(key => {\n                        return <View style={styles.arrayItem} key={key}>\n                            <Text>{key}</Text>\n                            <Text>{data[key]}</Text>\n                        </View>;\n                    })\n                }\n            </Row>\n        );\n    };\n\n    const VividLinkedListNode: React.FC<{ data: SinglyLinkedListNode }> = ({data}) => {\n        return (\n            <Row>\n                <View style={styles.arrayItem} key={data.index}>\n                    <Text>{data.index}</Text>\n                    <Text>{data.value}</Text>\n                </View>\n            </Row>\n        );\n    };\n\n    // TODO\n    const VividBinaryTreeNode: React.FC<{ data: BinaryTreeNode<any> }> = ({data}) => {\n        return (\n            <Row>\n                <View style={styles.arrayItem} key={data.id}>\n                    <Text>{data.id}</Text>\n                </View>\n            </Row>\n        );\n    };\n\n    const VividBinarySearchTreeNode: React.FC<{ data: BinaryTreeNode<any> }> = ({data}) => {\n        return (\n            <Row>\n                <View style={styles.arrayItem} key={data.id}>\n                    <Text>{data.id}</Text>\n                </View>\n            </Row>\n        );\n    };\n\n    const renderVariable = (item: any) => {\n        if (!item) return null;\n        switch (typeof item) {\n            case 'number':\n                return <VividNumber data={item}/>;\n            case 'string':\n                return <VividString data={item}/>;\n            case 'object':\n                if (item instanceof TreeNode) {\n                    return <VividTree data={item}/>;\n                } else if (item instanceof AbstractGraph) {\n                    return <VividGraph data={item}/>;\n                } else if (item instanceof BinaryTreeNode) {\n                    return <VividBinaryTreeNode data={item}/>;\n                } else if (item instanceof BinaryTree) {\n                    return <VividBinaryTree node={item.root} maxHeight={item.getHeight()}/>;\n                } else if (item instanceof SinglyLinkedListNode) {\n                    return <VividLinkedListNode data={item}/>;\n                } else if (item instanceof Map) {\n                    return <VividArray data={Array.from(item)}/>;\n                } else if (item instanceof Stack) {\n                    return <VividArray data={item.toArray()}/>;\n                } else if (item instanceof Array) {\n                    return <VividArray data={item}/>;\n                } else {\n                    return <VividObject data={item}/>;\n                }\n        }\n    };\n\n    return <View>\n        {\n            referenceData\n                ? renderVariable(referenceData)\n                : null\n        }\n        {\n            data\n                ? Object.keys(data).map(datumKey => {\n                    const item = data[datumKey];\n                    return (datumKey !== relatedRouteKey && datumKey !== relatedNodeKey)\n                        ?\n                        <Card title={datumKey} key={datumKey}>\n                            {\n                                renderVariable(item)\n                            }\n                        </Card>\n                        : null;\n\n                })\n                : null\n        }\n    </View>;\n};\n"]},"metadata":{},"sourceType":"module"}