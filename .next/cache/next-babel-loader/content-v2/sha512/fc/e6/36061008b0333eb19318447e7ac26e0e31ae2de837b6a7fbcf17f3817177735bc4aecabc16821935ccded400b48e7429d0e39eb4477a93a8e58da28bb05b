{"ast":null,"code":"\"use strict\";exports.__esModule=true;exports.addMessageListener=addMessageListener;exports.getEventSourceWrapper=getEventSourceWrapper;var eventCallbacks=[];function EventSourceWrapper(options){var source;var lastActivity=new Date();var listeners=[];if(!options.timeout){options.timeout=20*1000;}init();var timer=setInterval(function(){if(new Date()-lastActivity>options.timeout){handleDisconnect();}},options.timeout/2);function init(){source=new window.EventSource(options.path);source.onopen=handleOnline;source.onerror=handleDisconnect;source.onmessage=handleMessage;}function handleOnline(){if(options.log)console.log('[HMR] connected');lastActivity=new Date();}function handleMessage(event){lastActivity=new Date();for(var i=0;i<listeners.length;i++){listeners[i](event);}eventCallbacks.forEach(function(cb){if(!cb.unfiltered&&event.data.indexOf('action')===-1)return;cb(event);});}function handleDisconnect(){clearInterval(timer);source.close();setTimeout(init,options.timeout);}return{close:function close(){clearInterval(timer);source.close();},addMessageListener:function addMessageListener(fn){listeners.push(fn);}};}_c=EventSourceWrapper;function addMessageListener(cb){eventCallbacks.push(cb);}function getEventSourceWrapper(options){return EventSourceWrapper(options);}var _c;$RefreshReg$(_c,\"EventSourceWrapper\");","map":{"version":3,"sources":["../../../../client/dev/error-overlay/eventsource.js"],"names":["eventCallbacks","lastActivity","listeners","options","init","timer","setInterval","handleDisconnect","source","window","console","i","cb","event","clearInterval","setTimeout","close","addMessageListener","EventSourceWrapper"],"mappings":"uIAAA,GAAMA,CAAAA,cAAc,CAApB,EAAA,CAEA,QAAA,CAAA,kBAAA,CAAA,OAAA,CAAqC,CACnC,GAAA,CAAA,MAAA,CACA,GAAIC,CAAAA,YAAY,CAAG,GAAnB,CAAA,IAAmB,EAAnB,CACA,GAAIC,CAAAA,SAAS,CAAb,EAAA,CAEA,GAAI,CAACC,OAAO,CAAZ,OAAA,CAAsB,CACpBA,OAAO,CAAPA,OAAAA,CAAkB,GAAlBA,IAAAA,CAGFC,CAAAA,IAAI,GACJ,GAAIC,CAAAA,KAAK,CAAGC,WAAW,CAAC,UAAY,CAClC,GAAI,GAAA,CAAA,IAAA,GAAA,YAAA,CAA4BH,OAAO,CAAvC,OAAA,CAAiD,CAC/CI,gBAAgB,GAEnB,CAJsB,CAAA,CAIpBJ,OAAO,CAAPA,OAAAA,CAJH,CAAuB,CAAvB,CAMA,QAAA,CAAA,IAAA,EAAgB,CACdK,MAAM,CAAG,GAAIC,CAAAA,MAAM,CAAV,WAAA,CAAuBN,OAAO,CAAvCK,IAAS,CAATA,CACAA,MAAM,CAANA,MAAAA,CAAAA,YAAAA,CACAA,MAAM,CAANA,OAAAA,CAAAA,gBAAAA,CACAA,MAAM,CAANA,SAAAA,CAAAA,aAAAA,CAGF,SAAA,CAAA,YAAA,EAAwB,CACtB,GAAIL,OAAO,CAAX,GAAA,CAAiBO,OAAO,CAAPA,GAAAA,CAAAA,iBAAAA,EACjBT,YAAY,CAAG,GAAfA,CAAAA,IAAe,EAAfA,CAGF,SAAA,CAAA,aAAA,CAAA,KAAA,CAA8B,CAC5BA,YAAY,CAAG,GAAfA,CAAAA,IAAe,EAAfA,CACA,IAAK,GAAIU,CAAAA,CAAC,CAAV,CAAA,CAAgBA,CAAC,CAAGT,SAAS,CAA7B,MAAA,CAAsCS,CAAtC,EAAA,CAA2C,CACzCT,SAAS,CAATA,CAAS,CAATA,CAAAA,KAAAA,EAGFF,CAAAA,cAAc,CAAdA,OAAAA,CAAwBY,SAAAA,EAAD,CAAQ,CAC7B,GAAI,CAACA,EAAE,CAAH,UAAA,EAAkBC,KAAK,CAALA,IAAAA,CAAAA,OAAAA,CAAAA,QAAAA,IAAiC,CAAvD,CAAA,CAA2D,OAC3DD,EAAE,CAAFA,KAAE,CAAFA,CAFFZ,CAAAA,EAMF,SAAA,CAAA,gBAAA,EAA4B,CAC1Bc,aAAa,CAAbA,KAAa,CAAbA,CACAN,MAAM,CAANA,KAAAA,GACAO,UAAU,CAAA,IAAA,CAAOZ,OAAO,CAAxBY,OAAU,CAAVA,CAGF,OAAO,CACLC,KAAK,CAAE,gBAAM,CACXF,aAAa,CAAbA,KAAa,CAAbA,CACAN,MAAM,CAANA,KAAAA,GAHG,CAAA,CAKLS,kBAAkB,CAAE,4BAAA,EAAA,CAAc,CAChCf,SAAS,CAATA,IAAAA,CAAAA,EAAAA,EANJ,CAAO,CAAP,CAWK,C,GAzDP,kB,CAyDO,QAAA,CAAA,kBAAA,CAAA,EAAA,CAAgC,CACrCF,cAAc,CAAdA,IAAAA,CAAAA,EAAAA,EAGK,SAAA,CAAA,qBAAA,CAAA,OAAA,CAAwC,CAC7C,MAAOkB,CAAAA,kBAAkB,CAAzB,OAAyB,CAAzB,CACD,C","sourcesContent":["const eventCallbacks = []\n\nfunction EventSourceWrapper(options) {\n  var source\n  var lastActivity = new Date()\n  var listeners = []\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000\n  }\n\n  init()\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect()\n    }\n  }, options.timeout / 2)\n\n  function init() {\n    source = new window.EventSource(options.path)\n    source.onopen = handleOnline\n    source.onerror = handleDisconnect\n    source.onmessage = handleMessage\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected')\n    lastActivity = new Date()\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date()\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event)\n    }\n\n    eventCallbacks.forEach((cb) => {\n      if (!cb.unfiltered && event.data.indexOf('action') === -1) return\n      cb(event)\n    })\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer)\n    source.close()\n    setTimeout(init, options.timeout)\n  }\n\n  return {\n    close: () => {\n      clearInterval(timer)\n      source.close()\n    },\n    addMessageListener: function (fn) {\n      listeners.push(fn)\n    },\n  }\n}\n\nexport function addMessageListener(cb) {\n  eventCallbacks.push(cb)\n}\n\nexport function getEventSourceWrapper(options) {\n  return EventSourceWrapper(options)\n}\n"]},"metadata":{},"sourceType":"script"}