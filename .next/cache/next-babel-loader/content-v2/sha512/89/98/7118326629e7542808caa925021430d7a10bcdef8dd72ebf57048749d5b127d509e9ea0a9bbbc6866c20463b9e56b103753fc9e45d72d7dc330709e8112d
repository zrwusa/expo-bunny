{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _createClass from\"@babel/runtime/helpers/createClass\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import{arrayRemove}from\"../../utils\";import{AbstractEdge,AbstractGraph,AbstractVertex}from\"./abstract-graph\";export var UndirectedVertex=function(_AbstractVertex){_inherits(UndirectedVertex,_AbstractVertex);var _super=_createSuper(UndirectedVertex);function UndirectedVertex(id){_classCallCheck(this,UndirectedVertex);return _super.call(this,id);}return UndirectedVertex;}(AbstractVertex);export var UndirectedEdge=function(_AbstractEdge){_inherits(UndirectedEdge,_AbstractEdge);var _super2=_createSuper(UndirectedEdge);function UndirectedEdge(v1,v2,weight){var _this;_classCallCheck(this,UndirectedEdge);_this=_super2.call(this,weight);_this._vertices=[v1,v2];return _this;}_createClass(UndirectedEdge,[{key:\"vertices\",get:function get(){return this._vertices;},set:function set(v){this._vertices=v;}}]);return UndirectedEdge;}(AbstractEdge);export var UndirectedGraph=function(_AbstractGraph){_inherits(UndirectedGraph,_AbstractGraph);var _super3=_createSuper(UndirectedGraph);function UndirectedGraph(){var _this2;_classCallCheck(this,UndirectedGraph);_this2=_super3.call(this);_this2._edges=new Map();return _this2;}_createClass(UndirectedGraph,[{key:\"getEdge\",value:function getEdge(v1,v2){var edges=[];if(v1!==null&&v2!==null){var vertex1=this.getVertex(v1);var vertex2=this.getVertex(v2);if(vertex1&&vertex2){var _this$_edges$get;edges=(_this$_edges$get=this._edges.get(vertex1))==null?void 0:_this$_edges$get.filter(function(e){return e.vertices.includes(vertex2.id);});}}return edges?edges[0]||null:null;}},{key:\"addEdge\",value:function addEdge(edge){for(var _iterator=_createForOfIteratorHelperLoose(edge.vertices),_step;!(_step=_iterator()).done;){var end=_step.value;var endVertex=this.getVertex(end);if(endVertex===null)return false;if(endVertex){var edges=this._edges.get(endVertex);if(edges){edges.push(edge);}else{this._edges.set(endVertex,[edge]);}}}return true;}},{key:\"removeEdgeBetween\",value:function removeEdgeBetween(v1,v2){var vertex1=this.getVertex(v1);var vertex2=this.getVertex(v2);if(!vertex1||!vertex2){return null;}var v1Edges=this._edges.get(vertex1);var removed=null;if(v1Edges){removed=arrayRemove(v1Edges,function(e){return e.vertices.includes(vertex2.id);})[0]||null;}var v2Edges=this._edges.get(vertex2);if(v2Edges){arrayRemove(v2Edges,function(e){return e.vertices.includes(vertex1.id);});}return removed;}},{key:\"removeEdge\",value:function removeEdge(edge){return this.removeEdgeBetween(edge.vertices[0],edge.vertices[1]);}},{key:\"degreeOf\",value:function degreeOf(vertexOrId){var vertex=this.getVertex(vertexOrId);if(vertex){var _this$_edges$get2;return((_this$_edges$get2=this._edges.get(vertex))==null?void 0:_this$_edges$get2.length)||0;}else{return 0;}}},{key:\"edgesOf\",value:function edgesOf(vertexOrId){var vertex=this.getVertex(vertexOrId);if(vertex){return this._edges.get(vertex)||[];}else{return[];}}},{key:\"edgeSet\",value:function edgeSet(){var edgeSet=new Set();this._edges.forEach(function(edges){edges.forEach(function(edge){edgeSet.add(edge);});});return _toConsumableArray(edgeSet);}},{key:\"getEdgesOf\",value:function getEdgesOf(vertexOrId){var vertex=this.getVertex(vertexOrId);if(!vertex){return[];}return this._edges.get(vertex)||[];}},{key:\"getNeighbors\",value:function getNeighbors(vertexOrId){var neighbors=[];var vertex=this.getVertex(vertexOrId);if(vertex){var neighborEdges=this.getEdgesOf(vertex);for(var _iterator2=_createForOfIteratorHelperLoose(neighborEdges),_step2;!(_step2=_iterator2()).done;){var edge=_step2.value;var neighbor=this.getVertex(edge.vertices.filter(function(e){return e!==vertex.id;})[0]);neighbors.push(neighbor);}}return neighbors;}},{key:\"getEndsOfEdge\",value:function getEndsOfEdge(edge){if(!this.containsEdge(edge.vertices[0],edge.vertices[1])){return null;}var v1=this.getVertex(edge.vertices[0]);var v2=this.getVertex(edge.vertices[1]);if(v1&&v2){return[v1,v2];}else{return null;}}}]);return UndirectedGraph;}(AbstractGraph);","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/utils/data-structures/graph/undirectd-graph.ts"],"names":["UndirectedVertex","UndirectedEdge","UndirectedGraph","edges","v1","v2","vertex1","vertex2","e","end","edge","endVertex","v1Edges","removed","v2Edges","arrayRemove","vertex","edgeSet","neighbors","neighborEdges","neighbor"],"mappings":"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","sourcesContent":["import {arrayRemove} from '../../utils';\nimport {AbstractEdge, AbstractGraph, AbstractVertex, VertexId} from './abstract-graph';\n\nexport class UndirectedVertex extends AbstractVertex {\n    constructor(id: VertexId) {\n        super(id);\n    }\n}\n\nexport class UndirectedEdge extends AbstractEdge {\n    private _vertices: [VertexId, VertexId];\n\n    public get vertices() {\n        return this._vertices;\n    }\n\n    public set vertices(v: [VertexId, VertexId]) {\n        this._vertices = v;\n    }\n\n    constructor(v1: VertexId, v2: VertexId, weight?: number) {\n        super(weight);\n        this._vertices = [v1, v2];\n    }\n}\n\nexport class UndirectedGraph<V extends UndirectedVertex, E extends UndirectedEdge> extends AbstractGraph<V, E> {\n    constructor() {\n        super();\n    }\n\n    protected _edges: Map<V, E[]> = new Map();\n\n    getEdge(v1: V | null | VertexId, v2: V | null | VertexId): E | null {\n        let edges: E[] | undefined = [];\n\n        if (v1 !== null && v2 !== null) {\n            const vertex1: V | null = this.getVertex(v1);\n            const vertex2: V | null = this.getVertex(v2);\n\n            if (vertex1 && vertex2) {\n                edges = this._edges.get(vertex1)?.filter(e => e.vertices.includes(vertex2.id));\n            }\n        }\n\n        return edges ? edges[0] || null : null;\n    }\n\n    addEdge(edge: E): boolean {\n        for (let end of edge.vertices) {\n            const endVertex = this.getVertex(end);\n            if (endVertex === null) return false;\n            if (endVertex) {\n                const edges = this._edges.get(endVertex);\n                if (edges) {\n                    edges.push(edge);\n                } else {\n                    this._edges.set(endVertex, [edge]);\n                }\n            }\n        }\n        return true;\n    }\n\n    removeEdgeBetween(v1: V | VertexId, v2: V | VertexId): E | null {\n\n        const vertex1: V | null = this.getVertex(v1);\n        const vertex2: V | null = this.getVertex(v2);\n\n        if (!vertex1 || !vertex2) {\n            return null;\n        }\n\n        const v1Edges = this._edges.get(vertex1);\n        let removed: E | null = null;\n        if (v1Edges) {\n            removed = arrayRemove<E>(v1Edges, e => e.vertices.includes(vertex2.id))[0] || null;\n        }\n        const v2Edges = this._edges.get(vertex2);\n        if (v2Edges) {\n            arrayRemove<E>(v2Edges, e => e.vertices.includes(vertex1.id));\n        }\n        return removed;\n    }\n\n\n    removeEdge(edge: E): E | null {\n        return this.removeEdgeBetween(edge.vertices[0], edge.vertices[1]);\n    }\n\n    degreeOf(vertexOrId: VertexId | V): number {\n        const vertex = this.getVertex(vertexOrId);\n        if (vertex) {\n            return this._edges.get(vertex)?.length || 0;\n        } else {\n            return 0;\n        }\n    }\n\n    edgesOf(vertexOrId: VertexId | V): E[] {\n        const vertex = this.getVertex(vertexOrId);\n        if (vertex) {\n            return this._edges.get(vertex) || [];\n        } else {\n            return [];\n        }\n    }\n\n    edgeSet(): E[] {\n        const edgeSet: Set<E> = new Set();\n        this._edges.forEach(edges => {\n            edges.forEach(edge => {\n                edgeSet.add(edge);\n            });\n        });\n        return [...edgeSet];\n    }\n\n    getEdgesOf(vertexOrId: V | VertexId): E[] {\n        const vertex = this.getVertex(vertexOrId);\n        if (!vertex) {\n            return [];\n        }\n        return this._edges.get(vertex) || [];\n    }\n\n    getNeighbors(vertexOrId: V | VertexId): V[] {\n        const neighbors: V[] = [];\n        const vertex = this.getVertex(vertexOrId);\n        if (vertex) {\n            const neighborEdges = this.getEdgesOf(vertex);\n            for (let edge of neighborEdges) {\n                const neighbor = this.getVertex(edge.vertices.filter(e => e !== vertex.id)[0])!;\n                neighbors.push(neighbor);\n            }\n        }\n        return neighbors;\n    }\n\n    getEndsOfEdge(edge: E): [V, V] | null {\n        if (!this.containsEdge(edge.vertices[0], edge.vertices[1])) {\n            return null;\n        }\n        const v1 = this.getVertex(edge.vertices[0]);\n        const v2 = this.getVertex(edge.vertices[1]);\n        if (v1 && v2) {\n            return [v1, v2];\n        } else {\n            return null;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}