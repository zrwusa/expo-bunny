{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{EventEmitter,Platform}from'@unimodules/core';import{PermissionStatus}from'unimodules-permissions-interface';import{_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS}from\"../AV\";import ExponentAV from\"../ExponentAV\";import{isAudioEnabled,throwIfAudioIsDisabled}from\"./AudioAvailability\";import{Sound}from\"./Sound\";export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT=0;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP=1;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4=2;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB=3;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB=4;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF=5;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS=6;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP=7;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS=8;export var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM=9;export var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT=0;export var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB=1;export var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB=2;export var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC=3;export var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC=4;export var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD=5;export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM='lpcm';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3='ac-3';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3='cac3';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4='ima4';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC='aac ';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP='celp';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC='hvxc';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ='twvq';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3='MAC3';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6='MAC6';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW='ulaw';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW='alaw';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN='QDMC';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2='QDM2';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM='Qclp';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1='.mp1';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2='.mp2';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3='.mp3';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS='alac';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE='aach';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD='aacl';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD='aace';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR='aacf';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2='aacg';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2='aacp';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL='aacs';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR='samr';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB='sawb';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE='AUDB';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC='ilbc';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA=0x6d730011;export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM=0x6d730031;export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3='aes3';export var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3='ec-3';export var RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN=0;export var RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW=0x20;export var RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM=0x40;export var RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH=0x60;export var RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX=0x7f;export var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT=0;export var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE=1;export var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED=2;export var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE=3;var getWebMediaRecorderSupportedMime=function getWebMediaRecorderSupportedMime(isHighQuality){if(Platform.OS!=='web'){return;}if(!window.MediaRecorder){return;}var mimes=[{highQuality:{mimeType:'audio/mp4;codecs=\"mp4a.40.5\"',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.m4a'},lowQuality:{mimeType:'audio/mp4;codecs=\"mp4a.40.5\"',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.m4a'}},{highQuality:{mimeType:'audio/mp4;codecs=\"mp4a.40.2\"',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.m4a'},lowQuality:{mimeType:'audio/mp4;codecs=\"mp4a.40.2\"',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.m4a'}},{highQuality:{mimeType:'audio/mpeg',audioBitsPerSecond:128000,bitsPerSecond:128000,extension:'.mp3'},lowQuality:{mimeType:'audio/mpeg',audioBitsPerSecond:128000,bitsPerSecond:128000,extension:'.mp3'}},{highQuality:{mimeType:'audio/webm;codecs=\"opus\"',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.webm'},lowQuality:{mimeType:'audio/webm;codecs=\"opus\"',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.webm'}},{highQuality:{mimeType:'audio/webm;codecs=\"vp8\"',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.webm'},lowQuality:{mimeType:'audio/webm;codecs=\"vp8\"',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.webm'}},{highQuality:{mimeType:'audio/webm',audioBitsPerSecond:1000,bitsPerSecond:1000,extension:'.webm'},lowQuality:{mimeType:'audio/webm',audioBitsPerSecond:64000,bitsPerSecond:64000,extension:'.webm'}}];for(var index=0;index<mimes.length;index++){var mime=mimes[index];var quality=isHighQuality?'highQuality':'lowQuality';var curMime=mime[quality];if(curMime){if(window.MediaRecorder.isTypeSupported(curMime.mimeType)){return curMime;}}}};export var RECORDING_OPTIONS_PRESET_HIGH_QUALITY={isMeteringEnabled:true,android:{extension:'.m4a',outputFormat:RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,audioEncoder:RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,sampleRate:44100,numberOfChannels:2,bitRate:128000},ios:{extension:'.wav',audioQuality:RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,sampleRate:44100,numberOfChannels:2,bitRate:128000,linearPCMBitDepth:16,linearPCMIsBigEndian:false,linearPCMIsFloat:false},web:getWebMediaRecorderSupportedMime(true)};export var RECORDING_OPTIONS_PRESET_LOW_QUALITY={isMeteringEnabled:true,android:{extension:'.3gp',outputFormat:RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,audioEncoder:RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,sampleRate:44100,numberOfChannels:2,bitRate:128000},ios:{extension:'.wav',audioQuality:RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,sampleRate:44100,numberOfChannels:2,bitRate:128000,linearPCMBitDepth:16,linearPCMIsBigEndian:false,linearPCMIsFloat:false},web:getWebMediaRecorderSupportedMime(false)};export{PermissionStatus};var _recorderExists=false;var eventEmitter=Platform.OS==='android'?new EventEmitter(ExponentAV):null;export function getPermissionsAsync(){return _regeneratorRuntime.async(function getPermissionsAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",ExponentAV.getPermissionsAsync());case 1:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function requestPermissionsAsync(){return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",ExponentAV.requestPermissionsAsync());case 1:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export var Recording=function(){function Recording(){var _this=this;_classCallCheck(this,Recording);this._subscription=null;this._canRecord=false;this._isDoneRecording=false;this._finalDurationMillis=0;this._uri=null;this._onRecordingStatusUpdate=null;this._progressUpdateTimeoutVariable=null;this._progressUpdateIntervalMillis=_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;this._options=null;this._cleanupForUnloadedRecorder=function _callee(finalStatus){var _finalStatus$duration;return _regeneratorRuntime.async(function _callee$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_this._canRecord=false;_this._isDoneRecording=true;_this._finalDurationMillis=(_finalStatus$duration=finalStatus==null?void 0:finalStatus.durationMillis)!=null?_finalStatus$duration:0;_recorderExists=false;if(_this._subscription){_this._subscription.remove();_this._subscription=null;}_this._disablePolling();_context3.next=8;return _regeneratorRuntime.awrap(_this.getStatusAsync());case 8:return _context3.abrupt(\"return\",_context3.sent);case 9:case\"end\":return _context3.stop();}}},null,null,null,Promise);};this._pollingLoop=function _callee2(){return _regeneratorRuntime.async(function _callee2$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(isAudioEnabled()&&_this._canRecord&&_this._onRecordingStatusUpdate!=null)){_context4.next=10;break;}_this._progressUpdateTimeoutVariable=setTimeout(_this._pollingLoop,_this._progressUpdateIntervalMillis);_context4.prev=2;_context4.next=5;return _regeneratorRuntime.awrap(_this.getStatusAsync());case 5:_context4.next=10;break;case 7:_context4.prev=7;_context4.t0=_context4[\"catch\"](2);_this._disablePolling();case 10:case\"end\":return _context4.stop();}}},null,null,[[2,7]],Promise);};this.getStatusAsync=function _callee3(){var status;return _regeneratorRuntime.async(function _callee3$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!_this._canRecord){_context5.next=2;break;}return _context5.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(){return ExponentAV.getAudioRecordingStatus();}));case 2:status={canRecord:false,isRecording:false,isDoneRecording:_this._isDoneRecording,durationMillis:_this._finalDurationMillis};_this._callOnRecordingStatusUpdateForNewStatus(status);return _context5.abrupt(\"return\",status);case 5:case\"end\":return _context5.stop();}}},null,null,null,Promise);};}_createClass(Recording,[{key:\"_disablePolling\",value:function _disablePolling(){if(this._progressUpdateTimeoutVariable!=null){clearTimeout(this._progressUpdateTimeoutVariable);this._progressUpdateTimeoutVariable=null;}}},{key:\"_enablePollingIfNecessaryAndPossible\",value:function _enablePollingIfNecessaryAndPossible(){if(isAudioEnabled()&&this._canRecord&&this._onRecordingStatusUpdate!=null){this._disablePolling();this._pollingLoop();}}},{key:\"_callOnRecordingStatusUpdateForNewStatus\",value:function _callOnRecordingStatusUpdateForNewStatus(status){if(this._onRecordingStatusUpdate!=null){this._onRecordingStatusUpdate(status);}}},{key:\"_performOperationAndHandleStatusAsync\",value:function _performOperationAndHandleStatusAsync(operation){var _status;return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:throwIfAudioIsDisabled();if(!this._canRecord){_context6.next=9;break;}_context6.next=4;return _regeneratorRuntime.awrap(operation());case 4:_status=_context6.sent;this._callOnRecordingStatusUpdateForNewStatus(_status);return _context6.abrupt(\"return\",_status);case 9:throw new Error('Cannot complete operation because this recorder is not ready to record.');case 10:case\"end\":return _context6.stop();}}},null,this,null,Promise);}},{key:\"setOnRecordingStatusUpdate\",value:function setOnRecordingStatusUpdate(onRecordingStatusUpdate){this._onRecordingStatusUpdate=onRecordingStatusUpdate;if(onRecordingStatusUpdate==null){this._disablePolling();}else{this._enablePollingIfNecessaryAndPossible();}this.getStatusAsync();}},{key:\"setProgressUpdateInterval\",value:function setProgressUpdateInterval(progressUpdateIntervalMillis){this._progressUpdateIntervalMillis=progressUpdateIntervalMillis;this.getStatusAsync();}},{key:\"prepareToRecordAsync\",value:function prepareToRecordAsync(){var options,extensionRegex,_await$ExponentAV$pre,uri,_status2,currentStatus,_args7=arguments;return _regeneratorRuntime.async(function prepareToRecordAsync$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:options=_args7.length>0&&_args7[0]!==undefined?_args7[0]:RECORDING_OPTIONS_PRESET_LOW_QUALITY;throwIfAudioIsDisabled();if(!_recorderExists){_context7.next=4;break;}throw new Error('Only one Recording object can be prepared at a given time.');case 4:if(!this._isDoneRecording){_context7.next=6;break;}throw new Error('This Recording object is done recording; you must make a new one.');case 6:if(!(!options||!options.android||!options.ios)){_context7.next=8;break;}throw new Error('You must provide recording options for android and ios in order to prepare to record.');case 8:extensionRegex=/^\\.\\w+$/;if(!(!options.android.extension||!options.ios.extension||!extensionRegex.test(options.android.extension)||!extensionRegex.test(options.ios.extension))){_context7.next=11;break;}throw new Error(\"Your file extensions must match \"+extensionRegex.toString()+\".\");case 11:if(this._canRecord){_context7.next=28;break;}if(eventEmitter){this._subscription=eventEmitter.addListener('Expo.Recording.recorderUnloaded',this._cleanupForUnloadedRecorder);}_context7.next=15;return _regeneratorRuntime.awrap(ExponentAV.prepareAudioRecorder(options));case 15:_await$ExponentAV$pre=_context7.sent;uri=_await$ExponentAV$pre.uri;_status2=_await$ExponentAV$pre.status;_recorderExists=true;this._uri=uri;this._options=options;this._canRecord=true;currentStatus=_objectSpread(_objectSpread({},_status2),{},{canRecord:true});this._callOnRecordingStatusUpdateForNewStatus(currentStatus);this._enablePollingIfNecessaryAndPossible();return _context7.abrupt(\"return\",currentStatus);case 28:throw new Error('This Recording object is already prepared to record.');case 29:case\"end\":return _context7.stop();}}},null,this,null,Promise);}},{key:\"startAsync\",value:function startAsync(){return _regeneratorRuntime.async(function startAsync$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:return _context8.abrupt(\"return\",this._performOperationAndHandleStatusAsync(function(){return ExponentAV.startAudioRecording();}));case 1:case\"end\":return _context8.stop();}}},null,this,null,Promise);}},{key:\"pauseAsync\",value:function pauseAsync(){return _regeneratorRuntime.async(function pauseAsync$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:return _context9.abrupt(\"return\",this._performOperationAndHandleStatusAsync(function(){return ExponentAV.pauseAudioRecording();}));case 1:case\"end\":return _context9.stop();}}},null,this,null,Promise);}},{key:\"stopAndUnloadAsync\",value:function stopAndUnloadAsync(){var stopResult,stopError,_ref,uri,_status3,status;return _regeneratorRuntime.async(function stopAndUnloadAsync$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:if(this._canRecord){_context10.next=6;break;}if(!this._isDoneRecording){_context10.next=5;break;}throw new Error('Cannot unload a Recording that has already been unloaded.');case 5:throw new Error('Cannot unload a Recording that has not been prepared.');case 6:_context10.prev=6;_context10.next=9;return _regeneratorRuntime.awrap(ExponentAV.stopAudioRecording());case 9:stopResult=_context10.sent;_context10.next=15;break;case 12:_context10.prev=12;_context10.t0=_context10[\"catch\"](6);stopError=_context10.t0;case 15:if(Platform.OS==='web'){_ref=stopResult,uri=_ref.uri,_status3=_ref.status;this._uri=uri;stopResult=_status3;}_context10.next=18;return _regeneratorRuntime.awrap(ExponentAV.unloadAudioRecorder());case 18:_context10.next=20;return _regeneratorRuntime.awrap(this._cleanupForUnloadedRecorder(stopResult));case 20:status=_context10.sent;return _context10.abrupt(\"return\",stopError?Promise.reject(stopError):status);case 22:case\"end\":return _context10.stop();}}},null,this,[[6,12]],Promise);}},{key:\"getURI\",value:function getURI(){return this._uri;}},{key:\"createNewLoadedSound\",value:function createNewLoadedSound(){var initialStatus,onPlaybackStatusUpdate,_args11=arguments;return _regeneratorRuntime.async(function createNewLoadedSound$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:initialStatus=_args11.length>0&&_args11[0]!==undefined?_args11[0]:{};onPlaybackStatusUpdate=_args11.length>1&&_args11[1]!==undefined?_args11[1]:null;console.warn(\"createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name\");return _context11.abrupt(\"return\",this.createNewLoadedSoundAsync(initialStatus,onPlaybackStatusUpdate));case 4:case\"end\":return _context11.stop();}}},null,this,null,Promise);}},{key:\"createNewLoadedSoundAsync\",value:function createNewLoadedSoundAsync(){var initialStatus,onPlaybackStatusUpdate,_args12=arguments;return _regeneratorRuntime.async(function createNewLoadedSoundAsync$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:initialStatus=_args12.length>0&&_args12[0]!==undefined?_args12[0]:{};onPlaybackStatusUpdate=_args12.length>1&&_args12[1]!==undefined?_args12[1]:null;if(!(this._uri==null||!this._isDoneRecording)){_context12.next=4;break;}throw new Error('Cannot create sound when the Recording has not finished!');case 4:return _context12.abrupt(\"return\",Sound.createAsync({uri:this._uri},initialStatus,onPlaybackStatusUpdate,false));case 5:case\"end\":return _context12.stop();}}},null,this,null,Promise);}}]);return Recording;}();Recording.createAsync=function _callee4(){var options,onRecordingStatusUpdate,progressUpdateIntervalMillis,recording,_status4,_args13=arguments;return _regeneratorRuntime.async(function _callee4$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:options=_args13.length>0&&_args13[0]!==undefined?_args13[0]:RECORDING_OPTIONS_PRESET_LOW_QUALITY;onRecordingStatusUpdate=_args13.length>1&&_args13[1]!==undefined?_args13[1]:null;progressUpdateIntervalMillis=_args13.length>2&&_args13[2]!==undefined?_args13[2]:null;recording=new Recording();if(progressUpdateIntervalMillis){recording._progressUpdateIntervalMillis=progressUpdateIntervalMillis;}recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);_context13.next=8;return _regeneratorRuntime.awrap(recording.prepareToRecordAsync(_objectSpread(_objectSpread({},options),{},{keepAudioActiveHint:true})));case 8:_context13.prev=8;_context13.next=11;return _regeneratorRuntime.awrap(recording.startAsync());case 11:_status4=_context13.sent;return _context13.abrupt(\"return\",{recording:recording,status:_status4});case 15:_context13.prev=15;_context13.t0=_context13[\"catch\"](8);recording.stopAndUnloadAsync();throw _context13.t0;case 19:case\"end\":return _context13.stop();}}},null,null,[[8,15]],Promise);};","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/packages/expo-av/src/Audio/Recording.ts"],"names":["RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS","RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM","RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT","RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB","RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB","RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC","RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC","RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD","RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM","RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3","RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3","RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6","RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW","RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW","RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN","RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2","RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3","RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL","RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR","RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB","RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE","RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC","RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA","RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM","RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3","RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3","RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN","RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW","RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM","RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH","RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX","RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT","RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE","RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED","RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE","getWebMediaRecorderSupportedMime","Platform","window","mimes","highQuality","mimeType","audioBitsPerSecond","bitsPerSecond","extension","lowQuality","index","mime","quality","isHighQuality","curMime","RECORDING_OPTIONS_PRESET_HIGH_QUALITY","isMeteringEnabled","android","outputFormat","audioEncoder","sampleRate","numberOfChannels","bitRate","ios","audioQuality","linearPCMBitDepth","linearPCMIsBigEndian","linearPCMIsFloat","web","RECORDING_OPTIONS_PRESET_LOW_QUALITY","_recorderExists","eventEmitter","ExponentAV","Recording","finalStatus","isAudioEnabled","setTimeout","clearTimeout","throwIfAudioIsDisabled","status","operation","createAsync","options","onRecordingStatusUpdate","progressUpdateIntervalMillis","recording","keepAudioActiveHint","canRecord","isRecording","isDoneRecording","durationMillis","_finalDurationMillis","extensionRegex","uri","currentStatus","stopResult","stopError","Promise","initialStatus","onPlaybackStatusUpdate","console","_uri"],"mappings":"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","sourcesContent":["import {EventEmitter, Platform, Subscription} from '@unimodules/core';\nimport {PermissionResponse, PermissionStatus} from 'unimodules-permissions-interface';\n\nimport {_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS, AVPlaybackStatus, AVPlaybackStatusToSet,} from '../AV';\nimport ExponentAV from '../ExponentAV';\nimport {isAudioEnabled, throwIfAudioIsDisabled} from './AudioAvailability';\nimport {Sound} from './Sound';\n\nexport type RecordingOptions = {\n    isMeteringEnabled?: boolean;\n    keepAudioActiveHint?: boolean;\n    android: {\n        extension: string;\n        outputFormat: number;\n        audioEncoder: number;\n        sampleRate?: number;\n        numberOfChannels?: number;\n        bitRate?: number;\n        maxFileSize?: number;\n    };\n    ios: {\n        extension: string;\n        outputFormat?: string | number;\n        audioQuality: number;\n        sampleRate: number;\n        numberOfChannels: number;\n        bitRate: number;\n        bitRateStrategy?: number;\n        bitDepthHint?: number;\n        linearPCMBitDepth?: number;\n        linearPCMIsBigEndian?: boolean;\n        linearPCMIsFloat?: boolean;\n    };\n    web: {\n        mimeType: string,\n        audioBitsPerSecond: number,\n        bitsPerSecond: number,\n        extension: string,\n    } | undefined\n};\n\n// TODO: consider changing these to enums\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;\n\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;\n\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';\n\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;\n\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;\n\n// TODO : maybe make presets for music and speech, or lossy / lossless.\n\nexport type Qualities = 'highQuality' | 'lowQuality'\nconst getWebMediaRecorderSupportedMime = (isHighQuality: boolean) => {\n    if (Platform.OS !== 'web') {\n        return\n    }\n    if (!window.MediaRecorder) {\n        return\n    }\n    // TODO : need test the different situations\n    const mimes: { [key in Qualities]: RecordingOptions['web'] }[] = [\n        {\n            highQuality: {\n                mimeType: 'audio/mp4;codecs=\"mp4a.40.5\"', // MPEG-4 HE-AAC v1\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.m4a',\n            },\n            lowQuality: {\n                mimeType: 'audio/mp4;codecs=\"mp4a.40.5\"', // MPEG-4 HE-AAC v1\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.m4a',\n            }\n        },\n        {\n            highQuality: {\n                mimeType: 'audio/mp4;codecs=\"mp4a.40.2\"', // MPEG-4 AAC LC\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.m4a',\n            },\n            lowQuality: {\n                mimeType: 'audio/mp4;codecs=\"mp4a.40.2\"', // MPEG-4 AAC LC\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.m4a',\n            }\n        },\n        {\n            highQuality: {\n                mimeType: 'audio/mpeg', // Support depends on polyfill\n                audioBitsPerSecond: 128000,\n                bitsPerSecond: 128000,\n                extension: '.mp3',\n            }, lowQuality: {\n                mimeType: 'audio/mpeg', // Support depends on polyfill\n                audioBitsPerSecond: 128000,\n                bitsPerSecond: 128000,\n                extension: '.mp3',\n            }\n        },\n        {\n            highQuality: {\n                mimeType: 'audio/webm;codecs=\"opus\"',\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.webm',\n            },\n            lowQuality: {\n                mimeType: 'audio/webm;codecs=\"opus\"',\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.webm',\n            }\n        },\n        {\n            highQuality: {\n                mimeType: 'audio/webm;codecs=\"vp8\"',\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.webm',\n            },\n            lowQuality: {\n                mimeType: 'audio/webm;codecs=\"vp8\"',\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.webm',\n            }\n        },\n        {\n            highQuality: {\n                mimeType: 'audio/webm',\n                audioBitsPerSecond: 1000,\n                bitsPerSecond: 1000,\n                extension: '.webm',\n            },\n            lowQuality: {\n                mimeType: 'audio/webm',\n                audioBitsPerSecond: 64000,\n                bitsPerSecond: 64000,\n                extension: '.webm',\n            }\n        },\n\n    ]\n\n    for (let index = 0; index < mimes.length; index++) {\n        const mime = mimes[index]\n        const quality: Qualities = isHighQuality ? 'highQuality' : 'lowQuality';\n        const curMime = mime[quality]\n        if (curMime) {\n            if (window.MediaRecorder.isTypeSupported(curMime.mimeType)) {\n                return curMime\n            }\n        }\n    }\n}\nexport const RECORDING_OPTIONS_PRESET_HIGH_QUALITY: RecordingOptions = {\n    isMeteringEnabled: true,\n    android: {\n        extension: '.m4a',\n        outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n        audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n        sampleRate: 44100,\n        numberOfChannels: 2,\n        bitRate: 128000,\n    },\n    ios: {\n        extension: '.wav',\n        audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n        sampleRate: 44100,\n        numberOfChannels: 2,\n        bitRate: 128000,\n        linearPCMBitDepth: 16,\n        linearPCMIsBigEndian: false,\n        linearPCMIsFloat: false,\n    },\n    web: getWebMediaRecorderSupportedMime(true),\n};\n\nexport const RECORDING_OPTIONS_PRESET_LOW_QUALITY: RecordingOptions = {\n    isMeteringEnabled: true,\n    android: {\n        extension: '.3gp',\n        outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n        audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n        sampleRate: 44100,\n        numberOfChannels: 2,\n        bitRate: 128000,\n    },\n    ios: {\n        extension: '.wav',\n        audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n        sampleRate: 44100,\n        numberOfChannels: 2,\n        bitRate: 128000,\n        linearPCMBitDepth: 16,\n        linearPCMIsBigEndian: false,\n        linearPCMIsFloat: false,\n    },\n    web: getWebMediaRecorderSupportedMime(false),\n};\n\n// TODO: For consistency with PlaybackStatus, should we include progressUpdateIntervalMillis here as\n// well?\nexport type RecordingStatus = {\n    canRecord: boolean;\n    isRecording: boolean;\n    isDoneRecording: boolean;\n    durationMillis: number;\n    metering?: number;\n};\n\nexport {PermissionStatus};\nexport type {PermissionResponse};\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExponentAV.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExponentAV.requestPermissionsAsync();\n}\n\nexport class Recording {\n    _subscription: Subscription | null = null;\n    _canRecord: boolean = false;\n    _isDoneRecording: boolean = false;\n    _finalDurationMillis: number = 0;\n    _uri: string | null = null;\n    _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n    _progressUpdateTimeoutVariable: number | null = null;\n    _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    _options: RecordingOptions | null = null;\n\n    // Internal methods\n\n    _cleanupForUnloadedRecorder = async (finalStatus?: RecordingStatus) => {\n        this._canRecord = false;\n        this._isDoneRecording = true;\n        this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n        _recorderExists = false;\n        if (this._subscription) {\n            this._subscription.remove();\n            this._subscription = null;\n        }\n        this._disablePolling();\n        return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n    };\n\n    _pollingLoop = async () => {\n        if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n            this._progressUpdateTimeoutVariable = setTimeout(\n                this._pollingLoop,\n                this._progressUpdateIntervalMillis\n            ) as any;\n            try {\n                await this.getStatusAsync();\n            } catch (error) {\n                this._disablePolling();\n            }\n        }\n    };\n\n    _disablePolling() {\n        if (this._progressUpdateTimeoutVariable != null) {\n            clearTimeout(this._progressUpdateTimeoutVariable);\n            this._progressUpdateTimeoutVariable = null;\n        }\n    }\n\n    _enablePollingIfNecessaryAndPossible() {\n        if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n            this._disablePolling();\n            this._pollingLoop();\n        }\n    }\n\n    _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n        if (this._onRecordingStatusUpdate != null) {\n            this._onRecordingStatusUpdate(status);\n        }\n    }\n\n    async _performOperationAndHandleStatusAsync(\n        operation: () => Promise<RecordingStatus>\n    ): Promise<RecordingStatus> {\n        throwIfAudioIsDisabled();\n        if (this._canRecord) {\n            const status = await operation();\n            this._callOnRecordingStatusUpdateForNewStatus(status);\n            return status;\n        } else {\n            throw new Error('Cannot complete operation because this recorder is not ready to record.');\n        }\n    }\n\n    // Note that all calls automatically call onRecordingStatusUpdate as a side effect.\n\n    static createAsync = async (\n        options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY,\n        onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null,\n        progressUpdateIntervalMillis: number | null = null\n    ): Promise<{ recording: Recording; status: RecordingStatus }> => {\n        const recording: Recording = new Recording();\n        if (progressUpdateIntervalMillis) {\n            recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n        }\n        recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n        await recording.prepareToRecordAsync({\n            ...options,\n            keepAudioActiveHint: true,\n        });\n        try {\n            const status = await recording.startAsync();\n            return {recording, status};\n        } catch (err) {\n            recording.stopAndUnloadAsync();\n            throw err;\n        }\n    };\n\n    // Get status API\n\n    getStatusAsync = async (): Promise<RecordingStatus> => {\n        // Automatically calls onRecordingStatusUpdate.\n        if (this._canRecord) {\n            return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n        }\n        const status = {\n            canRecord: false,\n            isRecording: false,\n            isDoneRecording: this._isDoneRecording,\n            durationMillis: this._finalDurationMillis,\n        };\n        this._callOnRecordingStatusUpdateForNewStatus(status);\n        return status;\n    };\n\n    setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n        this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n        if (onRecordingStatusUpdate == null) {\n            this._disablePolling();\n        } else {\n            this._enablePollingIfNecessaryAndPossible();\n        }\n        this.getStatusAsync();\n    }\n\n    setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n        this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n        this.getStatusAsync();\n    }\n\n    // Record API\n\n    async prepareToRecordAsync(\n        options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY\n    ): Promise<RecordingStatus> {\n        throwIfAudioIsDisabled();\n\n        if (_recorderExists) {\n            throw new Error('Only one Recording object can be prepared at a given time.');\n        }\n\n        if (this._isDoneRecording) {\n            throw new Error('This Recording object is done recording; you must make a new one.');\n        }\n\n        if (!options || !options.android || !options.ios) {\n            throw new Error(\n                'You must provide recording options for android and ios in order to prepare to record.'\n            );\n        }\n\n        const extensionRegex = /^\\.\\w+$/;\n        if (\n            !options.android.extension ||\n            !options.ios.extension ||\n            !extensionRegex.test(options.android.extension) ||\n            !extensionRegex.test(options.ios.extension)\n        ) {\n            throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n        }\n\n        if (!this._canRecord) {\n            if (eventEmitter) {\n                this._subscription = eventEmitter.addListener(\n                    'Expo.Recording.recorderUnloaded',\n                    this._cleanupForUnloadedRecorder\n                );\n            }\n\n            const {\n                uri,\n                status,\n            }: {\n                uri: string;\n                // status is of type RecordingStatus, but without the canRecord field populated\n                status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n            } = await ExponentAV.prepareAudioRecorder(options);\n            _recorderExists = true;\n            this._uri = uri;\n            this._options = options;\n            this._canRecord = true;\n\n            const currentStatus = {...status, canRecord: true};\n            this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n            this._enablePollingIfNecessaryAndPossible();\n            return currentStatus;\n        } else {\n            throw new Error('This Recording object is already prepared to record.');\n        }\n    }\n\n    async startAsync(): Promise<RecordingStatus> {\n        return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n    }\n\n    async pauseAsync(): Promise<RecordingStatus> {\n        return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n    }\n\n    async stopAndUnloadAsync(): Promise<RecordingStatus> {\n        if (!this._canRecord) {\n            if (this._isDoneRecording) {\n                throw new Error('Cannot unload a Recording that has already been unloaded.');\n            } else {\n                throw new Error('Cannot unload a Recording that has not been prepared.');\n            }\n        }\n        // We perform a separate native API call so that the state of the Recording can be updated with\n        // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n        let stopResult: RecordingStatus | undefined;\n        let stopError: Error | undefined;\n        try {\n            stopResult = await ExponentAV.stopAudioRecording();\n        } catch (err: any) {\n            stopError = err;\n        }\n\n        // Web has to return the URI at the end of recording, so needs a little destructuring\n        if (Platform.OS === 'web') {\n            const {uri, status} = (stopResult as unknown) as {\n                uri: string | null;\n                status: RecordingStatus;\n            };\n\n            this._uri = uri;\n            stopResult = status;\n        }\n\n\n        // Clean-up and return status\n        await ExponentAV.unloadAudioRecorder();\n        const status = await this._cleanupForUnloadedRecorder(stopResult);\n        return stopError ? Promise.reject(stopError) : status;\n    }\n\n    // Read API\n\n    getURI(): string | null {\n        return this._uri;\n    }\n\n    /** @deprecated Use `createNewLoadedSoundAsync()` instead */\n    async createNewLoadedSound(\n        initialStatus: AVPlaybackStatusToSet = {},\n        onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n    ): Promise<{ sound: Sound; status: AVPlaybackStatus }> {\n        console.warn(\n            `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n        );\n        return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n    }\n\n    async createNewLoadedSoundAsync(\n        initialStatus: AVPlaybackStatusToSet = {},\n        onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n    ): Promise<{ sound: Sound; status: AVPlaybackStatus }> {\n        if (this._uri == null || !this._isDoneRecording) {\n            throw new Error('Cannot create sound when the Recording has not finished!');\n        }\n        return Sound.createAsync(\n            // $FlowFixMe: Flow can't distinguish between this literal and Asset\n            {uri: this._uri},\n            initialStatus,\n            onPlaybackStatusUpdate,\n            false\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}