{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import*as Notifications from'expo-notifications';import React,{useEffect,useState}from'react';import{Button,Text,View}from\"../../components/UI\";import Platform from\"react-native-web/dist/exports/Platform\";import{defaultNotification,registerForPushNotificationsAsync,schedulePushNotification}from\"../../utils/expo-notification\";import{shortenTFunctionKey}from\"../../providers/i18n-labor\";import{useBunnyKit}from\"../../hooks/bunny-kit\";export default function DemoNotificationScreen(){var _useBunnyKit=useBunnyKit(),t=_useBunnyKit.t;var notificationReceivedListener={remove:function remove(){}};var notificationRespondedListener={remove:function remove(){}};var _useState=useState(''),_useState2=_slicedToArray(_useState,2),expoPushToken=_useState2[0],setExpoPushToken=_useState2[1];var _useState3=useState(defaultNotification),_useState4=_slicedToArray(_useState3,2),notification=_useState4[0],setNotification=_useState4[1];var i18nSysPrefix='sys';var stSys=shortenTFunctionKey(t,i18nSysPrefix);useEffect(function(){Notifications.setNotificationHandler({handleNotification:function handleNotification(){return _regeneratorRuntime.async(function handleNotification$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",{shouldShowAlert:true,shouldPlaySound:true,shouldSetBadge:false});case 1:case\"end\":return _context.stop();}}},null,null,null,Promise);}});registerForPushNotificationsAsync({failedToGetToken:stSys(\"failedToGetToken\"),mustUsePhysicalDevice:stSys(\"mustUsePhysicalDevice\")}).then(function(token){if(token){setExpoPushToken(token);}});notificationReceivedListener=Notifications.addNotificationReceivedListener(function(notification){setNotification(notification);});notificationRespondedListener=Notifications.addNotificationResponseReceivedListener(function(response){console.log('---response',response);});return function(){Notifications.removeNotificationSubscription(notificationReceivedListener);Notifications.removeNotificationSubscription(notificationRespondedListener);};},[]);return Platform.OS!=='web'?React.createElement(View,{style:{flex:1,alignItems:'center',justifyContent:'space-around'}},React.createElement(Text,null,\"Your expo push token: \",expoPushToken),React.createElement(View,{style:{alignItems:'center',justifyContent:'center'}},React.createElement(Text,null,\"Title: \",notification&&notification.request.content.title,\" \"),React.createElement(Text,null,\"Body: \",notification&&notification.request.content.body),React.createElement(Text,null,\"Data: \",notification&&JSON.stringify(notification.request.content.data))),React.createElement(Button,{title:\"Press to schedule a notification\",onPress:function _callee(){return _regeneratorRuntime.async(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(schedulePushNotification());case 2:case\"end\":return _context2.stop();}}},null,null,null,Promise);}})):React.createElement(Text,null,\"Dummy notification\");}","map":null,"metadata":{},"sourceType":"module"}