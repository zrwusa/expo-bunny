{"ast":null,"code":"\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");exports.__esModule=true;exports.RouteAnnouncer=RouteAnnouncer;exports.default=void 0;var _react=_interopRequireWildcard(require(\"react\"));var _router=require(\"./router\");function RouteAnnouncer(){var _ref=(0,_router.useRouter)(),asPath=_ref.asPath;var _ref2=(0,_react.useState)(''),_ref3=(0,_slicedToArray2.default)(_ref2,2),routeAnnouncement=_ref3[0],setRouteAnnouncement=_ref3[1];var initialPathLoaded=(0,_react.useRef)(false);(0,_react.useEffect)(function(){if(!initialPathLoaded.current){initialPathLoaded.current=true;return;}var newRouteAnnouncement;var pageHeader=document.querySelector('h1');if(pageHeader){newRouteAnnouncement=pageHeader.innerText||pageHeader.textContent;}if(!newRouteAnnouncement){if(document.title){newRouteAnnouncement=document.title;}else{newRouteAnnouncement=asPath;}}setRouteAnnouncement(newRouteAnnouncement);},[asPath]);return _react.default.createElement(\"p\",{\"aria-live\":\"assertive\",id:\"__next-route-announcer__\",role:\"alert\",style:{border:0,clip:'rect(0 0 0 0)',height:'1px',margin:'-1px',overflow:'hidden',padding:0,position:'absolute',width:'1px',whiteSpace:'nowrap',wordWrap:'normal'}},routeAnnouncement);}_c=RouteAnnouncer;var _default=RouteAnnouncer;exports.default=_default;var _c;$RefreshReg$(_c,\"RouteAnnouncer\");","map":{"version":3,"sources":["../../client/route-announcer.tsx"],"names":["initialPathLoaded","pageHeader","document","newRouteAnnouncement","setRouteAnnouncement","border","clip","height","margin","overflow","padding","position","width","whiteSpace","wordWrap","RouteAnnouncer"],"mappings":"sWAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,OAAA,CAAA,OAAA,YAAA,CAEO,QAAA,CAAA,cAAA,EAA0B,CAC/B,SAAmB,CAAA,EAAA,OAAA,CAAnB,SAAmB,GAAnB,CAAM,MAAN,MAAM,MAAN,CACA,UAAkD,CAAA,EAAA,MAAA,CAAA,QAAA,EAAlD,EAAkD,CAAlD,4CAAM,iBAAN,UAAM,oBAAN,UAGA,GAAMA,CAAAA,iBAAiB,CAAG,CAAA,EAAA,MAAA,CAAA,MAAA,EAA1B,KAA0B,CAA1B,CAMA,CAAA,EAAA,MAAA,CAAA,SAAA,EACE,UAAM,CACJ,GAAI,CAACA,iBAAiB,CAAtB,OAAA,CAAgC,CAC9BA,iBAAiB,CAAjBA,OAAAA,CAAAA,IAAAA,CACA,OAGF,IAAA,CAAA,oBAAA,CACA,GAAMC,CAAAA,UAAU,CAAGC,QAAQ,CAARA,aAAAA,CAAnB,IAAmBA,CAAnB,CAEA,GAAA,UAAA,CAAgB,CACdC,oBAAoB,CAAGF,UAAU,CAAVA,SAAAA,EAAwBA,UAAU,CAAzDE,WAAAA,CAEF,IAAI,CAAJ,oBAAA,CAA2B,CACzB,GAAID,QAAQ,CAAZ,KAAA,CAAoB,CAClBC,oBAAoB,CAAGD,QAAQ,CAA/BC,KAAAA,CADF,CAAA,IAEO,CACLA,oBAAoB,CAApBA,MAAAA,CAEH,CAEDC,CAAAA,oBAAoB,CAApBA,oBAAoB,CAApBA,CArBJ,CAAA,CAwBE,CAxBF,MAwBE,CAxBF,EA2BA,MACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CACE,YAAU,WADZ,CAEE,EAAE,CAFJ,0BAAA,CAGE,IAAI,CAHN,OAAA,CAIE,KAAK,CAAE,CACLC,MAAM,CADD,CAAA,CAELC,IAAI,CAFC,eAAA,CAGLC,MAAM,CAHD,KAAA,CAILC,MAAM,CAJD,MAAA,CAKLC,QAAQ,CALH,QAAA,CAMLC,OAAO,CANF,CAAA,CAOLC,QAAQ,CAPH,UAAA,CAQLC,KAAK,CARA,KAAA,CAWLC,UAAU,CAXL,QAAA,CAYLC,QAAQ,CAhBZ,QAIS,CAJT,CAAA,CADF,iBACE,CADF,C,IAtCK,c,cA+DQC,c","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { useRouter } from './router'\n\nexport function RouteAnnouncer() {\n  const { asPath } = useRouter()\n  const [routeAnnouncement, setRouteAnnouncement] = useState('')\n\n  // Only announce the path change, but not for the first load because screen reader will do that automatically.\n  const initialPathLoaded = useRef(false)\n\n  // Every time the path changes, announce the route change. The announcement will be prioritized by h1, then title\n  // (from metadata), and finally if those don't exist, then the pathName that is in the URL. This methodology is\n  // inspired by Marcy Sutton's accessible client routing user testing. More information can be found here:\n  // https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/\n  useEffect(\n    () => {\n      if (!initialPathLoaded.current) {\n        initialPathLoaded.current = true\n        return\n      }\n\n      let newRouteAnnouncement\n      const pageHeader = document.querySelector('h1')\n\n      if (pageHeader) {\n        newRouteAnnouncement = pageHeader.innerText || pageHeader.textContent\n      }\n      if (!newRouteAnnouncement) {\n        if (document.title) {\n          newRouteAnnouncement = document.title\n        } else {\n          newRouteAnnouncement = asPath\n        }\n      }\n\n      setRouteAnnouncement(newRouteAnnouncement)\n    },\n    // TODO: switch to pathname + query object of dynamic route requirements\n    [asPath]\n  )\n\n  return (\n    <p\n      aria-live=\"assertive\" // Make the announcement immediately.\n      id=\"__next-route-announcer__\"\n      role=\"alert\"\n      style={{\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: '1px',\n        margin: '-1px',\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        width: '1px',\n\n        // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n        whiteSpace: 'nowrap',\n        wordWrap: 'normal',\n      }}\n    >\n      {routeAnnouncement}\n    </p>\n  )\n}\n\nexport default RouteAnnouncer\n"]},"metadata":{},"sourceType":"script"}