{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import Platform from\"react-native-web/dist/exports/Platform\";var _setTimeout=global.setTimeout;var _clearTimeout=global.clearTimeout;var MAX_TIMER_DURATION_MS=60*1000;if(Platform.OS==='android'){var timerFix={};var runTask=function runTask(id,fn,ttl,args){var waitingTime=ttl-Date.now();if(waitingTime<=1){InteractionManager.runAfterInteractions(function(){if(!timerFix[id]){return;}delete timerFix[id];fn.apply(void 0,_toConsumableArray(args));});return;}var afterTime=Math.min(waitingTime,MAX_TIMER_DURATION_MS);timerFix[id]=_setTimeout(function(){return runTask(id,fn,ttl,args);},afterTime);};global.setTimeout=function(fn,time){for(var _len=arguments.length,args=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}if(time){if(MAX_TIMER_DURATION_MS<time){var ttl=Date.now()+time;var id='_lt_'+Object.keys(timerFix).length;runTask(id,fn,ttl,args);return id;}}return _setTimeout.apply(void 0,[fn,time].concat(args));};global.clearTimeout=function(id){if(typeof id==='string'&&id.startsWith('_lt_')){_clearTimeout(timerFix[id]);delete timerFix[id];return;}_clearTimeout(id);};}","map":{"version":3,"sources":["/Users/revone/projects/expo-react-bunny/src/hacks/long-period-timer.ts"],"names":["_setTimeout","global","_clearTimeout","MAX_TIMER_DURATION_MS","Platform","timerFix","runTask","waitingTime","ttl","Date","InteractionManager","fn","afterTime","Math","args","id","Object"],"mappings":"uNAGA,GAAMA,CAAAA,WAAW,CAAGC,MAAM,CAA1B,UAAA,CACA,GAAMC,CAAAA,aAAa,CAAGD,MAAM,CAA5B,YAAA,CACA,GAAME,CAAAA,qBAAqB,CAAG,GAA9B,IAAA,CACA,GAAIC,QAAQ,CAARA,EAAAA,GAAJ,SAAA,CAA+B,CAK3B,GAAMC,CAAAA,QAA0B,CAAhC,EAAA,CACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAwE,CACpF,GAAMC,CAAAA,WAAW,CAAGC,GAAG,CAAGC,IAAI,CAA9B,GAA0BA,EAA1B,CACA,GAAIF,WAAW,EAAf,CAAA,CAAsB,CAClBG,kBAAkB,CAAlBA,oBAAAA,CAAwC,UAAM,CAC1C,GAAI,CAACL,QAAQ,CAAb,EAAa,CAAb,CAAmB,CACf,OACH,CACD,MAAOA,CAAAA,QAAQ,CAAf,EAAe,CAAf,CACAM,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,EAAAA,CAAAA,kBAAAA,CAAAA,IAAAA,CAAAA,EALJD,CAAAA,EAOA,OACH,CAED,GAAME,CAAAA,SAAS,CAAGC,IAAI,CAAJA,GAAAA,CAAAA,WAAAA,CAAlB,qBAAkBA,CAAlB,CACAR,QAAQ,CAARA,EAAQ,CAARA,CAAeL,WAAW,CAAC,UAAA,CAAA,MAAMM,CAAAA,OAAO,CAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAb,IAAa,CAAb,CAAD,CAAA,CAA1BD,SAA0B,CAA1BA,CAdJ,CAAA,CAkBAJ,MAAM,CAANA,UAAAA,CAAoB,SAAA,EAAA,CAAA,IAAA,CAAiE,CAAA,IAAA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAhBa,IAAgB,CAAA,GAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAhBA,IAAgB,CAAA,IAAA,CAAA,CAAA,CAAhBA,CAAgB,SAAA,CAAA,IAAA,CAAhBA,CAAgB,CACjF,GAAA,IAAA,CAAU,CACN,GAAIX,qBAAqB,CAAzB,IAAA,CAAkC,CAC9B,GAAMK,CAAAA,GAAG,CAAGC,IAAI,CAAJA,GAAAA,GAAZ,IAAA,CACA,GAAMM,CAAAA,EAAE,CAAG,OAASC,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAApB,MAAA,CACAV,OAAO,CAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAPA,IAAO,CAAPA,CACA,MAAA,CAAA,EAAA,CACH,CACJ,CACD,MAAON,CAAAA,WAAW,CAAXA,KAAAA,CAAAA,IAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAP,IAAOA,CAAAA,CAAP,CATJC,CAAAA,CAYAA,MAAM,CAANA,YAAAA,CAAsB,SAAA,EAAA,CAAa,CAC/B,GAAI,MAAA,CAAA,EAAA,GAAA,QAAA,EAA0Bc,EAAE,CAAFA,UAAAA,CAA9B,MAA8BA,CAA9B,CAAqD,CACjDb,aAAa,CAACG,QAAQ,CAAtBH,EAAsB,CAAT,CAAbA,CACA,MAAOG,CAAAA,QAAQ,CAAf,EAAe,CAAf,CACA,OACH,CACDH,aAAa,CAAbA,EAAa,CAAbA,CANJD,CAAAA,CAQH","sourcesContent":["import {InteractionManager, Platform} from 'react-native';\nimport {JSONSerializable} from '../types';\n\nconst _setTimeout = global.setTimeout;\nconst _clearTimeout = global.clearTimeout;\nconst MAX_TIMER_DURATION_MS = 60 * 1000;\nif (Platform.OS === 'android') {\n// Work around issue `Setting a timer for long time`,\n// when use Firebase-JS-SDK with Expo,we encounter this issue,\n// unfortunately Firebase does't recommend to use js sdk with react native.\n// see: https://github.com/firebase/firebase-js-sdk/issues/97\n    const timerFix: JSONSerializable = {};\n    const runTask = (id: string, fn: (...args: any[]) => void, ttl: number, args: any[]) => {\n        const waitingTime = ttl - Date.now();\n        if (waitingTime <= 1) {\n            InteractionManager.runAfterInteractions(() => {\n                if (!timerFix[id]) {\n                    return;\n                }\n                delete timerFix[id];\n                fn(...args);\n            });\n            return;\n        }\n\n        const afterTime = Math.min(waitingTime, MAX_TIMER_DURATION_MS);\n        timerFix[id] = _setTimeout(() => runTask(id, fn, ttl, args), afterTime);\n    };\n\n    // @ts-ignore\n    global.setTimeout = (fn: (...args: any[]) => void, time?: number, ...args: any[]) => {\n        if (time) {\n            if (MAX_TIMER_DURATION_MS < time) {\n                const ttl = Date.now() + time;\n                const id = '_lt_' + Object.keys(timerFix).length;\n                runTask(id, fn, ttl, args);\n                return id;\n            }\n        }\n        return _setTimeout(fn, time, ...args);\n    };\n\n    global.clearTimeout = (id: any) => {\n        if (typeof id === 'string' && id.startsWith('_lt_')) {\n            _clearTimeout(timerFix[id]);\n            delete timerFix[id];\n            return;\n        }\n        _clearTimeout(id);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}